
cviko10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08006580  08006580  00016580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a04  08006a04  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006a04  08006a04  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a04  08006a04  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001d8  08006be4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08006be4  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a51f  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea6  00000000  00000000  0002a727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005351  00000000  00000000  0002d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074a1  00000000  00000000  00032a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000793b7  00000000  00000000  00039eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b3271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e8  00000000  00000000  000b32c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006564 	.word	0x08006564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006564 	.word	0x08006564

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa93 f3a3 	rbit	r3, r3
 8000be2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	fab3 f383 	clz	r3, r3
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2103      	movs	r1, #3
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa93 f3a3 	rbit	r3, r3
 8000c00:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	fab3 f383 	clz	r3, r3
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	431a      	orrs	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	401a      	ands	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	fb01 f303 	mul.w	r3, r1, r3
 8000c40:	431a      	orrs	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b089      	sub	sp, #36	; 0x24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	613b      	str	r3, [r7, #16]
  return(result);
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fab3 f383 	clz	r3, r3
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2103      	movs	r1, #3
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	401a      	ands	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000ca0:	bf00      	nop
 8000ca2:	3724      	adds	r7, #36	; 0x24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa93 f3a3 	rbit	r3, r3
 8000cc6:	613b      	str	r3, [r7, #16]
  return(result);
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	fab3 f383 	clz	r3, r3
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	401a      	ands	r2, r3
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	fab3 f383 	clz	r3, r3
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	60da      	str	r2, [r3, #12]
}
 8000cfa:	bf00      	nop
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b089      	sub	sp, #36	; 0x24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6a1a      	ldr	r2, [r3, #32]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	613b      	str	r3, [r7, #16]
  return(result);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fab3 f383 	clz	r3, r3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000d54:	bf00      	nop
 8000d56:	3724      	adds	r7, #36	; 0x24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	613b      	str	r3, [r7, #16]
  return(result);
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	210f      	movs	r1, #15
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000db2:	bf00      	nop
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b088      	sub	sp, #32
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000de6:	e048      	b.n	8000e7a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d03a      	beq.n	8000e74 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	461a      	mov	r2, r3
 8000e04:	69b9      	ldr	r1, [r7, #24]
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fede 	bl	8000bc8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d003      	beq.n	8000e1c <LL_GPIO_Init+0x5e>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d106      	bne.n	8000e2a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	461a      	mov	r2, r3
 8000e22:	69b9      	ldr	r1, [r7, #24]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff14 	bl	8000c52 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	69b9      	ldr	r1, [r7, #24]
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff3a 	bl	8000cac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d119      	bne.n	8000e74 <LL_GPIO_Init+0xb6>
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	2b07      	cmp	r3, #7
 8000e54:	d807      	bhi.n	8000e66 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	69b9      	ldr	r1, [r7, #24]
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff51 	bl	8000d06 <LL_GPIO_SetAFPin_0_7>
 8000e64:	e006      	b.n	8000e74 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	69b9      	ldr	r1, [r7, #24]
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff76 	bl	8000d60 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3301      	adds	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1af      	bne.n	8000de8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d003      	beq.n	8000e98 <LL_GPIO_Init+0xda>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d107      	bne.n	8000ea8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	6819      	ldr	r1, [r3, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff febd 	bl	8000c22 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <LL_RCC_HSI_IsReady+0x20>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <LL_RCC_LSE_IsReady+0x20>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000

08000efc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <LL_RCC_GetSysClkSource+0x18>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <LL_RCC_GetAHBPrescaler+0x18>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <LL_RCC_GetAPB1Prescaler+0x18>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <LL_RCC_GetUSARTClockSource+0x28>)
 8000f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f78:	2103      	movs	r1, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	401a      	ands	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	061b      	lsls	r3, r3, #24
 8000f86:	4313      	orrs	r3, r2
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000

08000f98 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <LL_RCC_PLL_GetMainSource+0x18>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LL_RCC_PLL_GetPrediv+0x18>)
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	f003 030f 	and.w	r3, r3, #15
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000ff4:	f000 f864 	bl	80010c0 <RCC_GetSystemClockFreq>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f882 	bl	800110c <RCC_GetHCLKClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f890 	bl	8001138 <RCC_GetPCLK1ClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f89c 	bl	8001160 <RCC_GetPCLK2ClockFreq>
 8001028:	4602      	mov	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60da      	str	r2, [r3, #12]
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12d      	bne.n	80010a6 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff8e 	bl	8000f6c <LL_RCC_GetUSARTClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b03      	cmp	r3, #3
 8001054:	d00a      	beq.n	800106c <LL_RCC_GetUSARTClockFreq+0x34>
 8001056:	2b03      	cmp	r3, #3
 8001058:	d819      	bhi.n	800108e <LL_RCC_GetUSARTClockFreq+0x56>
 800105a:	2b01      	cmp	r3, #1
 800105c:	d002      	beq.n	8001064 <LL_RCC_GetUSARTClockFreq+0x2c>
 800105e:	2b02      	cmp	r3, #2
 8001060:	d00c      	beq.n	800107c <LL_RCC_GetUSARTClockFreq+0x44>
 8001062:	e014      	b.n	800108e <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001064:	f000 f82c 	bl	80010c0 <RCC_GetSystemClockFreq>
 8001068:	60f8      	str	r0, [r7, #12]
        break;
 800106a:	e021      	b.n	80010b0 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800106c:	f7ff ff22 	bl	8000eb4 <LL_RCC_HSI_IsReady>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <LL_RCC_GetUSARTClockFreq+0x84>)
 8001078:	60fb      	str	r3, [r7, #12]
        }
        break;
 800107a:	e016      	b.n	80010aa <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800107c:	f7ff ff2c 	bl	8000ed8 <LL_RCC_LSE_IsReady>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d013      	beq.n	80010ae <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800108a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800108c:	e00f      	b.n	80010ae <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800108e:	f000 f817 	bl	80010c0 <RCC_GetSystemClockFreq>
 8001092:	4603      	mov	r3, r0
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f839 	bl	800110c <RCC_GetHCLKClockFreq>
 800109a:	4603      	mov	r3, r0
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f84b 	bl	8001138 <RCC_GetPCLK1ClockFreq>
 80010a2:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80010a4:	e004      	b.n	80010b0 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80010a6:	bf00      	nop
 80010a8:	e002      	b.n	80010b0 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80010aa:	bf00      	nop
 80010ac:	e000      	b.n	80010b0 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80010ae:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80010b0:	68fb      	ldr	r3, [r7, #12]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	007a1200 	.word	0x007a1200

080010c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80010ca:	f7ff ff17 	bl	8000efc <LL_RCC_GetSysClkSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d00c      	beq.n	80010ee <RCC_GetSystemClockFreq+0x2e>
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d80e      	bhi.n	80010f6 <RCC_GetSystemClockFreq+0x36>
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <RCC_GetSystemClockFreq+0x22>
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d003      	beq.n	80010e8 <RCC_GetSystemClockFreq+0x28>
 80010e0:	e009      	b.n	80010f6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <RCC_GetSystemClockFreq+0x48>)
 80010e4:	607b      	str	r3, [r7, #4]
      break;
 80010e6:	e009      	b.n	80010fc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <RCC_GetSystemClockFreq+0x48>)
 80010ea:	607b      	str	r3, [r7, #4]
      break;
 80010ec:	e006      	b.n	80010fc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80010ee:	f000 f84b 	bl	8001188 <RCC_PLL_GetFreqDomain_SYS>
 80010f2:	6078      	str	r0, [r7, #4]
      break;
 80010f4:	e002      	b.n	80010fc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <RCC_GetSystemClockFreq+0x48>)
 80010f8:	607b      	str	r3, [r7, #4]
      break;
 80010fa:	bf00      	nop
  }

  return frequency;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	007a1200 	.word	0x007a1200

0800110c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001114:	f7ff ff00 	bl	8000f18 <LL_RCC_GetAHBPrescaler>
 8001118:	4603      	mov	r3, r0
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <RCC_GetHCLKClockFreq+0x28>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	461a      	mov	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	40d3      	lsrs	r3, r2
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	080065e8 	.word	0x080065e8

08001138 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001140:	f7ff fef8 	bl	8000f34 <LL_RCC_GetAPB1Prescaler>
 8001144:	4603      	mov	r3, r0
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <RCC_GetPCLK1ClockFreq+0x24>)
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	40d3      	lsrs	r3, r2
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	080065f8 	.word	0x080065f8

08001160 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001168:	f7ff fef2 	bl	8000f50 <LL_RCC_GetAPB2Prescaler>
 800116c:	4603      	mov	r3, r0
 800116e:	0adb      	lsrs	r3, r3, #11
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <RCC_GetPCLK2ClockFreq+0x24>)
 8001172:	5cd3      	ldrb	r3, [r2, r3]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	40d3      	lsrs	r3, r2
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	080065f8 	.word	0x080065f8

08001188 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001196:	f7ff feff 	bl	8000f98 <LL_RCC_PLL_GetMainSource>
 800119a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <RCC_PLL_GetFreqDomain_SYS+0x24>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d003      	beq.n	80011b2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80011aa:	e005      	b.n	80011b8 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80011ae:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80011b0:	e005      	b.n	80011be <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80011b4:	60fb      	str	r3, [r7, #12]
      break;
 80011b6:	e002      	b.n	80011be <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80011ba:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80011bc:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80011be:	f7ff ff07 	bl	8000fd0 <LL_RCC_PLL_GetPrediv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	3301      	adds	r3, #1
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	fbb2 f4f3 	udiv	r4, r2, r3
 80011cc:	f7ff fef2 	bl	8000fb4 <LL_RCC_PLL_GetMultiplicator>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011d6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011da:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	fa92 f2a2 	rbit	r2, r2
 80011e2:	603a      	str	r2, [r7, #0]
  return(result);
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	40d3      	lsrs	r3, r2
 80011ec:	3302      	adds	r3, #2
 80011ee:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	003d0900 	.word	0x003d0900
 8001200:	007a1200 	.word	0x007a1200

08001204 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	615a      	str	r2, [r3, #20]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <LL_TIM_Init+0xd4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <LL_TIM_Init+0x2c>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001342:	d003      	beq.n	800134c <LL_TIM_Init+0x2c>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a2c      	ldr	r2, [pc, #176]	; (80013f8 <LL_TIM_Init+0xd8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d106      	bne.n	800135a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <LL_TIM_Init+0xd4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <LL_TIM_Init+0x6a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001368:	d00f      	beq.n	800138a <LL_TIM_Init+0x6a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <LL_TIM_Init+0xd8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00b      	beq.n	800138a <LL_TIM_Init+0x6a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <LL_TIM_Init+0xdc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <LL_TIM_Init+0x6a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a20      	ldr	r2, [pc, #128]	; (8001400 <LL_TIM_Init+0xe0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d003      	beq.n	800138a <LL_TIM_Init+0x6a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1f      	ldr	r2, [pc, #124]	; (8001404 <LL_TIM_Init+0xe4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d106      	bne.n	8001398 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff3b 	bl	8001220 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff27 	bl	8001204 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LL_TIM_Init+0xd4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00b      	beq.n	80013d6 <LL_TIM_Init+0xb6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <LL_TIM_Init+0xdc>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <LL_TIM_Init+0xb6>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LL_TIM_Init+0xe0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d003      	beq.n	80013d6 <LL_TIM_Init+0xb6>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <LL_TIM_Init+0xe4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d105      	bne.n	80013e2 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7c1b      	ldrb	r3, [r3, #16]
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff2d 	bl	800123c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff8c 	bl	8001300 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40012c00 	.word	0x40012c00
 80013f8:	40000400 	.word	0x40000400
 80013fc:	40014000 	.word	0x40014000
 8001400:	40014400 	.word	0x40014400
 8001404:	40014800 	.word	0x40014800

08001408 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800141e:	d045      	beq.n	80014ac <LL_TIM_OC_Init+0xa4>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001426:	d848      	bhi.n	80014ba <LL_TIM_OC_Init+0xb2>
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142e:	d036      	beq.n	800149e <LL_TIM_OC_Init+0x96>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001436:	d840      	bhi.n	80014ba <LL_TIM_OC_Init+0xb2>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143e:	d027      	beq.n	8001490 <LL_TIM_OC_Init+0x88>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001446:	d838      	bhi.n	80014ba <LL_TIM_OC_Init+0xb2>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800144e:	d018      	beq.n	8001482 <LL_TIM_OC_Init+0x7a>
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001456:	d830      	bhi.n	80014ba <LL_TIM_OC_Init+0xb2>
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d003      	beq.n	8001466 <LL_TIM_OC_Init+0x5e>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b10      	cmp	r3, #16
 8001462:	d007      	beq.n	8001474 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001464:	e029      	b.n	80014ba <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f82d 	bl	80014c8 <OC1Config>
 800146e:	4603      	mov	r3, r0
 8001470:	75fb      	strb	r3, [r7, #23]
      break;
 8001472:	e023      	b.n	80014bc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f8a6 	bl	80015c8 <OC2Config>
 800147c:	4603      	mov	r3, r0
 800147e:	75fb      	strb	r3, [r7, #23]
      break;
 8001480:	e01c      	b.n	80014bc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 f923 	bl	80016d0 <OC3Config>
 800148a:	4603      	mov	r3, r0
 800148c:	75fb      	strb	r3, [r7, #23]
      break;
 800148e:	e015      	b.n	80014bc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 f9a0 	bl	80017d8 <OC4Config>
 8001498:	4603      	mov	r3, r0
 800149a:	75fb      	strb	r3, [r7, #23]
      break;
 800149c:	e00e      	b.n	80014bc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 fa05 	bl	80018b0 <OC5Config>
 80014a6:	4603      	mov	r3, r0
 80014a8:	75fb      	strb	r3, [r7, #23]
      break;
 80014aa:	e007      	b.n	80014bc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 fa60 	bl	8001974 <OC6Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	75fb      	strb	r3, [r7, #23]
      break;
 80014b8:	e000      	b.n	80014bc <LL_TIM_OC_Init+0xb4>
      break;
 80014ba:	bf00      	nop
  }

  return result;
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	f023 0201 	bic.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f023 0303 	bic.w	r3, r3, #3
 8001502:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f023 0202 	bic.w	r2, r3, #2
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f023 0201 	bic.w	r2, r3, #1
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <OC1Config+0xf0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00b      	beq.n	8001552 <OC1Config+0x8a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <OC1Config+0xf4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <OC1Config+0x8a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <OC1Config+0xf8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d003      	beq.n	8001552 <OC1Config+0x8a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <OC1Config+0xfc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11e      	bne.n	8001590 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f023 0208 	bic.w	r2, r3, #8
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4313      	orrs	r3, r2
 8001560:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f023 0204 	bic.w	r2, r3, #4
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4313      	orrs	r3, r2
 8001570:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fe58 	bl	8001258 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40012c00 	.word	0x40012c00
 80015bc:	40014000 	.word	0x40014000
 80015c0:	40014400 	.word	0x40014400
 80015c4:	40014800 	.word	0x40014800

080015c8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	f023 0210 	bic.w	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800160a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	0212      	lsls	r2, r2, #8
 8001614:	4313      	orrs	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f023 0220 	bic.w	r2, r3, #32
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f023 0210 	bic.w	r2, r3, #16
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <OC2Config+0xf8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00b      	beq.n	8001658 <OC2Config+0x90>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <OC2Config+0xfc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <OC2Config+0x90>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <OC2Config+0x100>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d003      	beq.n	8001658 <OC2Config+0x90>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <OC2Config+0x104>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d11f      	bne.n	8001698 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	019b      	lsls	r3, r3, #6
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	019b      	lsls	r3, r3, #6
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fde2 	bl	8001274 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40012c00 	.word	0x40012c00
 80016c4:	40014000 	.word	0x40014000
 80016c8:	40014400 	.word	0x40014400
 80016cc:	40014800 	.word	0x40014800

080016d0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 0303 	bic.w	r3, r3, #3
 800170a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	4313      	orrs	r3, r2
 800173c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <OC3Config+0xf8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00b      	beq.n	800175e <OC3Config+0x8e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <OC3Config+0xfc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <OC3Config+0x8e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <OC3Config+0x100>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d003      	beq.n	800175e <OC3Config+0x8e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <OC3Config+0x104>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d11f      	bne.n	800179e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	029b      	lsls	r3, r3, #10
 800177a:	4313      	orrs	r3, r2
 800177c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	4619      	mov	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fd6d 	bl	8001290 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40012c00 	.word	0x40012c00
 80017cc:	40014000 	.word	0x40014000
 80017d0:	40014400 	.word	0x40014400
 80017d4:	40014800 	.word	0x40014800

080017d8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001812:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800181a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	0212      	lsls	r2, r2, #8
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	031b      	lsls	r3, r3, #12
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	031b      	lsls	r3, r3, #12
 8001844:	4313      	orrs	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <OC4Config+0xc8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00b      	beq.n	8001868 <OC4Config+0x90>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <OC4Config+0xcc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d007      	beq.n	8001868 <OC4Config+0x90>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <OC4Config+0xd0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d003      	beq.n	8001868 <OC4Config+0x90>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <OC4Config+0xd4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d107      	bne.n	8001878 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	019b      	lsls	r3, r3, #6
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4619      	mov	r1, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fd0e 	bl	80012ac <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40012c00 	.word	0x40012c00
 80018a4:	40014000 	.word	0x40014000
 80018a8:	40014400 	.word	0x40014400
 80018ac:	40014800 	.word	0x40014800

080018b0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	4313      	orrs	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <OC5Config+0xb4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00b      	beq.n	800192c <OC5Config+0x7c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <OC5Config+0xb8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d007      	beq.n	800192c <OC5Config+0x7c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <OC5Config+0xbc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d003      	beq.n	800192c <OC5Config+0x7c>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <OC5Config+0xc0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d109      	bne.n	8001940 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fcbb 	bl	80012c8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40014000 	.word	0x40014000
 800196c:	40014400 	.word	0x40014400
 8001970:	40014800 	.word	0x40014800

08001974 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	0212      	lsls	r2, r2, #8
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	051b      	lsls	r3, r3, #20
 80019be:	4313      	orrs	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	051b      	lsls	r3, r3, #20
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <OC6Config+0xb4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00b      	beq.n	80019f2 <OC6Config+0x7e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <OC6Config+0xb8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <OC6Config+0x7e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <OC6Config+0xbc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <OC6Config+0x7e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <OC6Config+0xc0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d109      	bne.n	8001a06 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fc66 	bl	80012e4 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40014000 	.word	0x40014000
 8001a30:	40014400 	.word	0x40014400
 8001a34:	40014800 	.word	0x40014800

08001a38 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	605a      	str	r2, [r3, #4]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001aaa:	b4b0      	push	{r4, r5, r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001ab8:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001aba:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac2:	d114      	bne.n	8001aee <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	005a      	lsls	r2, r3, #1
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	441a      	add	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001ad8:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001adc:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ade:	086b      	lsrs	r3, r5, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001aec:	e00a      	b.n	8001b04 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	085a      	lsrs	r2, r3, #1
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	441a      	add	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	60da      	str	r2, [r3, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bcb0      	pop	{r4, r5, r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff88 	bl	8001a38 <LL_USART_IsEnabled>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d14e      	bne.n	8001bcc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <LL_USART_Init+0xc8>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	6851      	ldr	r1, [r2, #4]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	68d2      	ldr	r2, [r2, #12]
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	6912      	ldr	r2, [r2, #16]
 8001b44:	4311      	orrs	r1, r2
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	6992      	ldr	r2, [r2, #24]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff80 	bl	8001a5e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4619      	mov	r1, r3
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff8d 	bl	8001a84 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <LL_USART_Init+0xcc>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d104      	bne.n	8001b7c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff fa60 	bl	8001038 <LL_RCC_GetUSARTClockFreq>
 8001b78:	61b8      	str	r0, [r7, #24]
 8001b7a:	e016      	b.n	8001baa <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <LL_USART_Init+0xd0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d107      	bne.n	8001b94 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fa2f 	bl	8000fec <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e00a      	b.n	8001baa <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <LL_USART_Init+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d106      	bne.n	8001baa <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fa23 	bl	8000fec <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00d      	beq.n	8001bcc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69b9      	ldr	r1, [r7, #24]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff6f 	bl	8001aaa <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	efff69f3 	.word	0xefff69f3
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40004800 	.word	0x40004800

08001be8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <LL_InitTick+0x30>)
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <LL_InitTick+0x30>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <LL_InitTick+0x30>)
 8001c08:	2205      	movs	r2, #5
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001c24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffdd 	bl	8001be8 <LL_InitTick>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <LL_mDelay+0x48>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001c46:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4e:	d00c      	beq.n	8001c6a <LL_mDelay+0x32>
  {
    Delay++;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3301      	adds	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001c56:	e008      	b.n	8001c6a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <LL_mDelay+0x48>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <LL_mDelay+0x32>
    {
      Delay--;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f3      	bne.n	8001c58 <LL_mDelay+0x20>
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <LL_SetSystemCoreClock+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <NVIC_EnableIRQ+0x30>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da0b      	bge.n	8001d04 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <NVIC_SetPriority+0x4c>)
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	3b04      	subs	r3, #4
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d02:	e009      	b.n	8001d18 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <NVIC_SetPriority+0x50>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4013      	ands	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000

08001d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff ffe3 	bl	8001d2c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8001d66:	2100      	movs	r1, #0
 8001d68:	2010      	movs	r0, #16
 8001d6a:	f7ff ffb5 	bl	8001cd8 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d6e:	2010      	movs	r0, #16
 8001d70:	f7ff ff98 	bl	8001ca4 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	2011      	movs	r0, #17
 8001d78:	f7ff ffae 	bl	8001cd8 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d7c:	2011      	movs	r0, #17
 8001d7e:	f7ff ff91 	bl	8001ca4 <NVIC_EnableIRQ>

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <LL_AHB1_GRP1_EnableClock>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	4907      	ldr	r1, [pc, #28]	; (8001db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40021000 	.word	0x40021000

08001db8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001dee:	f7ff ffcb 	bl	8001d88 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001df2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001df6:	f7ff ffc7 	bl	8001d88 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	480a      	ldr	r0, [pc, #40]	; (8001e28 <MX_GPIO_Init+0x54>)
 8001dfe:	f7ff ffdb 	bl	8001db8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001e02:	2308      	movs	r3, #8
 8001e04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e06:	2301      	movs	r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	463b      	mov	r3, r7
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_GPIO_Init+0x54>)
 8001e1c:	f7fe ffcf 	bl	8000dbe <LL_GPIO_Init>

}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	48000400 	.word	0x48000400

08001e2c <NVIC_SetPriorityGrouping>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <LL_RCC_HSI_Enable>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <LL_RCC_HSI_Enable+0x1c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <LL_RCC_HSI_Enable+0x1c>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <LL_RCC_HSI_IsReady>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <LL_RCC_HSI_IsReady+0x20>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <LL_RCC_SetSysClkSource>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <LL_RCC_SetSysClkSource+0x24>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 0203 	bic.w	r2, r3, #3
 8001ef4:	4904      	ldr	r1, [pc, #16]	; (8001f08 <LL_RCC_SetSysClkSource+0x24>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000

08001f0c <LL_RCC_GetSysClkSource>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <LL_RCC_GetSysClkSource+0x18>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000

08001f28 <LL_RCC_SetAHBPrescaler>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	4904      	ldr	r1, [pc, #16]	; (8001f4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000

08001f50 <LL_RCC_SetAPB1Prescaler>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f60:	4904      	ldr	r1, [pc, #16]	; (8001f74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000

08001f78 <LL_RCC_SetAPB2Prescaler>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f88:	4904      	ldr	r1, [pc, #16]	; (8001f9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000

08002000 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <LL_FLASH_SetLatency+0x24>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <LL_FLASH_SetLatency+0x24>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40022000 	.word	0x40022000

08002028 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <LL_FLASH_GetLatency+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000

08002044 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d106      	bne.n	8002060 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800205e:	e005      	b.n	800206c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e010 	.word	0xe000e010

0800207c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff ffa5 	bl	8001fd0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002086:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800208a:	f7ff ff89 	bl	8001fa0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208e:	2003      	movs	r0, #3
 8002090:	f7ff fecc 	bl	8001e2c <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002094:	f000 f812 	bl	80020bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002098:	f7ff fe9c 	bl	8001dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 800209c:	f7ff fe5e 	bl	8001d5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020a0:	f001 fa2a 	bl	80034f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80020a4:	f000 fe44 	bl	8002d30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Space for your local variables, callback registration ...*/

  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <main+0x3c>)
 80020aa:	f001 fa13 	bl	80034d4 <USART2_RegisterCallback>
  while (1)
  {
    /* USER CODE END WHILE */
 	  	  //type your code here:

	  LL_mDelay(1000);
 80020ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b2:	f7ff fdc1 	bl	8001c38 <LL_mDelay>
 80020b6:	e7fa      	b.n	80020ae <main+0x32>
 80020b8:	08002129 	.word	0x08002129

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7ff ff9d 	bl	8002000 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80020c6:	f7ff ffaf 	bl	8002028 <LL_FLASH_GetLatency>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0x18>
  {
  Error_Handler();
 80020d0:	f000 f9b1 	bl	8002436 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80020d4:	f7ff fece 	bl	8001e74 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80020d8:	bf00      	nop
 80020da:	f7ff fedb 	bl	8001e94 <LL_RCC_HSI_IsReady>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d1fa      	bne.n	80020da <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80020e4:	2010      	movs	r0, #16
 80020e6:	f7ff fee7 	bl	8001eb8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff ff1c 	bl	8001f28 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff ff2d 	bl	8001f50 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff ff3e 	bl	8001f78 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fef1 	bl	8001ee4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002102:	bf00      	nop
 8002104:	f7ff ff02 	bl	8001f0c <LL_RCC_GetSysClkSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1fa      	bne.n	8002104 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <SystemClock_Config+0x68>)
 8002110:	f7ff fd84 	bl	8001c1c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002114:	2004      	movs	r0, #4
 8002116:	f7ff ff95 	bl	8002044 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 800211a:	4802      	ldr	r0, [pc, #8]	; (8002124 <SystemClock_Config+0x68>)
 800211c:	f7ff fdb2 	bl	8001c84 <LL_SetSystemCoreClock>
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	007a1200 	.word	0x007a1200

08002128 <proccesDmaData>:

/* USER CODE BEGIN 4 */
/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(uint8_t element) {
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b0bc      	sub	sp, #240	; 0xf0
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
	static uint8_t dollar; static uint8_t index; static char dmaDATA[36];

	dmaDATA[index] = element;
 8002132:	4bae      	ldr	r3, [pc, #696]	; (80023ec <proccesDmaData+0x2c4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4aad      	ldr	r2, [pc, #692]	; (80023f0 <proccesDmaData+0x2c8>)
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	5453      	strb	r3, [r2, r1]
	index++;
 800213e:	4bab      	ldr	r3, [pc, #684]	; (80023ec <proccesDmaData+0x2c4>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4ba9      	ldr	r3, [pc, #676]	; (80023ec <proccesDmaData+0x2c4>)
 8002148:	701a      	strb	r2, [r3, #0]
	if (index == 36) {
 800214a:	4ba8      	ldr	r3, [pc, #672]	; (80023ec <proccesDmaData+0x2c4>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b24      	cmp	r3, #36	; 0x24
 8002150:	d105      	bne.n	800215e <proccesDmaData+0x36>
		dollar = 0;
 8002152:	4ba8      	ldr	r3, [pc, #672]	; (80023f4 <proccesDmaData+0x2cc>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
		index = 0;
 8002158:	4ba4      	ldr	r3, [pc, #656]	; (80023ec <proccesDmaData+0x2c4>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
	}
	if (element == '$') {
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b24      	cmp	r3, #36	; 0x24
 8002162:	d106      	bne.n	8002172 <proccesDmaData+0x4a>
		dollar++;
 8002164:	4ba3      	ldr	r3, [pc, #652]	; (80023f4 <proccesDmaData+0x2cc>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4ba1      	ldr	r3, [pc, #644]	; (80023f4 <proccesDmaData+0x2cc>)
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e004      	b.n	800217c <proccesDmaData+0x54>
	}else if (dollar == 0) {
 8002172:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <proccesDmaData+0x2cc>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8134 	beq.w	80023e4 <proccesDmaData+0x2bc>
			return;
		}


	if ((element == '$') && (dollar == 2)) {
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b24      	cmp	r3, #36	; 0x24
 8002180:	f040 8131 	bne.w	80023e6 <proccesDmaData+0x2be>
 8002184:	4b9b      	ldr	r3, [pc, #620]	; (80023f4 <proccesDmaData+0x2cc>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b02      	cmp	r3, #2
 800218a:	f040 812c 	bne.w	80023e6 <proccesDmaData+0x2be>
 800218e:	466b      	mov	r3, sp
 8002190:	461d      	mov	r5, r3
		uint8_t length=index;
 8002192:	4b96      	ldr	r3, [pc, #600]	; (80023ec <proccesDmaData+0x2c4>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
		int state=0;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		char *data=dmaDATA;
 80021a0:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <proccesDmaData+0x2c8>)
 80021a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		char fillis[length-1];
 80021a6:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80021aa:	1e5c      	subs	r4, r3, #1
 80021ac:	1e63      	subs	r3, r4, #1
 80021ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80021b2:	4623      	mov	r3, r4
 80021b4:	4618      	mov	r0, r3
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	00cb      	lsls	r3, r1, #3
 80021c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80021c8:	00c2      	lsls	r2, r0, #3
 80021ca:	4623      	mov	r3, r4
 80021cc:	4618      	mov	r0, r3
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	00cb      	lsls	r3, r1, #3
 80021dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80021e0:	00c2      	lsls	r2, r0, #3
 80021e2:	4623      	mov	r3, r4
 80021e4:	3307      	adds	r3, #7
 80021e6:	08db      	lsrs	r3, r3, #3
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	ebad 0d03 	sub.w	sp, sp, r3
 80021ee:	466b      	mov	r3, sp
 80021f0:	3300      	adds	r3, #0
 80021f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		char automatic[] = "auto";
 80021f6:	4a80      	ldr	r2, [pc, #512]	; (80023f8 <proccesDmaData+0x2d0>)
 80021f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002200:	6018      	str	r0, [r3, #0]
 8002202:	3304      	adds	r3, #4
 8002204:	7019      	strb	r1, [r3, #0]
		char manual[] = "manual";
 8002206:	4a7d      	ldr	r2, [pc, #500]	; (80023fc <proccesDmaData+0x2d4>)
 8002208:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800220c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002210:	6018      	str	r0, [r3, #0]
 8002212:	3304      	adds	r3, #4
 8002214:	8019      	strh	r1, [r3, #0]
 8002216:	3302      	adds	r3, #2
 8002218:	0c0a      	lsrs	r2, r1, #16
 800221a:	701a      	strb	r2, [r3, #0]
		char PWd[] = "PWM";
 800221c:	4b78      	ldr	r3, [pc, #480]	; (8002400 <proccesDmaData+0x2d8>)
 800221e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		char stringPWM[]="NNN";
 8002222:	4b78      	ldr	r3, [pc, #480]	; (8002404 <proccesDmaData+0x2dc>)
 8002224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		int i = 1;
 8002228:	2301      	movs	r3, #1
 800222a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		uint8_t dimension;// = sprintf((char*) fillis,"State = auto with variable intenzity 0-%d\n\r",99);


		while(i < length-1){
 800222e:	e017      	b.n	8002260 <proccesDmaData+0x138>
			i++;
 8002230:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002234:	3301      	adds	r3, #1
 8002236:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			fillis[i-1] = data[i];
 800223a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800223e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002242:	441a      	add	r2, r3
 8002244:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002248:	3b01      	subs	r3, #1
 800224a:	7811      	ldrb	r1, [r2, #0]
 800224c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002250:	54d1      	strb	r1, [r2, r3]
			fillis[length-2] = 0;
 8002252:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8002256:	3b02      	subs	r3, #2
 8002258:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800225c:	2100      	movs	r1, #0
 800225e:	54d1      	strb	r1, [r2, r3]
		while(i < length-1){
 8002260:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8002264:	3b01      	subs	r3, #1
 8002266:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800226a:	429a      	cmp	r2, r3
 800226c:	dbe0      	blt.n	8002230 <proccesDmaData+0x108>
		}
		i = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		while(i < length-3){
 8002274:	e014      	b.n	80022a0 <proccesDmaData+0x178>
			i++;
 8002276:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800227a:	3301      	adds	r3, #1
 800227c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			stringPWM[i] = fillis[i];
 8002280:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002284:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002288:	4413      	add	r3, r2
 800228a:	7819      	ldrb	r1, [r3, #0]
 800228c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002290:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002294:	4413      	add	r3, r2
 8002296:	460a      	mov	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
			stringPWM[3] = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		while(i < length-3){
 80022a0:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80022a4:	3b03      	subs	r3, #3
 80022a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbe3      	blt.n	8002276 <proccesDmaData+0x14e>
		}


		state=(!strcmp(fillis, manual))*1;
 80022ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022b2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fd ff89 	bl	80001d0 <strcmp>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		state=state+(!strcmp(fillis, automatic))*2;
 80022ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022d2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fd ff79 	bl	80001d0 <strcmp>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <proccesDmaData+0x1c0>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e000      	b.n	80022ea <proccesDmaData+0x1c2>
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80022ee:	4413      	add	r3, r2
 80022f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		state=state+(!strcmp(stringPWM, PWd))*3;
 80022f4:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80022f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fd ff66 	bl	80001d0 <strcmp>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <proccesDmaData+0x1e6>
 800230a:	2303      	movs	r3, #3
 800230c:	e000      	b.n	8002310 <proccesDmaData+0x1e8>
 800230e:	2300      	movs	r3, #0
 8002310:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002314:	4413      	add	r3, r2
 8002316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		switch(state){
 800231a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231e:	2b03      	cmp	r3, #3
 8002320:	d017      	beq.n	8002352 <proccesDmaData+0x22a>
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002326:	2b03      	cmp	r3, #3
 8002328:	dc25      	bgt.n	8002376 <proccesDmaData+0x24e>
 800232a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800232e:	2b01      	cmp	r3, #1
 8002330:	d004      	beq.n	800233c <proccesDmaData+0x214>
 8002332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002336:	2b02      	cmp	r3, #2
 8002338:	d007      	beq.n	800234a <proccesDmaData+0x222>
				break;
			case 3:
				PWM_intenz_vanted = (fillis[3]-48) * 10+(fillis[4]-48);
				break;
			default:
				break;
 800233a:	e01c      	b.n	8002376 <proccesDmaData+0x24e>
				mode = 1;
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <proccesDmaData+0x2e0>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]
				PWM_intenz_vanted = 99;
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <proccesDmaData+0x2e4>)
 8002344:	2263      	movs	r2, #99	; 0x63
 8002346:	601a      	str	r2, [r3, #0]
				break;
 8002348:	e016      	b.n	8002378 <proccesDmaData+0x250>
				mode = 0;
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <proccesDmaData+0x2e0>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
				break;
 8002350:	e012      	b.n	8002378 <proccesDmaData+0x250>
				PWM_intenz_vanted = (fillis[3]-48) * 10+(fillis[4]-48);
 8002352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002356:	78db      	ldrb	r3, [r3, #3]
 8002358:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	461a      	mov	r2, r3
 8002366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800236a:	791b      	ldrb	r3, [r3, #4]
 800236c:	3b30      	subs	r3, #48	; 0x30
 800236e:	4413      	add	r3, r2
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <proccesDmaData+0x2e4>)
 8002372:	6013      	str	r3, [r2, #0]
				break;
 8002374:	e000      	b.n	8002378 <proccesDmaData+0x250>
				break;
 8002376:	bf00      	nop
		}

		switch(mode){
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <proccesDmaData+0x2e0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <proccesDmaData+0x25e>
 8002380:	2b01      	cmp	r3, #1
 8002382:	d013      	beq.n	80023ac <proccesDmaData+0x284>
			case 1: ;
				dimension = sprintf((char*) fillis,"State = manual and intenzity = %d\n\r",PWM_intenz_vanted);
				USART2_PutBuffer(fillis, dimension);
				break;
			default:
				break;
 8002384:	e026      	b.n	80023d4 <proccesDmaData+0x2ac>
				dimension = sprintf((char*) fillis,"State = auto with variable intenzity 0-%d\n\r",99);
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	2263      	movs	r2, #99	; 0x63
 800238c:	4920      	ldr	r1, [pc, #128]	; (8002410 <proccesDmaData+0x2e8>)
 800238e:	4618      	mov	r0, r3
 8002390:	f001 febc 	bl	800410c <siprintf>
 8002394:	4603      	mov	r3, r0
 8002396:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
				USART2_PutBuffer(fillis, dimension);
 800239a:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 f98d 	bl	80036c4 <USART2_PutBuffer>
				break;
 80023aa:	e013      	b.n	80023d4 <proccesDmaData+0x2ac>
				dimension = sprintf((char*) fillis,"State = manual and intenzity = %d\n\r",PWM_intenz_vanted);
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <proccesDmaData+0x2e4>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4917      	ldr	r1, [pc, #92]	; (8002414 <proccesDmaData+0x2ec>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 fea8 	bl	800410c <siprintf>
 80023bc:	4603      	mov	r3, r0
 80023be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
				USART2_PutBuffer(fillis, dimension);
 80023c2:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 f979 	bl	80036c4 <USART2_PutBuffer>
				break;
 80023d2:	bf00      	nop
		}
		dollar = 0;
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <proccesDmaData+0x2cc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
		index = 0;
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <proccesDmaData+0x2c4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	46ad      	mov	sp, r5
 80023e2:	e000      	b.n	80023e6 <proccesDmaData+0x2be>
			return;
 80023e4:	bf00      	nop
	}
	}
 80023e6:	37f0      	adds	r7, #240	; 0xf0
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bdb0      	pop	{r4, r5, r7, pc}
 80023ec:	20000200 	.word	0x20000200
 80023f0:	20000204 	.word	0x20000204
 80023f4:	20000228 	.word	0x20000228
 80023f8:	080065d0 	.word	0x080065d0
 80023fc:	080065d8 	.word	0x080065d8
 8002400:	004d5750 	.word	0x004d5750
 8002404:	004e4e4e 	.word	0x004e4e4e
 8002408:	200001f4 	.word	0x200001f4
 800240c:	200001fc 	.word	0x200001fc
 8002410:	08006580 	.word	0x08006580
 8002414:	080065ac 	.word	0x080065ac

08002418 <setDutyCycle>:


void setDutyCycle(uint8_t D){
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
    TIM2->CCR1 = D;
 8002422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	6353      	str	r3, [r2, #52]	; 0x34
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <LL_DMA_DisableChannel+0x3c>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	3a01      	subs	r2, #1
 8002462:	4907      	ldr	r1, [pc, #28]	; (8002480 <LL_DMA_DisableChannel+0x3c>)
 8002464:	5c8a      	ldrb	r2, [r1, r2]
 8002466:	4611      	mov	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	440a      	add	r2, r1
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	080065e0 	.word	0x080065e0

08002484 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800250a:	605a      	str	r2, [r3, #4]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002526:	605a      	str	r2, [r3, #4]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002542:	605a      	str	r2, [r3, #4]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_TIM_ClearFlag_UPDATE>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f06f 0201 	mvn.w	r2, #1
 800255e:	611a      	str	r2, [r3, #16]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2210      	movs	r2, #16
 80025ea:	621a      	str	r2, [r3, #32]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 800265c:	480c      	ldr	r0, [pc, #48]	; (8002690 <DMA1_Channel6_IRQHandler+0x38>)
 800265e:	f7ff ff11 	bl	8002484 <LL_DMA_IsActiveFlag_TC6>
 8002662:	4603      	mov	r3, r0
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8002668:	f001 f84c 	bl	8003704 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <DMA1_Channel6_IRQHandler+0x38>)
 800266e:	f7ff ff45 	bl	80024fc <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8002672:	e00a      	b.n	800268a <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8002674:	4806      	ldr	r0, [pc, #24]	; (8002690 <DMA1_Channel6_IRQHandler+0x38>)
 8002676:	f7ff ff2d 	bl	80024d4 <LL_DMA_IsActiveFlag_HT6>
 800267a:	4603      	mov	r3, r0
 800267c:	2b01      	cmp	r3, #1
 800267e:	d104      	bne.n	800268a <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8002680:	f001 f840 	bl	8003704 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <DMA1_Channel6_IRQHandler+0x38>)
 8002686:	f7ff ff55 	bl	8002534 <LL_DMA_ClearFlag_HT6>
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020000 	.word	0x40020000

08002694 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8002698:	480a      	ldr	r0, [pc, #40]	; (80026c4 <DMA1_Channel7_IRQHandler+0x30>)
 800269a:	f7ff ff07 	bl	80024ac <LL_DMA_IsActiveFlag_TC7>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10d      	bne.n	80026c0 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <DMA1_Channel7_IRQHandler+0x30>)
 80026a6:	f7ff ff37 	bl	8002518 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80026aa:	bf00      	nop
 80026ac:	4806      	ldr	r0, [pc, #24]	; (80026c8 <DMA1_Channel7_IRQHandler+0x34>)
 80026ae:	f7ff ff83 	bl	80025b8 <LL_USART_IsActiveFlag_TC>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f9      	beq.n	80026ac <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80026b8:	2107      	movs	r1, #7
 80026ba:	4802      	ldr	r0, [pc, #8]	; (80026c4 <DMA1_Channel7_IRQHandler+0x30>)
 80026bc:	f7ff fec2 	bl	8002444 <LL_DMA_DisableChannel>
	}
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40004400 	.word	0x40004400

080026cc <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80026d0:	4806      	ldr	r0, [pc, #24]	; (80026ec <USART2_IRQHandler+0x20>)
 80026d2:	f7ff ff5e 	bl	8002592 <LL_USART_IsActiveFlag_IDLE>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80026dc:	f001 f812 	bl	8003704 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <USART2_IRQHandler+0x20>)
 80026e2:	f7ff ff7c 	bl	80025de <LL_USART_ClearFlag_IDLE>
	}
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40004400 	.word	0x40004400

080026f0 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM2_IRQHandler(void)
 {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 80026f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026f8:	f7ff ff38 	bl	800256c <LL_TIM_IsActiveFlag_UPDATE>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d036      	beq.n	8002770 <TIM2_IRQHandler+0x80>
		switch(mode){
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <TIM2_IRQHandler+0x8c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <TIM2_IRQHandler+0x20>
 800270a:	2b01      	cmp	r3, #1
 800270c:	d025      	beq.n	800275a <TIM2_IRQHandler+0x6a>
			break;
		case 1:
			PWM_intenz=PWM_intenz_vanted;
			break;
		default:
			break;
 800270e:	e02a      	b.n	8002766 <TIM2_IRQHandler+0x76>
			if (PWM_intenz>99){
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <TIM2_IRQHandler+0x90>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b63      	cmp	r3, #99	; 0x63
 8002716:	dd02      	ble.n	800271e <TIM2_IRQHandler+0x2e>
				PWM_intenz=0;
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <TIM2_IRQHandler+0x90>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
			if (direction) {
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <TIM2_IRQHandler+0x94>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <TIM2_IRQHandler+0x50>
				PWM_intenz += 1;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <TIM2_IRQHandler+0x90>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <TIM2_IRQHandler+0x90>)
 800272e:	6013      	str	r3, [r2, #0]
				if (PWM_intenz == 99) {
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <TIM2_IRQHandler+0x90>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b63      	cmp	r3, #99	; 0x63
 8002736:	d115      	bne.n	8002764 <TIM2_IRQHandler+0x74>
					direction = 0;
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <TIM2_IRQHandler+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
			break;
 800273e:	e011      	b.n	8002764 <TIM2_IRQHandler+0x74>
				PWM_intenz -= 1;
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <TIM2_IRQHandler+0x90>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3b01      	subs	r3, #1
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <TIM2_IRQHandler+0x90>)
 8002748:	6013      	str	r3, [r2, #0]
				if (PWM_intenz == 0) {
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <TIM2_IRQHandler+0x90>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <TIM2_IRQHandler+0x74>
					direction = 1;
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <TIM2_IRQHandler+0x94>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
			break;
 8002758:	e004      	b.n	8002764 <TIM2_IRQHandler+0x74>
			PWM_intenz=PWM_intenz_vanted;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <TIM2_IRQHandler+0x98>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <TIM2_IRQHandler+0x90>)
 8002760:	6013      	str	r3, [r2, #0]
			break;
 8002762:	e000      	b.n	8002766 <TIM2_IRQHandler+0x76>
			break;
 8002764:	bf00      	nop
		}

		setDutyCycle(PWM_intenz);
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <TIM2_IRQHandler+0x90>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fe54 	bl	8002418 <setDutyCycle>
	}
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002770:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002774:	f7ff feec 	bl	8002550 <LL_TIM_ClearFlag_UPDATE>
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200001f4 	.word	0x200001f4
 8002780:	200001f8 	.word	0x200001f8
 8002784:	20000000 	.word	0x20000000
 8002788:	200001fc 	.word	0x200001fc

0800278c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
	return 1;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_kill>:

int _kill(int pid, int sig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027a6:	f001 f815 	bl	80037d4 <__errno>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2216      	movs	r2, #22
 80027ae:	601a      	str	r2, [r3, #0]
	return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_exit>:

void _exit (int status)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ffe7 	bl	800279c <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ce:	e7fe      	b.n	80027ce <_exit+0x12>

080027d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e00a      	b.n	80027f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027e2:	f3af 8000 	nop.w
 80027e6:	4601      	mov	r1, r0
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	60ba      	str	r2, [r7, #8]
 80027ee:	b2ca      	uxtb	r2, r1
 80027f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dbf0      	blt.n	80027e2 <_read+0x12>
	}

return len;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e009      	b.n	8002830 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	60ba      	str	r2, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3301      	adds	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	dbf1      	blt.n	800281c <_write+0x12>
	}
	return len;
 8002838:	687b      	ldr	r3, [r7, #4]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_close>:

int _close(int file)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	return -1;
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286a:	605a      	str	r2, [r3, #4]
	return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_isatty>:

int _isatty(int file)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
	return 1;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
	return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <_sbrk+0x50>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <_sbrk+0x16>
		heap_end = &end;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <_sbrk+0x50>)
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <_sbrk+0x54>)
 80028c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <_sbrk+0x50>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <_sbrk+0x50>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	466a      	mov	r2, sp
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d907      	bls.n	80028e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80028d6:	f000 ff7d 	bl	80037d4 <__errno>
 80028da:	4603      	mov	r3, r0
 80028dc:	220c      	movs	r2, #12
 80028de:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	e006      	b.n	80028f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <_sbrk+0x50>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	4a03      	ldr	r2, [pc, #12]	; (80028fc <_sbrk+0x50>)
 80028f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80028f2:	68fb      	ldr	r3, [r7, #12]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	2000022c 	.word	0x2000022c
 8002900:	20000350 	.word	0x20000350

08002904 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <SystemInit+0x84>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <SystemInit+0x84>)
 8002910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <SystemInit+0x88>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <SystemInit+0x88>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <SystemInit+0x88>)
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	4918      	ldr	r1, [pc, #96]	; (800298c <SystemInit+0x88>)
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <SystemInit+0x8c>)
 800292c:	4013      	ands	r3, r2
 800292e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <SystemInit+0x88>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <SystemInit+0x88>)
 8002936:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <SystemInit+0x88>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <SystemInit+0x88>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <SystemInit+0x88>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a0e      	ldr	r2, [pc, #56]	; (800298c <SystemInit+0x88>)
 8002952:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002956:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <SystemInit+0x88>)
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	4a0b      	ldr	r2, [pc, #44]	; (800298c <SystemInit+0x88>)
 800295e:	f023 030f 	bic.w	r3, r3, #15
 8002962:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <SystemInit+0x88>)
 8002966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002968:	4908      	ldr	r1, [pc, #32]	; (800298c <SystemInit+0x88>)
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <SystemInit+0x90>)
 800296c:	4013      	ands	r3, r2
 800296e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <SystemInit+0x88>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SystemInit+0x84>)
 8002978:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297c:	609a      	str	r2, [r3, #8]
#endif
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00
 800298c:	40021000 	.word	0x40021000
 8002990:	f87fc00c 	.word	0xf87fc00c
 8002994:	ff00fccc 	.word	0xff00fccc

08002998 <NVIC_GetPriorityGrouping>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EnableIRQ>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <NVIC_EnableIRQ+0x30>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <NVIC_SetPriority>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da0b      	bge.n	8002a14 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <NVIC_SetPriority+0x4c>)
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	3b04      	subs	r3, #4
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	761a      	strb	r2, [r3, #24]
}
 8002a12:	e009      	b.n	8002a28 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <NVIC_SetPriority+0x50>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <LL_AHB1_GRP1_EnableClock>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <LL_APB1_GRP1_EnableClock>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	4907      	ldr	r1, [pc, #28]	; (8002b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40021000 	.word	0x40021000

08002b04 <LL_TIM_EnableCounter>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_TIM_DisableARRPreload>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_TIM_CC_EnableChannel>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <LL_TIM_OC_DisableFast>:
{
 8002b68:	b4b0      	push	{r4, r5, r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d028      	beq.n	8002bca <LL_TIM_OC_DisableFast+0x62>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d023      	beq.n	8002bc6 <LL_TIM_OC_DisableFast+0x5e>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d01e      	beq.n	8002bc2 <LL_TIM_OC_DisableFast+0x5a>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d019      	beq.n	8002bbe <LL_TIM_OC_DisableFast+0x56>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b90:	d013      	beq.n	8002bba <LL_TIM_OC_DisableFast+0x52>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d00d      	beq.n	8002bb6 <LL_TIM_OC_DisableFast+0x4e>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba0:	d007      	beq.n	8002bb2 <LL_TIM_OC_DisableFast+0x4a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d101      	bne.n	8002bae <LL_TIM_OC_DisableFast+0x46>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e00e      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bae:	2308      	movs	r3, #8
 8002bb0:	e00c      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00a      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_TIM_OC_DisableFast+0x64>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3318      	adds	r3, #24
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <LL_TIM_OC_DisableFast+0x94>)
 8002bd8:	5c5b      	ldrb	r3, [r3, r1]
 8002bda:	4413      	add	r3, r2
 8002bdc:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002bde:	6822      	ldr	r2, [r4, #0]
 8002be0:	4629      	mov	r1, r5
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <LL_TIM_OC_DisableFast+0x98>)
 8002be4:	5c5b      	ldrb	r3, [r3, r1]
 8002be6:	4619      	mov	r1, r3
 8002be8:	2304      	movs	r3, #4
 8002bea:	408b      	lsls	r3, r1
 8002bec:	43db      	mvns	r3, r3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	6023      	str	r3, [r4, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bcb0      	pop	{r4, r5, r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	08006600 	.word	0x08006600
 8002c00:	0800660c 	.word	0x0800660c

08002c04 <LL_TIM_OC_EnablePreload>:
{
 8002c04:	b4b0      	push	{r4, r5, r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d028      	beq.n	8002c66 <LL_TIM_OC_EnablePreload+0x62>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d023      	beq.n	8002c62 <LL_TIM_OC_EnablePreload+0x5e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d01e      	beq.n	8002c5e <LL_TIM_OC_EnablePreload+0x5a>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b40      	cmp	r3, #64	; 0x40
 8002c24:	d019      	beq.n	8002c5a <LL_TIM_OC_EnablePreload+0x56>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2c:	d013      	beq.n	8002c56 <LL_TIM_OC_EnablePreload+0x52>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c34:	d00d      	beq.n	8002c52 <LL_TIM_OC_EnablePreload+0x4e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3c:	d007      	beq.n	8002c4e <LL_TIM_OC_EnablePreload+0x4a>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d101      	bne.n	8002c4a <LL_TIM_OC_EnablePreload+0x46>
 8002c46:	2307      	movs	r3, #7
 8002c48:	e00e      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	e00c      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c4e:	2306      	movs	r3, #6
 8002c50:	e00a      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c52:	2305      	movs	r3, #5
 8002c54:	e008      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c56:	2304      	movs	r3, #4
 8002c58:	e006      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e004      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e002      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <LL_TIM_OC_EnablePreload+0x64>
 8002c66:	2300      	movs	r3, #0
 8002c68:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4629      	mov	r1, r5
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <LL_TIM_OC_EnablePreload+0x94>)
 8002c74:	5c5b      	ldrb	r3, [r3, r1]
 8002c76:	4413      	add	r3, r2
 8002c78:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002c7a:	6822      	ldr	r2, [r4, #0]
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <LL_TIM_OC_EnablePreload+0x98>)
 8002c80:	5c5b      	ldrb	r3, [r3, r1]
 8002c82:	4619      	mov	r1, r3
 8002c84:	2308      	movs	r3, #8
 8002c86:	408b      	lsls	r3, r1
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	6023      	str	r3, [r4, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bcb0      	pop	{r4, r5, r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	08006600 	.word	0x08006600
 8002c9c:	0800660c 	.word	0x0800660c

08002ca0 <LL_TIM_SetClockSource>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002cb2:	f023 0307 	bic.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_TIM_SetTriggerOutput>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	605a      	str	r2, [r3, #4]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_TIM_DisableMasterSlaveMode>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_TIM_EnableIT_UPDATE>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	; 0x50
 8002d34:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fd6a 	bl	8003828 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	611a      	str	r2, [r3, #16]
 8002d62:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7ff feb5 	bl	8002ad4 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d6a:	f7ff fe15 	bl	8002998 <NVIC_GetPriorityGrouping>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fe61 	bl	8002a3c <NVIC_EncodePriority>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	201c      	movs	r0, #28
 8002d80:	f7ff fe32 	bl	80029e8 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002d84:	201c      	movs	r0, #28
 8002d86:	f7ff fe15 	bl	80029b4 <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 799;
 8002d8a:	f240 331f 	movw	r3, #799	; 0x31f
 8002d8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d90:	2300      	movs	r3, #0
 8002d92:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8002d94:	2363      	movs	r3, #99	; 0x63
 8002d96:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002d9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002da6:	f7fe fabb 	bl	8001320 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002daa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dae:	f7ff feb9 	bl	8002b24 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002db2:	2100      	movs	r1, #0
 8002db4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002db8:	f7ff ff72 	bl	8002ca0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dc2:	f7ff ff1f 	bl	8002c04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002dc6:	2360      	movs	r3, #96	; 0x60
 8002dc8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	461a      	mov	r2, r3
 8002de0:	2101      	movs	r1, #1
 8002de2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002de6:	f7fe fb0f 	bl	8001408 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002dea:	2101      	movs	r1, #1
 8002dec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002df0:	f7ff feba 	bl	8002b68 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	461a      	mov	r2, r3
 8002e06:	2110      	movs	r1, #16
 8002e08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e0c:	f7fe fafc 	bl	8001408 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002e10:	2110      	movs	r1, #16
 8002e12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e16:	f7ff fea7 	bl	8002b68 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e20:	f7ff ff53 	bl	8002cca <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002e24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e28:	f7ff ff62 	bl	8002cf0 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e30:	f7ff fe38 	bl	8002aa4 <LL_AHB1_GRP1_EnableClock>
  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
 8002e34:	2101      	movs	r1, #1
 8002e36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e3a:	f7ff fe83 	bl	8002b44 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableIT_UPDATE(TIM2);
 8002e3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e42:	f7ff ff65 	bl	8002d10 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002e46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e4a:	f7ff fe5b 	bl	8002b04 <LL_TIM_EnableCounter>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e52:	2302      	movs	r3, #2
 8002e54:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6e:	f7fd ffa6 	bl	8000dbe <LL_GPIO_Init>
}
 8002e72:	bf00      	nop
 8002e74:	3750      	adds	r7, #80	; 0x50
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <NVIC_EnableIRQ>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <NVIC_EnableIRQ+0x30>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <NVIC_SetPriority>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da0b      	bge.n	8002edc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <NVIC_SetPriority+0x4c>)
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	3b04      	subs	r3, #4
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	761a      	strb	r2, [r3, #24]
}
 8002eda:	e009      	b.n	8002ef0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <NVIC_SetPriority+0x50>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <LL_DMA_EnableChannel>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <LL_DMA_EnableChannel+0x3c>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	3a01      	subs	r2, #1
 8002f22:	4907      	ldr	r1, [pc, #28]	; (8002f40 <LL_DMA_EnableChannel+0x3c>)
 8002f24:	5c8a      	ldrb	r2, [r1, r2]
 8002f26:	4611      	mov	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	08006618 	.word	0x08006618

08002f44 <LL_DMA_SetDataTransferDirection>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <LL_DMA_SetDataTransferDirection+0x48>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f64:	f023 0310 	bic.w	r3, r3, #16
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	3a01      	subs	r2, #1
 8002f6c:	4907      	ldr	r1, [pc, #28]	; (8002f8c <LL_DMA_SetDataTransferDirection+0x48>)
 8002f6e:	5c8a      	ldrb	r2, [r1, r2]
 8002f70:	4611      	mov	r1, r2
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	440a      	add	r2, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	08006618 	.word	0x08006618

08002f90 <LL_DMA_GetDataTransferDirection>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <LL_DMA_GetDataTransferDirection+0x2c>)
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f244 0310 	movw	r3, #16400	; 0x4010
 8002fae:	4013      	ands	r3, r2
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	08006618 	.word	0x08006618

08002fc0 <LL_DMA_SetMode>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <LL_DMA_SetMode+0x44>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 0220 	bic.w	r2, r3, #32
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4907      	ldr	r1, [pc, #28]	; (8003004 <LL_DMA_SetMode+0x44>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	440b      	add	r3, r1
 8002fee:	4619      	mov	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	08006618 	.word	0x08006618

08003008 <LL_DMA_SetPeriphIncMode>:
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	3b01      	subs	r3, #1
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <LL_DMA_SetPeriphIncMode+0x44>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	461a      	mov	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3b01      	subs	r3, #1
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <LL_DMA_SetPeriphIncMode+0x44>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	4619      	mov	r1, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	440b      	add	r3, r1
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	08006618 	.word	0x08006618

08003050 <LL_DMA_SetMemoryIncMode>:
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3b01      	subs	r3, #1
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <LL_DMA_SetMemoryIncMode+0x44>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	461a      	mov	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	3b01      	subs	r3, #1
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <LL_DMA_SetMemoryIncMode+0x44>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	4619      	mov	r1, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	440b      	add	r3, r1
 800307e:	4619      	mov	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	08006618 	.word	0x08006618

08003098 <LL_DMA_SetPeriphSize>:
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <LL_DMA_SetPeriphSize+0x44>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	4907      	ldr	r1, [pc, #28]	; (80030dc <LL_DMA_SetPeriphSize+0x44>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	4619      	mov	r1, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	440b      	add	r3, r1
 80030c6:	4619      	mov	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	08006618 	.word	0x08006618

080030e0 <LL_DMA_SetMemorySize>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <LL_DMA_SetMemorySize+0x44>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	4907      	ldr	r1, [pc, #28]	; (8003124 <LL_DMA_SetMemorySize+0x44>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	4619      	mov	r1, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	440b      	add	r3, r1
 800310e:	4619      	mov	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	08006618 	.word	0x08006618

08003128 <LL_DMA_SetChannelPriorityLevel>:
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	3b01      	subs	r3, #1
 8003138:	4a0c      	ldr	r2, [pc, #48]	; (800316c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	461a      	mov	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3b01      	subs	r3, #1
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	4619      	mov	r1, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	440b      	add	r3, r1
 8003156:	4619      	mov	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	08006618 	.word	0x08006618

08003170 <LL_DMA_SetDataLength>:
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	3b01      	subs	r3, #1
 8003180:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <LL_DMA_SetDataLength+0x44>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	461a      	mov	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	3a01      	subs	r2, #1
 8003194:	4907      	ldr	r1, [pc, #28]	; (80031b4 <LL_DMA_SetDataLength+0x44>)
 8003196:	5c8a      	ldrb	r2, [r1, r2]
 8003198:	4611      	mov	r1, r2
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	440a      	add	r2, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	08006618 	.word	0x08006618

080031b8 <LL_DMA_GetDataLength>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <LL_DMA_GetDataLength+0x28>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	b29b      	uxth	r3, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	08006618 	.word	0x08006618

080031e4 <LL_DMA_ConfigAddresses>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d114      	bne.n	8003222 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <LL_DMA_ConfigAddresses+0x74>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	461a      	mov	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	461a      	mov	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3b01      	subs	r3, #1
 8003210:	4a11      	ldr	r2, [pc, #68]	; (8003258 <LL_DMA_ConfigAddresses+0x74>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	461a      	mov	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	461a      	mov	r2, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6093      	str	r3, [r2, #8]
}
 8003220:	e013      	b.n	800324a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3b01      	subs	r3, #1
 8003226:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <LL_DMA_ConfigAddresses+0x74>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	461a      	mov	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3b01      	subs	r3, #1
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <LL_DMA_ConfigAddresses+0x74>)
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	461a      	mov	r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	60d3      	str	r3, [r2, #12]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	08006618 	.word	0x08006618

0800325c <LL_DMA_SetMemoryAddress>:
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	3b01      	subs	r3, #1
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <LL_DMA_SetMemoryAddress+0x2c>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	461a      	mov	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60d3      	str	r3, [r2, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	08006618 	.word	0x08006618

0800328c <LL_DMA_SetPeriphAddress>:
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3b01      	subs	r3, #1
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <LL_DMA_SetPeriphAddress+0x2c>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	461a      	mov	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6093      	str	r3, [r2, #8]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	08006618 	.word	0x08006618

080032bc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <LL_DMA_EnableIT_TC+0x3c>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	3a01      	subs	r2, #1
 80032da:	4907      	ldr	r1, [pc, #28]	; (80032f8 <LL_DMA_EnableIT_TC+0x3c>)
 80032dc:	5c8a      	ldrb	r2, [r1, r2]
 80032de:	4611      	mov	r1, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	440a      	add	r2, r1
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	6013      	str	r3, [r2, #0]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	08006618 	.word	0x08006618

080032fc <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <LL_DMA_EnableIT_HT+0x3c>)
 800330c:	5cd3      	ldrb	r3, [r2, r3]
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	3a01      	subs	r2, #1
 800331a:	4907      	ldr	r1, [pc, #28]	; (8003338 <LL_DMA_EnableIT_HT+0x3c>)
 800331c:	5c8a      	ldrb	r2, [r1, r2]
 800331e:	4611      	mov	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	440a      	add	r2, r1
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6013      	str	r3, [r2, #0]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	08006618 	.word	0x08006618

0800333c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3b01      	subs	r3, #1
 800334a:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <LL_DMA_EnableIT_TE+0x3c>)
 800334c:	5cd3      	ldrb	r3, [r2, r3]
 800334e:	461a      	mov	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	3a01      	subs	r2, #1
 800335a:	4907      	ldr	r1, [pc, #28]	; (8003378 <LL_DMA_EnableIT_TE+0x3c>)
 800335c:	5c8a      	ldrb	r2, [r1, r2]
 800335e:	4611      	mov	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	440a      	add	r2, r1
 8003364:	f043 0308 	orr.w	r3, r3, #8
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	08006618 	.word	0x08006618

0800337c <LL_AHB1_GRP1_EnableClock>:
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	4907      	ldr	r1, [pc, #28]	; (80033a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4313      	orrs	r3, r2
 800338e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4013      	ands	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40021000 	.word	0x40021000

080033ac <LL_APB1_GRP1_EnableClock>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033ca:	68fb      	ldr	r3, [r7, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40021000 	.word	0x40021000

080033dc <LL_USART_Enable>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_USART_ConfigAsyncMode>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f043 0210 	orr.w	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	601a      	str	r2, [r3, #0]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80034a8:	b490      	push	{r4, r7}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 80034b2:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3328      	adds	r3, #40	; 0x28
 80034be:	461c      	mov	r4, r3
 80034c0:	e002      	b.n	80034c8 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3324      	adds	r3, #36	; 0x24
 80034c6:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 80034c8:	4623      	mov	r3, r4
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc90      	pop	{r4, r7}
 80034d2:	4770      	bx	lr

080034d4 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a03      	ldr	r2, [pc, #12]	; (80034f4 <USART2_RegisterCallback+0x20>)
 80034e6:	6013      	str	r3, [r2, #0]
	}
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	20000230 	.word	0x20000230

080034f8 <MX_USART2_UART_Init>:

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b090      	sub	sp, #64	; 0x40
 80034fc:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80034fe:	f107 031c 	add.w	r3, r7, #28
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	611a      	str	r2, [r3, #16]
 800350e:	615a      	str	r2, [r3, #20]
 8003510:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
 8003520:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003522:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003526:	f7ff ff41 	bl	80033ac <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800352a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800352e:	f7ff ff25 	bl	800337c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8003532:	f248 0304 	movw	r3, #32772	; 0x8004
 8003536:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003538:	2302      	movs	r3, #2
 800353a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003548:	2307      	movs	r3, #7
 800354a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	4619      	mov	r1, r3
 8003550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003554:	f7fd fc33 	bl	8000dbe <LL_GPIO_Init>
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003558:	2200      	movs	r2, #0
 800355a:	2106      	movs	r1, #6
 800355c:	4856      	ldr	r0, [pc, #344]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 800355e:	f7ff fcf1 	bl	8002f44 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8003562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003566:	2106      	movs	r1, #6
 8003568:	4853      	ldr	r0, [pc, #332]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 800356a:	f7ff fddd 	bl	8003128 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 800356e:	2220      	movs	r2, #32
 8003570:	2106      	movs	r1, #6
 8003572:	4851      	ldr	r0, [pc, #324]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003574:	f7ff fd24 	bl	8002fc0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8003578:	2200      	movs	r2, #0
 800357a:	2106      	movs	r1, #6
 800357c:	484e      	ldr	r0, [pc, #312]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 800357e:	f7ff fd43 	bl	8003008 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	2106      	movs	r1, #6
 8003586:	484c      	ldr	r0, [pc, #304]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003588:	f7ff fd62 	bl	8003050 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800358c:	2200      	movs	r2, #0
 800358e:	2106      	movs	r1, #6
 8003590:	4849      	ldr	r0, [pc, #292]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003592:	f7ff fd81 	bl	8003098 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8003596:	2200      	movs	r2, #0
 8003598:	2106      	movs	r1, #6
 800359a:	4847      	ldr	r0, [pc, #284]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 800359c:	f7ff fda0 	bl	80030e0 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 80035a0:	2101      	movs	r1, #1
 80035a2:	4846      	ldr	r0, [pc, #280]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 80035a4:	f7ff ff80 	bl	80034a8 <LL_USART_DMA_GetRegAddr>
 80035a8:	4604      	mov	r4, r0
 80035aa:	4d45      	ldr	r5, [pc, #276]	; (80036c0 <MX_USART2_UART_Init+0x1c8>)
 80035ac:	2106      	movs	r1, #6
 80035ae:	4842      	ldr	r0, [pc, #264]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 80035b0:	f7ff fcee 	bl	8002f90 <LL_DMA_GetDataTransferDirection>
 80035b4:	4603      	mov	r3, r0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	462b      	mov	r3, r5
 80035ba:	4622      	mov	r2, r4
 80035bc:	2106      	movs	r1, #6
 80035be:	483e      	ldr	r0, [pc, #248]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 80035c0:	f7ff fe10 	bl	80031e4 <LL_DMA_ConfigAddresses>
  						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  							(uint32_t)bufferUSART2dma,
  							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80035c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035c8:	2106      	movs	r1, #6
 80035ca:	483b      	ldr	r0, [pc, #236]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 80035cc:	f7ff fdd0 	bl	8003170 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80035d0:	2106      	movs	r1, #6
 80035d2:	4839      	ldr	r0, [pc, #228]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 80035d4:	f7ff fc96 	bl	8002f04 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80035d8:	4838      	ldr	r0, [pc, #224]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 80035da:	f7ff ff45 	bl	8003468 <LL_USART_EnableDMAReq_RX>

  #if !POLLING
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80035de:	2106      	movs	r1, #6
 80035e0:	4835      	ldr	r0, [pc, #212]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 80035e2:	f7ff fe6b 	bl	80032bc <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80035e6:	2106      	movs	r1, #6
 80035e8:	4833      	ldr	r0, [pc, #204]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 80035ea:	f7ff fe87 	bl	80032fc <LL_DMA_EnableIT_HT>
  #endif


  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80035ee:	2210      	movs	r2, #16
 80035f0:	2107      	movs	r1, #7
 80035f2:	4831      	ldr	r0, [pc, #196]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 80035f4:	f7ff fca6 	bl	8002f44 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80035f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035fc:	2107      	movs	r1, #7
 80035fe:	482e      	ldr	r0, [pc, #184]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003600:	f7ff fd92 	bl	8003128 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8003604:	2200      	movs	r2, #0
 8003606:	2107      	movs	r1, #7
 8003608:	482b      	ldr	r0, [pc, #172]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 800360a:	f7ff fcd9 	bl	8002fc0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800360e:	2200      	movs	r2, #0
 8003610:	2107      	movs	r1, #7
 8003612:	4829      	ldr	r0, [pc, #164]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003614:	f7ff fcf8 	bl	8003008 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	2107      	movs	r1, #7
 800361c:	4826      	ldr	r0, [pc, #152]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 800361e:	f7ff fd17 	bl	8003050 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8003622:	2200      	movs	r2, #0
 8003624:	2107      	movs	r1, #7
 8003626:	4824      	ldr	r0, [pc, #144]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003628:	f7ff fd36 	bl	8003098 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800362c:	2200      	movs	r2, #0
 800362e:	2107      	movs	r1, #7
 8003630:	4821      	ldr	r0, [pc, #132]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003632:	f7ff fd55 	bl	80030e0 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8003636:	2100      	movs	r1, #0
 8003638:	4820      	ldr	r0, [pc, #128]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 800363a:	f7ff ff35 	bl	80034a8 <LL_USART_DMA_GetRegAddr>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	2107      	movs	r1, #7
 8003644:	481c      	ldr	r0, [pc, #112]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003646:	f7ff fe21 	bl	800328c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800364a:	481c      	ldr	r0, [pc, #112]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 800364c:	f7ff ff1c 	bl	8003488 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8003650:	2107      	movs	r1, #7
 8003652:	4819      	ldr	r0, [pc, #100]	; (80036b8 <MX_USART2_UART_Init+0x1c0>)
 8003654:	f7ff fe72 	bl	800333c <LL_DMA_EnableIT_TE>


  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8003658:	2100      	movs	r1, #0
 800365a:	2026      	movs	r0, #38	; 0x26
 800365c:	f7ff fc28 	bl	8002eb0 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003660:	2026      	movs	r0, #38	; 0x26
 8003662:	f7ff fc0b 	bl	8002e7c <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8003666:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800366a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003674:	2300      	movs	r3, #0
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003678:	230c      	movs	r3, #12
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003680:	2300      	movs	r3, #0
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	4619      	mov	r1, r3
 800368a:	480c      	ldr	r0, [pc, #48]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 800368c:	f7fe fa40 	bl	8001b10 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003690:	480a      	ldr	r0, [pc, #40]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 8003692:	f7ff feb3 	bl	80033fc <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8003696:	4809      	ldr	r0, [pc, #36]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 8003698:	f7ff fed6 	bl	8003448 <LL_USART_DisableIT_CTS>

#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
 800369c:	4807      	ldr	r0, [pc, #28]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 800369e:	f7ff fec3 	bl	8003428 <LL_USART_EnableIT_IDLE>
#endif
  LL_USART_ConfigAsyncMode(USART2);
 80036a2:	4806      	ldr	r0, [pc, #24]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 80036a4:	f7ff feaa 	bl	80033fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80036a8:	4804      	ldr	r0, [pc, #16]	; (80036bc <MX_USART2_UART_Init+0x1c4>)
 80036aa:	f7ff fe97 	bl	80033dc <LL_USART_Enable>

}
 80036ae:	bf00      	nop
 80036b0:	3738      	adds	r7, #56	; 0x38
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bdb0      	pop	{r4, r5, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40004400 	.word	0x40004400
 80036c0:	20000240 	.word	0x20000240

080036c4 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	461a      	mov	r2, r3
 80036d4:	2107      	movs	r1, #7
 80036d6:	480a      	ldr	r0, [pc, #40]	; (8003700 <USART2_PutBuffer+0x3c>)
 80036d8:	f7ff fdc0 	bl	800325c <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	461a      	mov	r2, r3
 80036e0:	2107      	movs	r1, #7
 80036e2:	4807      	ldr	r0, [pc, #28]	; (8003700 <USART2_PutBuffer+0x3c>)
 80036e4:	f7ff fd44 	bl	8003170 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80036e8:	2107      	movs	r1, #7
 80036ea:	4805      	ldr	r0, [pc, #20]	; (8003700 <USART2_PutBuffer+0x3c>)
 80036ec:	f7ff fde6 	bl	80032bc <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80036f0:	2107      	movs	r1, #7
 80036f2:	4803      	ldr	r0, [pc, #12]	; (8003700 <USART2_PutBuffer+0x3c>)
 80036f4:	f7ff fc06 	bl	8002f04 <LL_DMA_EnableChannel>
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40020000 	.word	0x40020000

08003704 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
	if (USART2_ProcessData == 0) return;
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <USART2_CheckDmaReception+0x6c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d029      	beq.n	8003766 <USART2_CheckDmaReception+0x62>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8003712:	2106      	movs	r1, #6
 8003714:	4817      	ldr	r0, [pc, #92]	; (8003774 <USART2_CheckDmaReception+0x70>)
 8003716:	f7ff fd4f 	bl	80031b8 <LL_DMA_GetDataLength>
 800371a:	4603      	mov	r3, r0
 800371c:	b29b      	uxth	r3, r3
 800371e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003722:	80bb      	strh	r3, [r7, #4]

	if (pos != old_pos) {
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <USART2_CheckDmaReception+0x74>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	88ba      	ldrh	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d017      	beq.n	800375e <USART2_CheckDmaReception+0x5a>
		if (pos > old_pos) {
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <USART2_CheckDmaReception+0x74>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	88ba      	ldrh	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d912      	bls.n	800375e <USART2_CheckDmaReception+0x5a>
			uint8_t i = old_pos;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <USART2_CheckDmaReception+0x74>)
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	71fb      	strb	r3, [r7, #7]
			while (i < pos) {
 800373e:	e009      	b.n	8003754 <USART2_CheckDmaReception+0x50>
				USART2_ProcessData(bufferUSART2dma[i]);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <USART2_CheckDmaReception+0x6c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	79fa      	ldrb	r2, [r7, #7]
 8003746:	490d      	ldr	r1, [pc, #52]	; (800377c <USART2_CheckDmaReception+0x78>)
 8003748:	5c8a      	ldrb	r2, [r1, r2]
 800374a:	4610      	mov	r0, r2
 800374c:	4798      	blx	r3
				i++;
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	3301      	adds	r3, #1
 8003752:	71fb      	strb	r3, [r7, #7]
			while (i < pos) {
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	b29b      	uxth	r3, r3
 8003758:	88ba      	ldrh	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d8f0      	bhi.n	8003740 <USART2_CheckDmaReception+0x3c>
			}
		}
	}
	old_pos = pos;
 800375e:	4a06      	ldr	r2, [pc, #24]	; (8003778 <USART2_CheckDmaReception+0x74>)
 8003760:	88bb      	ldrh	r3, [r7, #4]
 8003762:	8013      	strh	r3, [r2, #0]
 8003764:	e000      	b.n	8003768 <USART2_CheckDmaReception+0x64>
	if (USART2_ProcessData == 0) return;
 8003766:	bf00      	nop
}
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000230 	.word	0x20000230
 8003774:	40020000 	.word	0x40020000
 8003778:	20000234 	.word	0x20000234
 800377c:	20000240 	.word	0x20000240

08003780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003784:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003786:	e003      	b.n	8003790 <LoopCopyDataInit>

08003788 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800378a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800378c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800378e:	3104      	adds	r1, #4

08003790 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003790:	480b      	ldr	r0, [pc, #44]	; (80037c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003794:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003796:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003798:	d3f6      	bcc.n	8003788 <CopyDataInit>
	ldr	r2, =_sbss
 800379a:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800379c:	e002      	b.n	80037a4 <LoopFillZerobss>

0800379e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800379e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80037a0:	f842 3b04 	str.w	r3, [r2], #4

080037a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <LoopForever+0x16>)
	cmp	r2, r3
 80037a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80037a8:	d3f9      	bcc.n	800379e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037aa:	f7ff f8ab 	bl	8002904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ae:	f000 f817 	bl	80037e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037b2:	f7fe fc63 	bl	800207c <main>

080037b6 <LoopForever>:

LoopForever:
    b LoopForever
 80037b6:	e7fe      	b.n	80037b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037b8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80037bc:	08006a0c 	.word	0x08006a0c
	ldr	r0, =_sdata
 80037c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80037c4:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 80037c8:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 80037cc:	20000350 	.word	0x20000350

080037d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037d0:	e7fe      	b.n	80037d0 <ADC1_2_IRQHandler>
	...

080037d4 <__errno>:
 80037d4:	4b01      	ldr	r3, [pc, #4]	; (80037dc <__errno+0x8>)
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000008 	.word	0x20000008

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	4d0d      	ldr	r5, [pc, #52]	; (8003818 <__libc_init_array+0x38>)
 80037e4:	4c0d      	ldr	r4, [pc, #52]	; (800381c <__libc_init_array+0x3c>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	2600      	movs	r6, #0
 80037ec:	42a6      	cmp	r6, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	4d0b      	ldr	r5, [pc, #44]	; (8003820 <__libc_init_array+0x40>)
 80037f2:	4c0c      	ldr	r4, [pc, #48]	; (8003824 <__libc_init_array+0x44>)
 80037f4:	f002 feb6 	bl	8006564 <_init>
 80037f8:	1b64      	subs	r4, r4, r5
 80037fa:	10a4      	asrs	r4, r4, #2
 80037fc:	2600      	movs	r6, #0
 80037fe:	42a6      	cmp	r6, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	f855 3b04 	ldr.w	r3, [r5], #4
 8003808:	4798      	blx	r3
 800380a:	3601      	adds	r6, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003812:	4798      	blx	r3
 8003814:	3601      	adds	r6, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	08006a04 	.word	0x08006a04
 800381c:	08006a04 	.word	0x08006a04
 8003820:	08006a04 	.word	0x08006a04
 8003824:	08006a08 	.word	0x08006a08

08003828 <memset>:
 8003828:	4402      	add	r2, r0
 800382a:	4603      	mov	r3, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	f803 1b01 	strb.w	r1, [r3], #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <__cvt>:
 8003838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	ec55 4b10 	vmov	r4, r5, d0
 8003840:	2d00      	cmp	r5, #0
 8003842:	460e      	mov	r6, r1
 8003844:	4619      	mov	r1, r3
 8003846:	462b      	mov	r3, r5
 8003848:	bfbb      	ittet	lt
 800384a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800384e:	461d      	movlt	r5, r3
 8003850:	2300      	movge	r3, #0
 8003852:	232d      	movlt	r3, #45	; 0x2d
 8003854:	700b      	strb	r3, [r1, #0]
 8003856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003858:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800385c:	4691      	mov	r9, r2
 800385e:	f023 0820 	bic.w	r8, r3, #32
 8003862:	bfbc      	itt	lt
 8003864:	4622      	movlt	r2, r4
 8003866:	4614      	movlt	r4, r2
 8003868:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800386c:	d005      	beq.n	800387a <__cvt+0x42>
 800386e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003872:	d100      	bne.n	8003876 <__cvt+0x3e>
 8003874:	3601      	adds	r6, #1
 8003876:	2102      	movs	r1, #2
 8003878:	e000      	b.n	800387c <__cvt+0x44>
 800387a:	2103      	movs	r1, #3
 800387c:	ab03      	add	r3, sp, #12
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	ab02      	add	r3, sp, #8
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	ec45 4b10 	vmov	d0, r4, r5
 8003888:	4653      	mov	r3, sl
 800388a:	4632      	mov	r2, r6
 800388c:	f000 fcec 	bl	8004268 <_dtoa_r>
 8003890:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003894:	4607      	mov	r7, r0
 8003896:	d102      	bne.n	800389e <__cvt+0x66>
 8003898:	f019 0f01 	tst.w	r9, #1
 800389c:	d022      	beq.n	80038e4 <__cvt+0xac>
 800389e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038a2:	eb07 0906 	add.w	r9, r7, r6
 80038a6:	d110      	bne.n	80038ca <__cvt+0x92>
 80038a8:	783b      	ldrb	r3, [r7, #0]
 80038aa:	2b30      	cmp	r3, #48	; 0x30
 80038ac:	d10a      	bne.n	80038c4 <__cvt+0x8c>
 80038ae:	2200      	movs	r2, #0
 80038b0:	2300      	movs	r3, #0
 80038b2:	4620      	mov	r0, r4
 80038b4:	4629      	mov	r1, r5
 80038b6:	f7fd f917 	bl	8000ae8 <__aeabi_dcmpeq>
 80038ba:	b918      	cbnz	r0, 80038c4 <__cvt+0x8c>
 80038bc:	f1c6 0601 	rsb	r6, r6, #1
 80038c0:	f8ca 6000 	str.w	r6, [sl]
 80038c4:	f8da 3000 	ldr.w	r3, [sl]
 80038c8:	4499      	add	r9, r3
 80038ca:	2200      	movs	r2, #0
 80038cc:	2300      	movs	r3, #0
 80038ce:	4620      	mov	r0, r4
 80038d0:	4629      	mov	r1, r5
 80038d2:	f7fd f909 	bl	8000ae8 <__aeabi_dcmpeq>
 80038d6:	b108      	cbz	r0, 80038dc <__cvt+0xa4>
 80038d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80038dc:	2230      	movs	r2, #48	; 0x30
 80038de:	9b03      	ldr	r3, [sp, #12]
 80038e0:	454b      	cmp	r3, r9
 80038e2:	d307      	bcc.n	80038f4 <__cvt+0xbc>
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038e8:	1bdb      	subs	r3, r3, r7
 80038ea:	4638      	mov	r0, r7
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	b004      	add	sp, #16
 80038f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f4:	1c59      	adds	r1, r3, #1
 80038f6:	9103      	str	r1, [sp, #12]
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e7f0      	b.n	80038de <__cvt+0xa6>

080038fc <__exponent>:
 80038fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038fe:	4603      	mov	r3, r0
 8003900:	2900      	cmp	r1, #0
 8003902:	bfb8      	it	lt
 8003904:	4249      	neglt	r1, r1
 8003906:	f803 2b02 	strb.w	r2, [r3], #2
 800390a:	bfb4      	ite	lt
 800390c:	222d      	movlt	r2, #45	; 0x2d
 800390e:	222b      	movge	r2, #43	; 0x2b
 8003910:	2909      	cmp	r1, #9
 8003912:	7042      	strb	r2, [r0, #1]
 8003914:	dd2a      	ble.n	800396c <__exponent+0x70>
 8003916:	f10d 0407 	add.w	r4, sp, #7
 800391a:	46a4      	mov	ip, r4
 800391c:	270a      	movs	r7, #10
 800391e:	46a6      	mov	lr, r4
 8003920:	460a      	mov	r2, r1
 8003922:	fb91 f6f7 	sdiv	r6, r1, r7
 8003926:	fb07 1516 	mls	r5, r7, r6, r1
 800392a:	3530      	adds	r5, #48	; 0x30
 800392c:	2a63      	cmp	r2, #99	; 0x63
 800392e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003932:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003936:	4631      	mov	r1, r6
 8003938:	dcf1      	bgt.n	800391e <__exponent+0x22>
 800393a:	3130      	adds	r1, #48	; 0x30
 800393c:	f1ae 0502 	sub.w	r5, lr, #2
 8003940:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003944:	1c44      	adds	r4, r0, #1
 8003946:	4629      	mov	r1, r5
 8003948:	4561      	cmp	r1, ip
 800394a:	d30a      	bcc.n	8003962 <__exponent+0x66>
 800394c:	f10d 0209 	add.w	r2, sp, #9
 8003950:	eba2 020e 	sub.w	r2, r2, lr
 8003954:	4565      	cmp	r5, ip
 8003956:	bf88      	it	hi
 8003958:	2200      	movhi	r2, #0
 800395a:	4413      	add	r3, r2
 800395c:	1a18      	subs	r0, r3, r0
 800395e:	b003      	add	sp, #12
 8003960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003966:	f804 2f01 	strb.w	r2, [r4, #1]!
 800396a:	e7ed      	b.n	8003948 <__exponent+0x4c>
 800396c:	2330      	movs	r3, #48	; 0x30
 800396e:	3130      	adds	r1, #48	; 0x30
 8003970:	7083      	strb	r3, [r0, #2]
 8003972:	70c1      	strb	r1, [r0, #3]
 8003974:	1d03      	adds	r3, r0, #4
 8003976:	e7f1      	b.n	800395c <__exponent+0x60>

08003978 <_printf_float>:
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	ed2d 8b02 	vpush	{d8}
 8003980:	b08d      	sub	sp, #52	; 0x34
 8003982:	460c      	mov	r4, r1
 8003984:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003988:	4616      	mov	r6, r2
 800398a:	461f      	mov	r7, r3
 800398c:	4605      	mov	r5, r0
 800398e:	f001 fa57 	bl	8004e40 <_localeconv_r>
 8003992:	f8d0 a000 	ldr.w	sl, [r0]
 8003996:	4650      	mov	r0, sl
 8003998:	f7fc fc24 	bl	80001e4 <strlen>
 800399c:	2300      	movs	r3, #0
 800399e:	930a      	str	r3, [sp, #40]	; 0x28
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	f8d8 3000 	ldr.w	r3, [r8]
 80039a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80039ac:	3307      	adds	r3, #7
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	f103 0208 	add.w	r2, r3, #8
 80039b6:	f8c8 2000 	str.w	r2, [r8]
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80039c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80039ca:	9307      	str	r3, [sp, #28]
 80039cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80039d0:	ee08 0a10 	vmov	s16, r0
 80039d4:	4b9f      	ldr	r3, [pc, #636]	; (8003c54 <_printf_float+0x2dc>)
 80039d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	f7fd f8b5 	bl	8000b4c <__aeabi_dcmpun>
 80039e2:	bb88      	cbnz	r0, 8003a48 <_printf_float+0xd0>
 80039e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039e8:	4b9a      	ldr	r3, [pc, #616]	; (8003c54 <_printf_float+0x2dc>)
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	f7fd f88f 	bl	8000b10 <__aeabi_dcmple>
 80039f2:	bb48      	cbnz	r0, 8003a48 <_printf_float+0xd0>
 80039f4:	2200      	movs	r2, #0
 80039f6:	2300      	movs	r3, #0
 80039f8:	4640      	mov	r0, r8
 80039fa:	4649      	mov	r1, r9
 80039fc:	f7fd f87e 	bl	8000afc <__aeabi_dcmplt>
 8003a00:	b110      	cbz	r0, 8003a08 <_printf_float+0x90>
 8003a02:	232d      	movs	r3, #45	; 0x2d
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a08:	4b93      	ldr	r3, [pc, #588]	; (8003c58 <_printf_float+0x2e0>)
 8003a0a:	4894      	ldr	r0, [pc, #592]	; (8003c5c <_printf_float+0x2e4>)
 8003a0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003a10:	bf94      	ite	ls
 8003a12:	4698      	movls	r8, r3
 8003a14:	4680      	movhi	r8, r0
 8003a16:	2303      	movs	r3, #3
 8003a18:	6123      	str	r3, [r4, #16]
 8003a1a:	9b05      	ldr	r3, [sp, #20]
 8003a1c:	f023 0204 	bic.w	r2, r3, #4
 8003a20:	6022      	str	r2, [r4, #0]
 8003a22:	f04f 0900 	mov.w	r9, #0
 8003a26:	9700      	str	r7, [sp, #0]
 8003a28:	4633      	mov	r3, r6
 8003a2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f9d8 	bl	8003de4 <_printf_common>
 8003a34:	3001      	adds	r0, #1
 8003a36:	f040 8090 	bne.w	8003b5a <_printf_float+0x1e2>
 8003a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3e:	b00d      	add	sp, #52	; 0x34
 8003a40:	ecbd 8b02 	vpop	{d8}
 8003a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	4649      	mov	r1, r9
 8003a50:	f7fd f87c 	bl	8000b4c <__aeabi_dcmpun>
 8003a54:	b140      	cbz	r0, 8003a68 <_printf_float+0xf0>
 8003a56:	464b      	mov	r3, r9
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bfbc      	itt	lt
 8003a5c:	232d      	movlt	r3, #45	; 0x2d
 8003a5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a62:	487f      	ldr	r0, [pc, #508]	; (8003c60 <_printf_float+0x2e8>)
 8003a64:	4b7f      	ldr	r3, [pc, #508]	; (8003c64 <_printf_float+0x2ec>)
 8003a66:	e7d1      	b.n	8003a0c <_printf_float+0x94>
 8003a68:	6863      	ldr	r3, [r4, #4]
 8003a6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a6e:	9206      	str	r2, [sp, #24]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	d13f      	bne.n	8003af4 <_printf_float+0x17c>
 8003a74:	2306      	movs	r3, #6
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	9b05      	ldr	r3, [sp, #20]
 8003a7a:	6861      	ldr	r1, [r4, #4]
 8003a7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a80:	2300      	movs	r3, #0
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	ab0a      	add	r3, sp, #40	; 0x28
 8003a86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a8a:	ab09      	add	r3, sp, #36	; 0x24
 8003a8c:	ec49 8b10 	vmov	d0, r8, r9
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f7ff fecd 	bl	8003838 <__cvt>
 8003a9e:	9b06      	ldr	r3, [sp, #24]
 8003aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003aa2:	2b47      	cmp	r3, #71	; 0x47
 8003aa4:	4680      	mov	r8, r0
 8003aa6:	d108      	bne.n	8003aba <_printf_float+0x142>
 8003aa8:	1cc8      	adds	r0, r1, #3
 8003aaa:	db02      	blt.n	8003ab2 <_printf_float+0x13a>
 8003aac:	6863      	ldr	r3, [r4, #4]
 8003aae:	4299      	cmp	r1, r3
 8003ab0:	dd41      	ble.n	8003b36 <_printf_float+0x1be>
 8003ab2:	f1ab 0b02 	sub.w	fp, fp, #2
 8003ab6:	fa5f fb8b 	uxtb.w	fp, fp
 8003aba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003abe:	d820      	bhi.n	8003b02 <_printf_float+0x18a>
 8003ac0:	3901      	subs	r1, #1
 8003ac2:	465a      	mov	r2, fp
 8003ac4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ac8:	9109      	str	r1, [sp, #36]	; 0x24
 8003aca:	f7ff ff17 	bl	80038fc <__exponent>
 8003ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ad0:	1813      	adds	r3, r2, r0
 8003ad2:	2a01      	cmp	r2, #1
 8003ad4:	4681      	mov	r9, r0
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	dc02      	bgt.n	8003ae0 <_printf_float+0x168>
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	07d2      	lsls	r2, r2, #31
 8003ade:	d501      	bpl.n	8003ae4 <_printf_float+0x16c>
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	6123      	str	r3, [r4, #16]
 8003ae4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d09c      	beq.n	8003a26 <_printf_float+0xae>
 8003aec:	232d      	movs	r3, #45	; 0x2d
 8003aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af2:	e798      	b.n	8003a26 <_printf_float+0xae>
 8003af4:	9a06      	ldr	r2, [sp, #24]
 8003af6:	2a47      	cmp	r2, #71	; 0x47
 8003af8:	d1be      	bne.n	8003a78 <_printf_float+0x100>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1bc      	bne.n	8003a78 <_printf_float+0x100>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e7b9      	b.n	8003a76 <_printf_float+0xfe>
 8003b02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003b06:	d118      	bne.n	8003b3a <_printf_float+0x1c2>
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	dd0b      	ble.n	8003b26 <_printf_float+0x1ae>
 8003b0e:	6121      	str	r1, [r4, #16]
 8003b10:	b913      	cbnz	r3, 8003b18 <_printf_float+0x1a0>
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	07d0      	lsls	r0, r2, #31
 8003b16:	d502      	bpl.n	8003b1e <_printf_float+0x1a6>
 8003b18:	3301      	adds	r3, #1
 8003b1a:	440b      	add	r3, r1
 8003b1c:	6123      	str	r3, [r4, #16]
 8003b1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b20:	f04f 0900 	mov.w	r9, #0
 8003b24:	e7de      	b.n	8003ae4 <_printf_float+0x16c>
 8003b26:	b913      	cbnz	r3, 8003b2e <_printf_float+0x1b6>
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	07d2      	lsls	r2, r2, #31
 8003b2c:	d501      	bpl.n	8003b32 <_printf_float+0x1ba>
 8003b2e:	3302      	adds	r3, #2
 8003b30:	e7f4      	b.n	8003b1c <_printf_float+0x1a4>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e7f2      	b.n	8003b1c <_printf_float+0x1a4>
 8003b36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b3c:	4299      	cmp	r1, r3
 8003b3e:	db05      	blt.n	8003b4c <_printf_float+0x1d4>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	6121      	str	r1, [r4, #16]
 8003b44:	07d8      	lsls	r0, r3, #31
 8003b46:	d5ea      	bpl.n	8003b1e <_printf_float+0x1a6>
 8003b48:	1c4b      	adds	r3, r1, #1
 8003b4a:	e7e7      	b.n	8003b1c <_printf_float+0x1a4>
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	bfd4      	ite	le
 8003b50:	f1c1 0202 	rsble	r2, r1, #2
 8003b54:	2201      	movgt	r2, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	e7e0      	b.n	8003b1c <_printf_float+0x1a4>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	055a      	lsls	r2, r3, #21
 8003b5e:	d407      	bmi.n	8003b70 <_printf_float+0x1f8>
 8003b60:	6923      	ldr	r3, [r4, #16]
 8003b62:	4642      	mov	r2, r8
 8003b64:	4631      	mov	r1, r6
 8003b66:	4628      	mov	r0, r5
 8003b68:	47b8      	blx	r7
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d12c      	bne.n	8003bc8 <_printf_float+0x250>
 8003b6e:	e764      	b.n	8003a3a <_printf_float+0xc2>
 8003b70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b74:	f240 80e0 	bls.w	8003d38 <_printf_float+0x3c0>
 8003b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f7fc ffb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d034      	beq.n	8003bf2 <_printf_float+0x27a>
 8003b88:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <_printf_float+0x2f0>)
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4631      	mov	r1, r6
 8003b8e:	4628      	mov	r0, r5
 8003b90:	47b8      	blx	r7
 8003b92:	3001      	adds	r0, #1
 8003b94:	f43f af51 	beq.w	8003a3a <_printf_float+0xc2>
 8003b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	db02      	blt.n	8003ba6 <_printf_float+0x22e>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	07d8      	lsls	r0, r3, #31
 8003ba4:	d510      	bpl.n	8003bc8 <_printf_float+0x250>
 8003ba6:	ee18 3a10 	vmov	r3, s16
 8003baa:	4652      	mov	r2, sl
 8003bac:	4631      	mov	r1, r6
 8003bae:	4628      	mov	r0, r5
 8003bb0:	47b8      	blx	r7
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	f43f af41 	beq.w	8003a3a <_printf_float+0xc2>
 8003bb8:	f04f 0800 	mov.w	r8, #0
 8003bbc:	f104 091a 	add.w	r9, r4, #26
 8003bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	4543      	cmp	r3, r8
 8003bc6:	dc09      	bgt.n	8003bdc <_printf_float+0x264>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	079b      	lsls	r3, r3, #30
 8003bcc:	f100 8105 	bmi.w	8003dda <_printf_float+0x462>
 8003bd0:	68e0      	ldr	r0, [r4, #12]
 8003bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bd4:	4298      	cmp	r0, r3
 8003bd6:	bfb8      	it	lt
 8003bd8:	4618      	movlt	r0, r3
 8003bda:	e730      	b.n	8003a3e <_printf_float+0xc6>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	464a      	mov	r2, r9
 8003be0:	4631      	mov	r1, r6
 8003be2:	4628      	mov	r0, r5
 8003be4:	47b8      	blx	r7
 8003be6:	3001      	adds	r0, #1
 8003be8:	f43f af27 	beq.w	8003a3a <_printf_float+0xc2>
 8003bec:	f108 0801 	add.w	r8, r8, #1
 8003bf0:	e7e6      	b.n	8003bc0 <_printf_float+0x248>
 8003bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dc39      	bgt.n	8003c6c <_printf_float+0x2f4>
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <_printf_float+0x2f0>)
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47b8      	blx	r7
 8003c02:	3001      	adds	r0, #1
 8003c04:	f43f af19 	beq.w	8003a3a <_printf_float+0xc2>
 8003c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d102      	bne.n	8003c16 <_printf_float+0x29e>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	07d9      	lsls	r1, r3, #31
 8003c14:	d5d8      	bpl.n	8003bc8 <_printf_float+0x250>
 8003c16:	ee18 3a10 	vmov	r3, s16
 8003c1a:	4652      	mov	r2, sl
 8003c1c:	4631      	mov	r1, r6
 8003c1e:	4628      	mov	r0, r5
 8003c20:	47b8      	blx	r7
 8003c22:	3001      	adds	r0, #1
 8003c24:	f43f af09 	beq.w	8003a3a <_printf_float+0xc2>
 8003c28:	f04f 0900 	mov.w	r9, #0
 8003c2c:	f104 0a1a 	add.w	sl, r4, #26
 8003c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c32:	425b      	negs	r3, r3
 8003c34:	454b      	cmp	r3, r9
 8003c36:	dc01      	bgt.n	8003c3c <_printf_float+0x2c4>
 8003c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c3a:	e792      	b.n	8003b62 <_printf_float+0x1ea>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	4652      	mov	r2, sl
 8003c40:	4631      	mov	r1, r6
 8003c42:	4628      	mov	r0, r5
 8003c44:	47b8      	blx	r7
 8003c46:	3001      	adds	r0, #1
 8003c48:	f43f aef7 	beq.w	8003a3a <_printf_float+0xc2>
 8003c4c:	f109 0901 	add.w	r9, r9, #1
 8003c50:	e7ee      	b.n	8003c30 <_printf_float+0x2b8>
 8003c52:	bf00      	nop
 8003c54:	7fefffff 	.word	0x7fefffff
 8003c58:	08006624 	.word	0x08006624
 8003c5c:	08006628 	.word	0x08006628
 8003c60:	08006630 	.word	0x08006630
 8003c64:	0800662c 	.word	0x0800662c
 8003c68:	08006634 	.word	0x08006634
 8003c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c70:	429a      	cmp	r2, r3
 8003c72:	bfa8      	it	ge
 8003c74:	461a      	movge	r2, r3
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	4691      	mov	r9, r2
 8003c7a:	dc37      	bgt.n	8003cec <_printf_float+0x374>
 8003c7c:	f04f 0b00 	mov.w	fp, #0
 8003c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c84:	f104 021a 	add.w	r2, r4, #26
 8003c88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c8a:	9305      	str	r3, [sp, #20]
 8003c8c:	eba3 0309 	sub.w	r3, r3, r9
 8003c90:	455b      	cmp	r3, fp
 8003c92:	dc33      	bgt.n	8003cfc <_printf_float+0x384>
 8003c94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	db3b      	blt.n	8003d14 <_printf_float+0x39c>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	07da      	lsls	r2, r3, #31
 8003ca0:	d438      	bmi.n	8003d14 <_printf_float+0x39c>
 8003ca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ca4:	9b05      	ldr	r3, [sp, #20]
 8003ca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	eba2 0901 	sub.w	r9, r2, r1
 8003cae:	4599      	cmp	r9, r3
 8003cb0:	bfa8      	it	ge
 8003cb2:	4699      	movge	r9, r3
 8003cb4:	f1b9 0f00 	cmp.w	r9, #0
 8003cb8:	dc35      	bgt.n	8003d26 <_printf_float+0x3ae>
 8003cba:	f04f 0800 	mov.w	r8, #0
 8003cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cc2:	f104 0a1a 	add.w	sl, r4, #26
 8003cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	eba3 0309 	sub.w	r3, r3, r9
 8003cd0:	4543      	cmp	r3, r8
 8003cd2:	f77f af79 	ble.w	8003bc8 <_printf_float+0x250>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	4652      	mov	r2, sl
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4628      	mov	r0, r5
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	f43f aeaa 	beq.w	8003a3a <_printf_float+0xc2>
 8003ce6:	f108 0801 	add.w	r8, r8, #1
 8003cea:	e7ec      	b.n	8003cc6 <_printf_float+0x34e>
 8003cec:	4613      	mov	r3, r2
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	47b8      	blx	r7
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d1c0      	bne.n	8003c7c <_printf_float+0x304>
 8003cfa:	e69e      	b.n	8003a3a <_printf_float+0xc2>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4628      	mov	r0, r5
 8003d02:	9205      	str	r2, [sp, #20]
 8003d04:	47b8      	blx	r7
 8003d06:	3001      	adds	r0, #1
 8003d08:	f43f ae97 	beq.w	8003a3a <_printf_float+0xc2>
 8003d0c:	9a05      	ldr	r2, [sp, #20]
 8003d0e:	f10b 0b01 	add.w	fp, fp, #1
 8003d12:	e7b9      	b.n	8003c88 <_printf_float+0x310>
 8003d14:	ee18 3a10 	vmov	r3, s16
 8003d18:	4652      	mov	r2, sl
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	47b8      	blx	r7
 8003d20:	3001      	adds	r0, #1
 8003d22:	d1be      	bne.n	8003ca2 <_printf_float+0x32a>
 8003d24:	e689      	b.n	8003a3a <_printf_float+0xc2>
 8003d26:	9a05      	ldr	r2, [sp, #20]
 8003d28:	464b      	mov	r3, r9
 8003d2a:	4442      	add	r2, r8
 8003d2c:	4631      	mov	r1, r6
 8003d2e:	4628      	mov	r0, r5
 8003d30:	47b8      	blx	r7
 8003d32:	3001      	adds	r0, #1
 8003d34:	d1c1      	bne.n	8003cba <_printf_float+0x342>
 8003d36:	e680      	b.n	8003a3a <_printf_float+0xc2>
 8003d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d3a:	2a01      	cmp	r2, #1
 8003d3c:	dc01      	bgt.n	8003d42 <_printf_float+0x3ca>
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d538      	bpl.n	8003db4 <_printf_float+0x43c>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4642      	mov	r2, r8
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b8      	blx	r7
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	f43f ae74 	beq.w	8003a3a <_printf_float+0xc2>
 8003d52:	ee18 3a10 	vmov	r3, s16
 8003d56:	4652      	mov	r2, sl
 8003d58:	4631      	mov	r1, r6
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b8      	blx	r7
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f43f ae6b 	beq.w	8003a3a <_printf_float+0xc2>
 8003d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f7fc febc 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d70:	b9d8      	cbnz	r0, 8003daa <_printf_float+0x432>
 8003d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d74:	f108 0201 	add.w	r2, r8, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	4631      	mov	r1, r6
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	47b8      	blx	r7
 8003d80:	3001      	adds	r0, #1
 8003d82:	d10e      	bne.n	8003da2 <_printf_float+0x42a>
 8003d84:	e659      	b.n	8003a3a <_printf_float+0xc2>
 8003d86:	2301      	movs	r3, #1
 8003d88:	4652      	mov	r2, sl
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	47b8      	blx	r7
 8003d90:	3001      	adds	r0, #1
 8003d92:	f43f ae52 	beq.w	8003a3a <_printf_float+0xc2>
 8003d96:	f108 0801 	add.w	r8, r8, #1
 8003d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	4543      	cmp	r3, r8
 8003da0:	dcf1      	bgt.n	8003d86 <_printf_float+0x40e>
 8003da2:	464b      	mov	r3, r9
 8003da4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003da8:	e6dc      	b.n	8003b64 <_printf_float+0x1ec>
 8003daa:	f04f 0800 	mov.w	r8, #0
 8003dae:	f104 0a1a 	add.w	sl, r4, #26
 8003db2:	e7f2      	b.n	8003d9a <_printf_float+0x422>
 8003db4:	2301      	movs	r3, #1
 8003db6:	4642      	mov	r2, r8
 8003db8:	e7df      	b.n	8003d7a <_printf_float+0x402>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	464a      	mov	r2, r9
 8003dbe:	4631      	mov	r1, r6
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	47b8      	blx	r7
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	f43f ae38 	beq.w	8003a3a <_printf_float+0xc2>
 8003dca:	f108 0801 	add.w	r8, r8, #1
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dd2:	1a5b      	subs	r3, r3, r1
 8003dd4:	4543      	cmp	r3, r8
 8003dd6:	dcf0      	bgt.n	8003dba <_printf_float+0x442>
 8003dd8:	e6fa      	b.n	8003bd0 <_printf_float+0x258>
 8003dda:	f04f 0800 	mov.w	r8, #0
 8003dde:	f104 0919 	add.w	r9, r4, #25
 8003de2:	e7f4      	b.n	8003dce <_printf_float+0x456>

08003de4 <_printf_common>:
 8003de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	4616      	mov	r6, r2
 8003dea:	4699      	mov	r9, r3
 8003dec:	688a      	ldr	r2, [r1, #8]
 8003dee:	690b      	ldr	r3, [r1, #16]
 8003df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003df4:	4293      	cmp	r3, r2
 8003df6:	bfb8      	it	lt
 8003df8:	4613      	movlt	r3, r2
 8003dfa:	6033      	str	r3, [r6, #0]
 8003dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e00:	4607      	mov	r7, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	b10a      	cbz	r2, 8003e0a <_printf_common+0x26>
 8003e06:	3301      	adds	r3, #1
 8003e08:	6033      	str	r3, [r6, #0]
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	0699      	lsls	r1, r3, #26
 8003e0e:	bf42      	ittt	mi
 8003e10:	6833      	ldrmi	r3, [r6, #0]
 8003e12:	3302      	addmi	r3, #2
 8003e14:	6033      	strmi	r3, [r6, #0]
 8003e16:	6825      	ldr	r5, [r4, #0]
 8003e18:	f015 0506 	ands.w	r5, r5, #6
 8003e1c:	d106      	bne.n	8003e2c <_printf_common+0x48>
 8003e1e:	f104 0a19 	add.w	sl, r4, #25
 8003e22:	68e3      	ldr	r3, [r4, #12]
 8003e24:	6832      	ldr	r2, [r6, #0]
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	42ab      	cmp	r3, r5
 8003e2a:	dc26      	bgt.n	8003e7a <_printf_common+0x96>
 8003e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e30:	1e13      	subs	r3, r2, #0
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	bf18      	it	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	0692      	lsls	r2, r2, #26
 8003e3a:	d42b      	bmi.n	8003e94 <_printf_common+0xb0>
 8003e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e40:	4649      	mov	r1, r9
 8003e42:	4638      	mov	r0, r7
 8003e44:	47c0      	blx	r8
 8003e46:	3001      	adds	r0, #1
 8003e48:	d01e      	beq.n	8003e88 <_printf_common+0xa4>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	68e5      	ldr	r5, [r4, #12]
 8003e4e:	6832      	ldr	r2, [r6, #0]
 8003e50:	f003 0306 	and.w	r3, r3, #6
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	bf08      	it	eq
 8003e58:	1aad      	subeq	r5, r5, r2
 8003e5a:	68a3      	ldr	r3, [r4, #8]
 8003e5c:	6922      	ldr	r2, [r4, #16]
 8003e5e:	bf0c      	ite	eq
 8003e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e64:	2500      	movne	r5, #0
 8003e66:	4293      	cmp	r3, r2
 8003e68:	bfc4      	itt	gt
 8003e6a:	1a9b      	subgt	r3, r3, r2
 8003e6c:	18ed      	addgt	r5, r5, r3
 8003e6e:	2600      	movs	r6, #0
 8003e70:	341a      	adds	r4, #26
 8003e72:	42b5      	cmp	r5, r6
 8003e74:	d11a      	bne.n	8003eac <_printf_common+0xc8>
 8003e76:	2000      	movs	r0, #0
 8003e78:	e008      	b.n	8003e8c <_printf_common+0xa8>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4652      	mov	r2, sl
 8003e7e:	4649      	mov	r1, r9
 8003e80:	4638      	mov	r0, r7
 8003e82:	47c0      	blx	r8
 8003e84:	3001      	adds	r0, #1
 8003e86:	d103      	bne.n	8003e90 <_printf_common+0xac>
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e90:	3501      	adds	r5, #1
 8003e92:	e7c6      	b.n	8003e22 <_printf_common+0x3e>
 8003e94:	18e1      	adds	r1, r4, r3
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	2030      	movs	r0, #48	; 0x30
 8003e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e9e:	4422      	add	r2, r4
 8003ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	e7c7      	b.n	8003e3c <_printf_common+0x58>
 8003eac:	2301      	movs	r3, #1
 8003eae:	4622      	mov	r2, r4
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	47c0      	blx	r8
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d0e6      	beq.n	8003e88 <_printf_common+0xa4>
 8003eba:	3601      	adds	r6, #1
 8003ebc:	e7d9      	b.n	8003e72 <_printf_common+0x8e>
	...

08003ec0 <_printf_i>:
 8003ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	4691      	mov	r9, r2
 8003ec8:	7e27      	ldrb	r7, [r4, #24]
 8003eca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ecc:	2f78      	cmp	r7, #120	; 0x78
 8003ece:	4680      	mov	r8, r0
 8003ed0:	469a      	mov	sl, r3
 8003ed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ed6:	d807      	bhi.n	8003ee8 <_printf_i+0x28>
 8003ed8:	2f62      	cmp	r7, #98	; 0x62
 8003eda:	d80a      	bhi.n	8003ef2 <_printf_i+0x32>
 8003edc:	2f00      	cmp	r7, #0
 8003ede:	f000 80d8 	beq.w	8004092 <_printf_i+0x1d2>
 8003ee2:	2f58      	cmp	r7, #88	; 0x58
 8003ee4:	f000 80a3 	beq.w	800402e <_printf_i+0x16e>
 8003ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ef0:	e03a      	b.n	8003f68 <_printf_i+0xa8>
 8003ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ef6:	2b15      	cmp	r3, #21
 8003ef8:	d8f6      	bhi.n	8003ee8 <_printf_i+0x28>
 8003efa:	a001      	add	r0, pc, #4	; (adr r0, 8003f00 <_printf_i+0x40>)
 8003efc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	08003f6d 	.word	0x08003f6d
 8003f08:	08003ee9 	.word	0x08003ee9
 8003f0c:	08003ee9 	.word	0x08003ee9
 8003f10:	08003ee9 	.word	0x08003ee9
 8003f14:	08003ee9 	.word	0x08003ee9
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003ee9 	.word	0x08003ee9
 8003f20:	08003ee9 	.word	0x08003ee9
 8003f24:	08003ee9 	.word	0x08003ee9
 8003f28:	08003ee9 	.word	0x08003ee9
 8003f2c:	08004079 	.word	0x08004079
 8003f30:	08003f9d 	.word	0x08003f9d
 8003f34:	0800405b 	.word	0x0800405b
 8003f38:	08003ee9 	.word	0x08003ee9
 8003f3c:	08003ee9 	.word	0x08003ee9
 8003f40:	0800409b 	.word	0x0800409b
 8003f44:	08003ee9 	.word	0x08003ee9
 8003f48:	08003f9d 	.word	0x08003f9d
 8003f4c:	08003ee9 	.word	0x08003ee9
 8003f50:	08003ee9 	.word	0x08003ee9
 8003f54:	08004063 	.word	0x08004063
 8003f58:	680b      	ldr	r3, [r1, #0]
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	600a      	str	r2, [r1, #0]
 8003f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0a3      	b.n	80040b4 <_printf_i+0x1f4>
 8003f6c:	6825      	ldr	r5, [r4, #0]
 8003f6e:	6808      	ldr	r0, [r1, #0]
 8003f70:	062e      	lsls	r6, r5, #24
 8003f72:	f100 0304 	add.w	r3, r0, #4
 8003f76:	d50a      	bpl.n	8003f8e <_printf_i+0xce>
 8003f78:	6805      	ldr	r5, [r0, #0]
 8003f7a:	600b      	str	r3, [r1, #0]
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	da03      	bge.n	8003f88 <_printf_i+0xc8>
 8003f80:	232d      	movs	r3, #45	; 0x2d
 8003f82:	426d      	negs	r5, r5
 8003f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f88:	485e      	ldr	r0, [pc, #376]	; (8004104 <_printf_i+0x244>)
 8003f8a:	230a      	movs	r3, #10
 8003f8c:	e019      	b.n	8003fc2 <_printf_i+0x102>
 8003f8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f92:	6805      	ldr	r5, [r0, #0]
 8003f94:	600b      	str	r3, [r1, #0]
 8003f96:	bf18      	it	ne
 8003f98:	b22d      	sxthne	r5, r5
 8003f9a:	e7ef      	b.n	8003f7c <_printf_i+0xbc>
 8003f9c:	680b      	ldr	r3, [r1, #0]
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	1d18      	adds	r0, r3, #4
 8003fa2:	6008      	str	r0, [r1, #0]
 8003fa4:	0628      	lsls	r0, r5, #24
 8003fa6:	d501      	bpl.n	8003fac <_printf_i+0xec>
 8003fa8:	681d      	ldr	r5, [r3, #0]
 8003faa:	e002      	b.n	8003fb2 <_printf_i+0xf2>
 8003fac:	0669      	lsls	r1, r5, #25
 8003fae:	d5fb      	bpl.n	8003fa8 <_printf_i+0xe8>
 8003fb0:	881d      	ldrh	r5, [r3, #0]
 8003fb2:	4854      	ldr	r0, [pc, #336]	; (8004104 <_printf_i+0x244>)
 8003fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2308      	moveq	r3, #8
 8003fba:	230a      	movne	r3, #10
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fc2:	6866      	ldr	r6, [r4, #4]
 8003fc4:	60a6      	str	r6, [r4, #8]
 8003fc6:	2e00      	cmp	r6, #0
 8003fc8:	bfa2      	ittt	ge
 8003fca:	6821      	ldrge	r1, [r4, #0]
 8003fcc:	f021 0104 	bicge.w	r1, r1, #4
 8003fd0:	6021      	strge	r1, [r4, #0]
 8003fd2:	b90d      	cbnz	r5, 8003fd8 <_printf_i+0x118>
 8003fd4:	2e00      	cmp	r6, #0
 8003fd6:	d04d      	beq.n	8004074 <_printf_i+0x1b4>
 8003fd8:	4616      	mov	r6, r2
 8003fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fde:	fb03 5711 	mls	r7, r3, r1, r5
 8003fe2:	5dc7      	ldrb	r7, [r0, r7]
 8003fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fe8:	462f      	mov	r7, r5
 8003fea:	42bb      	cmp	r3, r7
 8003fec:	460d      	mov	r5, r1
 8003fee:	d9f4      	bls.n	8003fda <_printf_i+0x11a>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d10b      	bne.n	800400c <_printf_i+0x14c>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	07df      	lsls	r7, r3, #31
 8003ff8:	d508      	bpl.n	800400c <_printf_i+0x14c>
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	6861      	ldr	r1, [r4, #4]
 8003ffe:	4299      	cmp	r1, r3
 8004000:	bfde      	ittt	le
 8004002:	2330      	movle	r3, #48	; 0x30
 8004004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004008:	f106 36ff 	addle.w	r6, r6, #4294967295
 800400c:	1b92      	subs	r2, r2, r6
 800400e:	6122      	str	r2, [r4, #16]
 8004010:	f8cd a000 	str.w	sl, [sp]
 8004014:	464b      	mov	r3, r9
 8004016:	aa03      	add	r2, sp, #12
 8004018:	4621      	mov	r1, r4
 800401a:	4640      	mov	r0, r8
 800401c:	f7ff fee2 	bl	8003de4 <_printf_common>
 8004020:	3001      	adds	r0, #1
 8004022:	d14c      	bne.n	80040be <_printf_i+0x1fe>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	b004      	add	sp, #16
 800402a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402e:	4835      	ldr	r0, [pc, #212]	; (8004104 <_printf_i+0x244>)
 8004030:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	680e      	ldr	r6, [r1, #0]
 8004038:	061f      	lsls	r7, r3, #24
 800403a:	f856 5b04 	ldr.w	r5, [r6], #4
 800403e:	600e      	str	r6, [r1, #0]
 8004040:	d514      	bpl.n	800406c <_printf_i+0x1ac>
 8004042:	07d9      	lsls	r1, r3, #31
 8004044:	bf44      	itt	mi
 8004046:	f043 0320 	orrmi.w	r3, r3, #32
 800404a:	6023      	strmi	r3, [r4, #0]
 800404c:	b91d      	cbnz	r5, 8004056 <_printf_i+0x196>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	f023 0320 	bic.w	r3, r3, #32
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	2310      	movs	r3, #16
 8004058:	e7b0      	b.n	8003fbc <_printf_i+0xfc>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f043 0320 	orr.w	r3, r3, #32
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	2378      	movs	r3, #120	; 0x78
 8004064:	4828      	ldr	r0, [pc, #160]	; (8004108 <_printf_i+0x248>)
 8004066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800406a:	e7e3      	b.n	8004034 <_printf_i+0x174>
 800406c:	065e      	lsls	r6, r3, #25
 800406e:	bf48      	it	mi
 8004070:	b2ad      	uxthmi	r5, r5
 8004072:	e7e6      	b.n	8004042 <_printf_i+0x182>
 8004074:	4616      	mov	r6, r2
 8004076:	e7bb      	b.n	8003ff0 <_printf_i+0x130>
 8004078:	680b      	ldr	r3, [r1, #0]
 800407a:	6826      	ldr	r6, [r4, #0]
 800407c:	6960      	ldr	r0, [r4, #20]
 800407e:	1d1d      	adds	r5, r3, #4
 8004080:	600d      	str	r5, [r1, #0]
 8004082:	0635      	lsls	r5, r6, #24
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	d501      	bpl.n	800408c <_printf_i+0x1cc>
 8004088:	6018      	str	r0, [r3, #0]
 800408a:	e002      	b.n	8004092 <_printf_i+0x1d2>
 800408c:	0671      	lsls	r1, r6, #25
 800408e:	d5fb      	bpl.n	8004088 <_printf_i+0x1c8>
 8004090:	8018      	strh	r0, [r3, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	6123      	str	r3, [r4, #16]
 8004096:	4616      	mov	r6, r2
 8004098:	e7ba      	b.n	8004010 <_printf_i+0x150>
 800409a:	680b      	ldr	r3, [r1, #0]
 800409c:	1d1a      	adds	r2, r3, #4
 800409e:	600a      	str	r2, [r1, #0]
 80040a0:	681e      	ldr	r6, [r3, #0]
 80040a2:	6862      	ldr	r2, [r4, #4]
 80040a4:	2100      	movs	r1, #0
 80040a6:	4630      	mov	r0, r6
 80040a8:	f7fc f8aa 	bl	8000200 <memchr>
 80040ac:	b108      	cbz	r0, 80040b2 <_printf_i+0x1f2>
 80040ae:	1b80      	subs	r0, r0, r6
 80040b0:	6060      	str	r0, [r4, #4]
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	6123      	str	r3, [r4, #16]
 80040b6:	2300      	movs	r3, #0
 80040b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040bc:	e7a8      	b.n	8004010 <_printf_i+0x150>
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	4632      	mov	r2, r6
 80040c2:	4649      	mov	r1, r9
 80040c4:	4640      	mov	r0, r8
 80040c6:	47d0      	blx	sl
 80040c8:	3001      	adds	r0, #1
 80040ca:	d0ab      	beq.n	8004024 <_printf_i+0x164>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	079b      	lsls	r3, r3, #30
 80040d0:	d413      	bmi.n	80040fa <_printf_i+0x23a>
 80040d2:	68e0      	ldr	r0, [r4, #12]
 80040d4:	9b03      	ldr	r3, [sp, #12]
 80040d6:	4298      	cmp	r0, r3
 80040d8:	bfb8      	it	lt
 80040da:	4618      	movlt	r0, r3
 80040dc:	e7a4      	b.n	8004028 <_printf_i+0x168>
 80040de:	2301      	movs	r3, #1
 80040e0:	4632      	mov	r2, r6
 80040e2:	4649      	mov	r1, r9
 80040e4:	4640      	mov	r0, r8
 80040e6:	47d0      	blx	sl
 80040e8:	3001      	adds	r0, #1
 80040ea:	d09b      	beq.n	8004024 <_printf_i+0x164>
 80040ec:	3501      	adds	r5, #1
 80040ee:	68e3      	ldr	r3, [r4, #12]
 80040f0:	9903      	ldr	r1, [sp, #12]
 80040f2:	1a5b      	subs	r3, r3, r1
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	dcf2      	bgt.n	80040de <_printf_i+0x21e>
 80040f8:	e7eb      	b.n	80040d2 <_printf_i+0x212>
 80040fa:	2500      	movs	r5, #0
 80040fc:	f104 0619 	add.w	r6, r4, #25
 8004100:	e7f5      	b.n	80040ee <_printf_i+0x22e>
 8004102:	bf00      	nop
 8004104:	08006636 	.word	0x08006636
 8004108:	08006647 	.word	0x08006647

0800410c <siprintf>:
 800410c:	b40e      	push	{r1, r2, r3}
 800410e:	b500      	push	{lr}
 8004110:	b09c      	sub	sp, #112	; 0x70
 8004112:	ab1d      	add	r3, sp, #116	; 0x74
 8004114:	9002      	str	r0, [sp, #8]
 8004116:	9006      	str	r0, [sp, #24]
 8004118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800411c:	4809      	ldr	r0, [pc, #36]	; (8004144 <siprintf+0x38>)
 800411e:	9107      	str	r1, [sp, #28]
 8004120:	9104      	str	r1, [sp, #16]
 8004122:	4909      	ldr	r1, [pc, #36]	; (8004148 <siprintf+0x3c>)
 8004124:	f853 2b04 	ldr.w	r2, [r3], #4
 8004128:	9105      	str	r1, [sp, #20]
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	a902      	add	r1, sp, #8
 8004130:	f001 fb34 	bl	800579c <_svfiprintf_r>
 8004134:	9b02      	ldr	r3, [sp, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	b01c      	add	sp, #112	; 0x70
 800413c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004140:	b003      	add	sp, #12
 8004142:	4770      	bx	lr
 8004144:	20000008 	.word	0x20000008
 8004148:	ffff0208 	.word	0xffff0208

0800414c <quorem>:
 800414c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004150:	6903      	ldr	r3, [r0, #16]
 8004152:	690c      	ldr	r4, [r1, #16]
 8004154:	42a3      	cmp	r3, r4
 8004156:	4607      	mov	r7, r0
 8004158:	f2c0 8081 	blt.w	800425e <quorem+0x112>
 800415c:	3c01      	subs	r4, #1
 800415e:	f101 0814 	add.w	r8, r1, #20
 8004162:	f100 0514 	add.w	r5, r0, #20
 8004166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004174:	3301      	adds	r3, #1
 8004176:	429a      	cmp	r2, r3
 8004178:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800417c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004180:	fbb2 f6f3 	udiv	r6, r2, r3
 8004184:	d331      	bcc.n	80041ea <quorem+0x9e>
 8004186:	f04f 0e00 	mov.w	lr, #0
 800418a:	4640      	mov	r0, r8
 800418c:	46ac      	mov	ip, r5
 800418e:	46f2      	mov	sl, lr
 8004190:	f850 2b04 	ldr.w	r2, [r0], #4
 8004194:	b293      	uxth	r3, r2
 8004196:	fb06 e303 	mla	r3, r6, r3, lr
 800419a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800419e:	b29b      	uxth	r3, r3
 80041a0:	ebaa 0303 	sub.w	r3, sl, r3
 80041a4:	0c12      	lsrs	r2, r2, #16
 80041a6:	f8dc a000 	ldr.w	sl, [ip]
 80041aa:	fb06 e202 	mla	r2, r6, r2, lr
 80041ae:	fa13 f38a 	uxtah	r3, r3, sl
 80041b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041b6:	fa1f fa82 	uxth.w	sl, r2
 80041ba:	f8dc 2000 	ldr.w	r2, [ip]
 80041be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80041c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041cc:	4581      	cmp	r9, r0
 80041ce:	f84c 3b04 	str.w	r3, [ip], #4
 80041d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041d6:	d2db      	bcs.n	8004190 <quorem+0x44>
 80041d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80041dc:	b92b      	cbnz	r3, 80041ea <quorem+0x9e>
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	3b04      	subs	r3, #4
 80041e2:	429d      	cmp	r5, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	d32e      	bcc.n	8004246 <quorem+0xfa>
 80041e8:	613c      	str	r4, [r7, #16]
 80041ea:	4638      	mov	r0, r7
 80041ec:	f001 f8c0 	bl	8005370 <__mcmp>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	db24      	blt.n	800423e <quorem+0xf2>
 80041f4:	3601      	adds	r6, #1
 80041f6:	4628      	mov	r0, r5
 80041f8:	f04f 0c00 	mov.w	ip, #0
 80041fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004200:	f8d0 e000 	ldr.w	lr, [r0]
 8004204:	b293      	uxth	r3, r2
 8004206:	ebac 0303 	sub.w	r3, ip, r3
 800420a:	0c12      	lsrs	r2, r2, #16
 800420c:	fa13 f38e 	uxtah	r3, r3, lr
 8004210:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004214:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004218:	b29b      	uxth	r3, r3
 800421a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800421e:	45c1      	cmp	r9, r8
 8004220:	f840 3b04 	str.w	r3, [r0], #4
 8004224:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004228:	d2e8      	bcs.n	80041fc <quorem+0xb0>
 800422a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800422e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004232:	b922      	cbnz	r2, 800423e <quorem+0xf2>
 8004234:	3b04      	subs	r3, #4
 8004236:	429d      	cmp	r5, r3
 8004238:	461a      	mov	r2, r3
 800423a:	d30a      	bcc.n	8004252 <quorem+0x106>
 800423c:	613c      	str	r4, [r7, #16]
 800423e:	4630      	mov	r0, r6
 8004240:	b003      	add	sp, #12
 8004242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	3b04      	subs	r3, #4
 800424a:	2a00      	cmp	r2, #0
 800424c:	d1cc      	bne.n	80041e8 <quorem+0x9c>
 800424e:	3c01      	subs	r4, #1
 8004250:	e7c7      	b.n	80041e2 <quorem+0x96>
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	3b04      	subs	r3, #4
 8004256:	2a00      	cmp	r2, #0
 8004258:	d1f0      	bne.n	800423c <quorem+0xf0>
 800425a:	3c01      	subs	r4, #1
 800425c:	e7eb      	b.n	8004236 <quorem+0xea>
 800425e:	2000      	movs	r0, #0
 8004260:	e7ee      	b.n	8004240 <quorem+0xf4>
 8004262:	0000      	movs	r0, r0
 8004264:	0000      	movs	r0, r0
	...

08004268 <_dtoa_r>:
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	ed2d 8b02 	vpush	{d8}
 8004270:	ec57 6b10 	vmov	r6, r7, d0
 8004274:	b095      	sub	sp, #84	; 0x54
 8004276:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004278:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800427c:	9105      	str	r1, [sp, #20]
 800427e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004282:	4604      	mov	r4, r0
 8004284:	9209      	str	r2, [sp, #36]	; 0x24
 8004286:	930f      	str	r3, [sp, #60]	; 0x3c
 8004288:	b975      	cbnz	r5, 80042a8 <_dtoa_r+0x40>
 800428a:	2010      	movs	r0, #16
 800428c:	f000 fddc 	bl	8004e48 <malloc>
 8004290:	4602      	mov	r2, r0
 8004292:	6260      	str	r0, [r4, #36]	; 0x24
 8004294:	b920      	cbnz	r0, 80042a0 <_dtoa_r+0x38>
 8004296:	4bb2      	ldr	r3, [pc, #712]	; (8004560 <_dtoa_r+0x2f8>)
 8004298:	21ea      	movs	r1, #234	; 0xea
 800429a:	48b2      	ldr	r0, [pc, #712]	; (8004564 <_dtoa_r+0x2fc>)
 800429c:	f001 fb8e 	bl	80059bc <__assert_func>
 80042a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80042a4:	6005      	str	r5, [r0, #0]
 80042a6:	60c5      	str	r5, [r0, #12]
 80042a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042aa:	6819      	ldr	r1, [r3, #0]
 80042ac:	b151      	cbz	r1, 80042c4 <_dtoa_r+0x5c>
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	604a      	str	r2, [r1, #4]
 80042b2:	2301      	movs	r3, #1
 80042b4:	4093      	lsls	r3, r2
 80042b6:	608b      	str	r3, [r1, #8]
 80042b8:	4620      	mov	r0, r4
 80042ba:	f000 fe1b 	bl	8004ef4 <_Bfree>
 80042be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	1e3b      	subs	r3, r7, #0
 80042c6:	bfb9      	ittee	lt
 80042c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042cc:	9303      	strlt	r3, [sp, #12]
 80042ce:	2300      	movge	r3, #0
 80042d0:	f8c8 3000 	strge.w	r3, [r8]
 80042d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80042d8:	4ba3      	ldr	r3, [pc, #652]	; (8004568 <_dtoa_r+0x300>)
 80042da:	bfbc      	itt	lt
 80042dc:	2201      	movlt	r2, #1
 80042de:	f8c8 2000 	strlt.w	r2, [r8]
 80042e2:	ea33 0309 	bics.w	r3, r3, r9
 80042e6:	d11b      	bne.n	8004320 <_dtoa_r+0xb8>
 80042e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042f4:	4333      	orrs	r3, r6
 80042f6:	f000 857a 	beq.w	8004dee <_dtoa_r+0xb86>
 80042fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042fc:	b963      	cbnz	r3, 8004318 <_dtoa_r+0xb0>
 80042fe:	4b9b      	ldr	r3, [pc, #620]	; (800456c <_dtoa_r+0x304>)
 8004300:	e024      	b.n	800434c <_dtoa_r+0xe4>
 8004302:	4b9b      	ldr	r3, [pc, #620]	; (8004570 <_dtoa_r+0x308>)
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	3308      	adds	r3, #8
 8004308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	9800      	ldr	r0, [sp, #0]
 800430e:	b015      	add	sp, #84	; 0x54
 8004310:	ecbd 8b02 	vpop	{d8}
 8004314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004318:	4b94      	ldr	r3, [pc, #592]	; (800456c <_dtoa_r+0x304>)
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	3303      	adds	r3, #3
 800431e:	e7f3      	b.n	8004308 <_dtoa_r+0xa0>
 8004320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004324:	2200      	movs	r2, #0
 8004326:	ec51 0b17 	vmov	r0, r1, d7
 800432a:	2300      	movs	r3, #0
 800432c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004330:	f7fc fbda 	bl	8000ae8 <__aeabi_dcmpeq>
 8004334:	4680      	mov	r8, r0
 8004336:	b158      	cbz	r0, 8004350 <_dtoa_r+0xe8>
 8004338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800433a:	2301      	movs	r3, #1
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8551 	beq.w	8004de8 <_dtoa_r+0xb80>
 8004346:	488b      	ldr	r0, [pc, #556]	; (8004574 <_dtoa_r+0x30c>)
 8004348:	6018      	str	r0, [r3, #0]
 800434a:	1e43      	subs	r3, r0, #1
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	e7dd      	b.n	800430c <_dtoa_r+0xa4>
 8004350:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004354:	aa12      	add	r2, sp, #72	; 0x48
 8004356:	a913      	add	r1, sp, #76	; 0x4c
 8004358:	4620      	mov	r0, r4
 800435a:	f001 f8ad 	bl	80054b8 <__d2b>
 800435e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004362:	4683      	mov	fp, r0
 8004364:	2d00      	cmp	r5, #0
 8004366:	d07c      	beq.n	8004462 <_dtoa_r+0x1fa>
 8004368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800436a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800436e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004372:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004376:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800437a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800437e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004382:	4b7d      	ldr	r3, [pc, #500]	; (8004578 <_dtoa_r+0x310>)
 8004384:	2200      	movs	r2, #0
 8004386:	4630      	mov	r0, r6
 8004388:	4639      	mov	r1, r7
 800438a:	f7fb ff8d 	bl	80002a8 <__aeabi_dsub>
 800438e:	a36e      	add	r3, pc, #440	; (adr r3, 8004548 <_dtoa_r+0x2e0>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fc f940 	bl	8000618 <__aeabi_dmul>
 8004398:	a36d      	add	r3, pc, #436	; (adr r3, 8004550 <_dtoa_r+0x2e8>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f7fb ff85 	bl	80002ac <__adddf3>
 80043a2:	4606      	mov	r6, r0
 80043a4:	4628      	mov	r0, r5
 80043a6:	460f      	mov	r7, r1
 80043a8:	f7fc f8cc 	bl	8000544 <__aeabi_i2d>
 80043ac:	a36a      	add	r3, pc, #424	; (adr r3, 8004558 <_dtoa_r+0x2f0>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fc f931 	bl	8000618 <__aeabi_dmul>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4630      	mov	r0, r6
 80043bc:	4639      	mov	r1, r7
 80043be:	f7fb ff75 	bl	80002ac <__adddf3>
 80043c2:	4606      	mov	r6, r0
 80043c4:	460f      	mov	r7, r1
 80043c6:	f7fc fbd7 	bl	8000b78 <__aeabi_d2iz>
 80043ca:	2200      	movs	r2, #0
 80043cc:	4682      	mov	sl, r0
 80043ce:	2300      	movs	r3, #0
 80043d0:	4630      	mov	r0, r6
 80043d2:	4639      	mov	r1, r7
 80043d4:	f7fc fb92 	bl	8000afc <__aeabi_dcmplt>
 80043d8:	b148      	cbz	r0, 80043ee <_dtoa_r+0x186>
 80043da:	4650      	mov	r0, sl
 80043dc:	f7fc f8b2 	bl	8000544 <__aeabi_i2d>
 80043e0:	4632      	mov	r2, r6
 80043e2:	463b      	mov	r3, r7
 80043e4:	f7fc fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 80043e8:	b908      	cbnz	r0, 80043ee <_dtoa_r+0x186>
 80043ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043ee:	f1ba 0f16 	cmp.w	sl, #22
 80043f2:	d854      	bhi.n	800449e <_dtoa_r+0x236>
 80043f4:	4b61      	ldr	r3, [pc, #388]	; (800457c <_dtoa_r+0x314>)
 80043f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004402:	f7fc fb7b 	bl	8000afc <__aeabi_dcmplt>
 8004406:	2800      	cmp	r0, #0
 8004408:	d04b      	beq.n	80044a2 <_dtoa_r+0x23a>
 800440a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800440e:	2300      	movs	r3, #0
 8004410:	930e      	str	r3, [sp, #56]	; 0x38
 8004412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004414:	1b5d      	subs	r5, r3, r5
 8004416:	1e6b      	subs	r3, r5, #1
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	bf43      	ittte	mi
 800441c:	2300      	movmi	r3, #0
 800441e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004422:	9304      	strmi	r3, [sp, #16]
 8004424:	f04f 0800 	movpl.w	r8, #0
 8004428:	f1ba 0f00 	cmp.w	sl, #0
 800442c:	db3b      	blt.n	80044a6 <_dtoa_r+0x23e>
 800442e:	9b04      	ldr	r3, [sp, #16]
 8004430:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004434:	4453      	add	r3, sl
 8004436:	9304      	str	r3, [sp, #16]
 8004438:	2300      	movs	r3, #0
 800443a:	9306      	str	r3, [sp, #24]
 800443c:	9b05      	ldr	r3, [sp, #20]
 800443e:	2b09      	cmp	r3, #9
 8004440:	d869      	bhi.n	8004516 <_dtoa_r+0x2ae>
 8004442:	2b05      	cmp	r3, #5
 8004444:	bfc4      	itt	gt
 8004446:	3b04      	subgt	r3, #4
 8004448:	9305      	strgt	r3, [sp, #20]
 800444a:	9b05      	ldr	r3, [sp, #20]
 800444c:	f1a3 0302 	sub.w	r3, r3, #2
 8004450:	bfcc      	ite	gt
 8004452:	2500      	movgt	r5, #0
 8004454:	2501      	movle	r5, #1
 8004456:	2b03      	cmp	r3, #3
 8004458:	d869      	bhi.n	800452e <_dtoa_r+0x2c6>
 800445a:	e8df f003 	tbb	[pc, r3]
 800445e:	4e2c      	.short	0x4e2c
 8004460:	5a4c      	.short	0x5a4c
 8004462:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004466:	441d      	add	r5, r3
 8004468:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800446c:	2b20      	cmp	r3, #32
 800446e:	bfc1      	itttt	gt
 8004470:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004474:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004478:	fa09 f303 	lslgt.w	r3, r9, r3
 800447c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004480:	bfda      	itte	le
 8004482:	f1c3 0320 	rsble	r3, r3, #32
 8004486:	fa06 f003 	lslle.w	r0, r6, r3
 800448a:	4318      	orrgt	r0, r3
 800448c:	f7fc f84a 	bl	8000524 <__aeabi_ui2d>
 8004490:	2301      	movs	r3, #1
 8004492:	4606      	mov	r6, r0
 8004494:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004498:	3d01      	subs	r5, #1
 800449a:	9310      	str	r3, [sp, #64]	; 0x40
 800449c:	e771      	b.n	8004382 <_dtoa_r+0x11a>
 800449e:	2301      	movs	r3, #1
 80044a0:	e7b6      	b.n	8004410 <_dtoa_r+0x1a8>
 80044a2:	900e      	str	r0, [sp, #56]	; 0x38
 80044a4:	e7b5      	b.n	8004412 <_dtoa_r+0x1aa>
 80044a6:	f1ca 0300 	rsb	r3, sl, #0
 80044aa:	9306      	str	r3, [sp, #24]
 80044ac:	2300      	movs	r3, #0
 80044ae:	eba8 080a 	sub.w	r8, r8, sl
 80044b2:	930d      	str	r3, [sp, #52]	; 0x34
 80044b4:	e7c2      	b.n	800443c <_dtoa_r+0x1d4>
 80044b6:	2300      	movs	r3, #0
 80044b8:	9308      	str	r3, [sp, #32]
 80044ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	dc39      	bgt.n	8004534 <_dtoa_r+0x2cc>
 80044c0:	f04f 0901 	mov.w	r9, #1
 80044c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80044c8:	464b      	mov	r3, r9
 80044ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80044ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80044d0:	2200      	movs	r2, #0
 80044d2:	6042      	str	r2, [r0, #4]
 80044d4:	2204      	movs	r2, #4
 80044d6:	f102 0614 	add.w	r6, r2, #20
 80044da:	429e      	cmp	r6, r3
 80044dc:	6841      	ldr	r1, [r0, #4]
 80044de:	d92f      	bls.n	8004540 <_dtoa_r+0x2d8>
 80044e0:	4620      	mov	r0, r4
 80044e2:	f000 fcc7 	bl	8004e74 <_Balloc>
 80044e6:	9000      	str	r0, [sp, #0]
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d14b      	bne.n	8004584 <_dtoa_r+0x31c>
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <_dtoa_r+0x318>)
 80044ee:	4602      	mov	r2, r0
 80044f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80044f4:	e6d1      	b.n	800429a <_dtoa_r+0x32>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e7de      	b.n	80044b8 <_dtoa_r+0x250>
 80044fa:	2300      	movs	r3, #0
 80044fc:	9308      	str	r3, [sp, #32]
 80044fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004500:	eb0a 0903 	add.w	r9, sl, r3
 8004504:	f109 0301 	add.w	r3, r9, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	bfb8      	it	lt
 800450e:	2301      	movlt	r3, #1
 8004510:	e7dd      	b.n	80044ce <_dtoa_r+0x266>
 8004512:	2301      	movs	r3, #1
 8004514:	e7f2      	b.n	80044fc <_dtoa_r+0x294>
 8004516:	2501      	movs	r5, #1
 8004518:	2300      	movs	r3, #0
 800451a:	9305      	str	r3, [sp, #20]
 800451c:	9508      	str	r5, [sp, #32]
 800451e:	f04f 39ff 	mov.w	r9, #4294967295
 8004522:	2200      	movs	r2, #0
 8004524:	f8cd 9004 	str.w	r9, [sp, #4]
 8004528:	2312      	movs	r3, #18
 800452a:	9209      	str	r2, [sp, #36]	; 0x24
 800452c:	e7cf      	b.n	80044ce <_dtoa_r+0x266>
 800452e:	2301      	movs	r3, #1
 8004530:	9308      	str	r3, [sp, #32]
 8004532:	e7f4      	b.n	800451e <_dtoa_r+0x2b6>
 8004534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004538:	f8cd 9004 	str.w	r9, [sp, #4]
 800453c:	464b      	mov	r3, r9
 800453e:	e7c6      	b.n	80044ce <_dtoa_r+0x266>
 8004540:	3101      	adds	r1, #1
 8004542:	6041      	str	r1, [r0, #4]
 8004544:	0052      	lsls	r2, r2, #1
 8004546:	e7c6      	b.n	80044d6 <_dtoa_r+0x26e>
 8004548:	636f4361 	.word	0x636f4361
 800454c:	3fd287a7 	.word	0x3fd287a7
 8004550:	8b60c8b3 	.word	0x8b60c8b3
 8004554:	3fc68a28 	.word	0x3fc68a28
 8004558:	509f79fb 	.word	0x509f79fb
 800455c:	3fd34413 	.word	0x3fd34413
 8004560:	08006665 	.word	0x08006665
 8004564:	0800667c 	.word	0x0800667c
 8004568:	7ff00000 	.word	0x7ff00000
 800456c:	08006661 	.word	0x08006661
 8004570:	08006658 	.word	0x08006658
 8004574:	08006635 	.word	0x08006635
 8004578:	3ff80000 	.word	0x3ff80000
 800457c:	08006778 	.word	0x08006778
 8004580:	080066db 	.word	0x080066db
 8004584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004586:	9a00      	ldr	r2, [sp, #0]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	2b0e      	cmp	r3, #14
 800458e:	f200 80ad 	bhi.w	80046ec <_dtoa_r+0x484>
 8004592:	2d00      	cmp	r5, #0
 8004594:	f000 80aa 	beq.w	80046ec <_dtoa_r+0x484>
 8004598:	f1ba 0f00 	cmp.w	sl, #0
 800459c:	dd36      	ble.n	800460c <_dtoa_r+0x3a4>
 800459e:	4ac3      	ldr	r2, [pc, #780]	; (80048ac <_dtoa_r+0x644>)
 80045a0:	f00a 030f 	and.w	r3, sl, #15
 80045a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80045a8:	ed93 7b00 	vldr	d7, [r3]
 80045ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80045b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80045b4:	eeb0 8a47 	vmov.f32	s16, s14
 80045b8:	eef0 8a67 	vmov.f32	s17, s15
 80045bc:	d016      	beq.n	80045ec <_dtoa_r+0x384>
 80045be:	4bbc      	ldr	r3, [pc, #752]	; (80048b0 <_dtoa_r+0x648>)
 80045c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045c8:	f7fc f950 	bl	800086c <__aeabi_ddiv>
 80045cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d0:	f007 070f 	and.w	r7, r7, #15
 80045d4:	2503      	movs	r5, #3
 80045d6:	4eb6      	ldr	r6, [pc, #728]	; (80048b0 <_dtoa_r+0x648>)
 80045d8:	b957      	cbnz	r7, 80045f0 <_dtoa_r+0x388>
 80045da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045de:	ec53 2b18 	vmov	r2, r3, d8
 80045e2:	f7fc f943 	bl	800086c <__aeabi_ddiv>
 80045e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ea:	e029      	b.n	8004640 <_dtoa_r+0x3d8>
 80045ec:	2502      	movs	r5, #2
 80045ee:	e7f2      	b.n	80045d6 <_dtoa_r+0x36e>
 80045f0:	07f9      	lsls	r1, r7, #31
 80045f2:	d508      	bpl.n	8004606 <_dtoa_r+0x39e>
 80045f4:	ec51 0b18 	vmov	r0, r1, d8
 80045f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80045fc:	f7fc f80c 	bl	8000618 <__aeabi_dmul>
 8004600:	ec41 0b18 	vmov	d8, r0, r1
 8004604:	3501      	adds	r5, #1
 8004606:	107f      	asrs	r7, r7, #1
 8004608:	3608      	adds	r6, #8
 800460a:	e7e5      	b.n	80045d8 <_dtoa_r+0x370>
 800460c:	f000 80a6 	beq.w	800475c <_dtoa_r+0x4f4>
 8004610:	f1ca 0600 	rsb	r6, sl, #0
 8004614:	4ba5      	ldr	r3, [pc, #660]	; (80048ac <_dtoa_r+0x644>)
 8004616:	4fa6      	ldr	r7, [pc, #664]	; (80048b0 <_dtoa_r+0x648>)
 8004618:	f006 020f 	and.w	r2, r6, #15
 800461c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004628:	f7fb fff6 	bl	8000618 <__aeabi_dmul>
 800462c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004630:	1136      	asrs	r6, r6, #4
 8004632:	2300      	movs	r3, #0
 8004634:	2502      	movs	r5, #2
 8004636:	2e00      	cmp	r6, #0
 8004638:	f040 8085 	bne.w	8004746 <_dtoa_r+0x4de>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1d2      	bne.n	80045e6 <_dtoa_r+0x37e>
 8004640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 808c 	beq.w	8004760 <_dtoa_r+0x4f8>
 8004648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800464c:	4b99      	ldr	r3, [pc, #612]	; (80048b4 <_dtoa_r+0x64c>)
 800464e:	2200      	movs	r2, #0
 8004650:	4630      	mov	r0, r6
 8004652:	4639      	mov	r1, r7
 8004654:	f7fc fa52 	bl	8000afc <__aeabi_dcmplt>
 8004658:	2800      	cmp	r0, #0
 800465a:	f000 8081 	beq.w	8004760 <_dtoa_r+0x4f8>
 800465e:	9b01      	ldr	r3, [sp, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d07d      	beq.n	8004760 <_dtoa_r+0x4f8>
 8004664:	f1b9 0f00 	cmp.w	r9, #0
 8004668:	dd3c      	ble.n	80046e4 <_dtoa_r+0x47c>
 800466a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800466e:	9307      	str	r3, [sp, #28]
 8004670:	2200      	movs	r2, #0
 8004672:	4b91      	ldr	r3, [pc, #580]	; (80048b8 <_dtoa_r+0x650>)
 8004674:	4630      	mov	r0, r6
 8004676:	4639      	mov	r1, r7
 8004678:	f7fb ffce 	bl	8000618 <__aeabi_dmul>
 800467c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004680:	3501      	adds	r5, #1
 8004682:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004686:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800468a:	4628      	mov	r0, r5
 800468c:	f7fb ff5a 	bl	8000544 <__aeabi_i2d>
 8004690:	4632      	mov	r2, r6
 8004692:	463b      	mov	r3, r7
 8004694:	f7fb ffc0 	bl	8000618 <__aeabi_dmul>
 8004698:	4b88      	ldr	r3, [pc, #544]	; (80048bc <_dtoa_r+0x654>)
 800469a:	2200      	movs	r2, #0
 800469c:	f7fb fe06 	bl	80002ac <__adddf3>
 80046a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80046a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046a8:	9303      	str	r3, [sp, #12]
 80046aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d15c      	bne.n	800476a <_dtoa_r+0x502>
 80046b0:	4b83      	ldr	r3, [pc, #524]	; (80048c0 <_dtoa_r+0x658>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	4630      	mov	r0, r6
 80046b6:	4639      	mov	r1, r7
 80046b8:	f7fb fdf6 	bl	80002a8 <__aeabi_dsub>
 80046bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046c0:	4606      	mov	r6, r0
 80046c2:	460f      	mov	r7, r1
 80046c4:	f7fc fa38 	bl	8000b38 <__aeabi_dcmpgt>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	f040 8296 	bne.w	8004bfa <_dtoa_r+0x992>
 80046ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80046d2:	4630      	mov	r0, r6
 80046d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046d8:	4639      	mov	r1, r7
 80046da:	f7fc fa0f 	bl	8000afc <__aeabi_dcmplt>
 80046de:	2800      	cmp	r0, #0
 80046e0:	f040 8288 	bne.w	8004bf4 <_dtoa_r+0x98c>
 80046e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f2c0 8158 	blt.w	80049a4 <_dtoa_r+0x73c>
 80046f4:	f1ba 0f0e 	cmp.w	sl, #14
 80046f8:	f300 8154 	bgt.w	80049a4 <_dtoa_r+0x73c>
 80046fc:	4b6b      	ldr	r3, [pc, #428]	; (80048ac <_dtoa_r+0x644>)
 80046fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004702:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	f280 80e3 	bge.w	80048d4 <_dtoa_r+0x66c>
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f300 80df 	bgt.w	80048d4 <_dtoa_r+0x66c>
 8004716:	f040 826d 	bne.w	8004bf4 <_dtoa_r+0x98c>
 800471a:	4b69      	ldr	r3, [pc, #420]	; (80048c0 <_dtoa_r+0x658>)
 800471c:	2200      	movs	r2, #0
 800471e:	4640      	mov	r0, r8
 8004720:	4649      	mov	r1, r9
 8004722:	f7fb ff79 	bl	8000618 <__aeabi_dmul>
 8004726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800472a:	f7fc f9fb 	bl	8000b24 <__aeabi_dcmpge>
 800472e:	9e01      	ldr	r6, [sp, #4]
 8004730:	4637      	mov	r7, r6
 8004732:	2800      	cmp	r0, #0
 8004734:	f040 8243 	bne.w	8004bbe <_dtoa_r+0x956>
 8004738:	9d00      	ldr	r5, [sp, #0]
 800473a:	2331      	movs	r3, #49	; 0x31
 800473c:	f805 3b01 	strb.w	r3, [r5], #1
 8004740:	f10a 0a01 	add.w	sl, sl, #1
 8004744:	e23f      	b.n	8004bc6 <_dtoa_r+0x95e>
 8004746:	07f2      	lsls	r2, r6, #31
 8004748:	d505      	bpl.n	8004756 <_dtoa_r+0x4ee>
 800474a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800474e:	f7fb ff63 	bl	8000618 <__aeabi_dmul>
 8004752:	3501      	adds	r5, #1
 8004754:	2301      	movs	r3, #1
 8004756:	1076      	asrs	r6, r6, #1
 8004758:	3708      	adds	r7, #8
 800475a:	e76c      	b.n	8004636 <_dtoa_r+0x3ce>
 800475c:	2502      	movs	r5, #2
 800475e:	e76f      	b.n	8004640 <_dtoa_r+0x3d8>
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	f8cd a01c 	str.w	sl, [sp, #28]
 8004766:	930c      	str	r3, [sp, #48]	; 0x30
 8004768:	e78d      	b.n	8004686 <_dtoa_r+0x41e>
 800476a:	9900      	ldr	r1, [sp, #0]
 800476c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800476e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004770:	4b4e      	ldr	r3, [pc, #312]	; (80048ac <_dtoa_r+0x644>)
 8004772:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004776:	4401      	add	r1, r0
 8004778:	9102      	str	r1, [sp, #8]
 800477a:	9908      	ldr	r1, [sp, #32]
 800477c:	eeb0 8a47 	vmov.f32	s16, s14
 8004780:	eef0 8a67 	vmov.f32	s17, s15
 8004784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800478c:	2900      	cmp	r1, #0
 800478e:	d045      	beq.n	800481c <_dtoa_r+0x5b4>
 8004790:	494c      	ldr	r1, [pc, #304]	; (80048c4 <_dtoa_r+0x65c>)
 8004792:	2000      	movs	r0, #0
 8004794:	f7fc f86a 	bl	800086c <__aeabi_ddiv>
 8004798:	ec53 2b18 	vmov	r2, r3, d8
 800479c:	f7fb fd84 	bl	80002a8 <__aeabi_dsub>
 80047a0:	9d00      	ldr	r5, [sp, #0]
 80047a2:	ec41 0b18 	vmov	d8, r0, r1
 80047a6:	4639      	mov	r1, r7
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7fc f9e5 	bl	8000b78 <__aeabi_d2iz>
 80047ae:	900c      	str	r0, [sp, #48]	; 0x30
 80047b0:	f7fb fec8 	bl	8000544 <__aeabi_i2d>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4630      	mov	r0, r6
 80047ba:	4639      	mov	r1, r7
 80047bc:	f7fb fd74 	bl	80002a8 <__aeabi_dsub>
 80047c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047c2:	3330      	adds	r3, #48	; 0x30
 80047c4:	f805 3b01 	strb.w	r3, [r5], #1
 80047c8:	ec53 2b18 	vmov	r2, r3, d8
 80047cc:	4606      	mov	r6, r0
 80047ce:	460f      	mov	r7, r1
 80047d0:	f7fc f994 	bl	8000afc <__aeabi_dcmplt>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d165      	bne.n	80048a4 <_dtoa_r+0x63c>
 80047d8:	4632      	mov	r2, r6
 80047da:	463b      	mov	r3, r7
 80047dc:	4935      	ldr	r1, [pc, #212]	; (80048b4 <_dtoa_r+0x64c>)
 80047de:	2000      	movs	r0, #0
 80047e0:	f7fb fd62 	bl	80002a8 <__aeabi_dsub>
 80047e4:	ec53 2b18 	vmov	r2, r3, d8
 80047e8:	f7fc f988 	bl	8000afc <__aeabi_dcmplt>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f040 80b9 	bne.w	8004964 <_dtoa_r+0x6fc>
 80047f2:	9b02      	ldr	r3, [sp, #8]
 80047f4:	429d      	cmp	r5, r3
 80047f6:	f43f af75 	beq.w	80046e4 <_dtoa_r+0x47c>
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <_dtoa_r+0x650>)
 80047fc:	ec51 0b18 	vmov	r0, r1, d8
 8004800:	2200      	movs	r2, #0
 8004802:	f7fb ff09 	bl	8000618 <__aeabi_dmul>
 8004806:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <_dtoa_r+0x650>)
 8004808:	ec41 0b18 	vmov	d8, r0, r1
 800480c:	2200      	movs	r2, #0
 800480e:	4630      	mov	r0, r6
 8004810:	4639      	mov	r1, r7
 8004812:	f7fb ff01 	bl	8000618 <__aeabi_dmul>
 8004816:	4606      	mov	r6, r0
 8004818:	460f      	mov	r7, r1
 800481a:	e7c4      	b.n	80047a6 <_dtoa_r+0x53e>
 800481c:	ec51 0b17 	vmov	r0, r1, d7
 8004820:	f7fb fefa 	bl	8000618 <__aeabi_dmul>
 8004824:	9b02      	ldr	r3, [sp, #8]
 8004826:	9d00      	ldr	r5, [sp, #0]
 8004828:	930c      	str	r3, [sp, #48]	; 0x30
 800482a:	ec41 0b18 	vmov	d8, r0, r1
 800482e:	4639      	mov	r1, r7
 8004830:	4630      	mov	r0, r6
 8004832:	f7fc f9a1 	bl	8000b78 <__aeabi_d2iz>
 8004836:	9011      	str	r0, [sp, #68]	; 0x44
 8004838:	f7fb fe84 	bl	8000544 <__aeabi_i2d>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4630      	mov	r0, r6
 8004842:	4639      	mov	r1, r7
 8004844:	f7fb fd30 	bl	80002a8 <__aeabi_dsub>
 8004848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800484a:	3330      	adds	r3, #48	; 0x30
 800484c:	f805 3b01 	strb.w	r3, [r5], #1
 8004850:	9b02      	ldr	r3, [sp, #8]
 8004852:	429d      	cmp	r5, r3
 8004854:	4606      	mov	r6, r0
 8004856:	460f      	mov	r7, r1
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	d134      	bne.n	80048c8 <_dtoa_r+0x660>
 800485e:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <_dtoa_r+0x65c>)
 8004860:	ec51 0b18 	vmov	r0, r1, d8
 8004864:	f7fb fd22 	bl	80002ac <__adddf3>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4630      	mov	r0, r6
 800486e:	4639      	mov	r1, r7
 8004870:	f7fc f962 	bl	8000b38 <__aeabi_dcmpgt>
 8004874:	2800      	cmp	r0, #0
 8004876:	d175      	bne.n	8004964 <_dtoa_r+0x6fc>
 8004878:	ec53 2b18 	vmov	r2, r3, d8
 800487c:	4911      	ldr	r1, [pc, #68]	; (80048c4 <_dtoa_r+0x65c>)
 800487e:	2000      	movs	r0, #0
 8004880:	f7fb fd12 	bl	80002a8 <__aeabi_dsub>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4630      	mov	r0, r6
 800488a:	4639      	mov	r1, r7
 800488c:	f7fc f936 	bl	8000afc <__aeabi_dcmplt>
 8004890:	2800      	cmp	r0, #0
 8004892:	f43f af27 	beq.w	80046e4 <_dtoa_r+0x47c>
 8004896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004898:	1e6b      	subs	r3, r5, #1
 800489a:	930c      	str	r3, [sp, #48]	; 0x30
 800489c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80048a0:	2b30      	cmp	r3, #48	; 0x30
 80048a2:	d0f8      	beq.n	8004896 <_dtoa_r+0x62e>
 80048a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80048a8:	e04a      	b.n	8004940 <_dtoa_r+0x6d8>
 80048aa:	bf00      	nop
 80048ac:	08006778 	.word	0x08006778
 80048b0:	08006750 	.word	0x08006750
 80048b4:	3ff00000 	.word	0x3ff00000
 80048b8:	40240000 	.word	0x40240000
 80048bc:	401c0000 	.word	0x401c0000
 80048c0:	40140000 	.word	0x40140000
 80048c4:	3fe00000 	.word	0x3fe00000
 80048c8:	4baf      	ldr	r3, [pc, #700]	; (8004b88 <_dtoa_r+0x920>)
 80048ca:	f7fb fea5 	bl	8000618 <__aeabi_dmul>
 80048ce:	4606      	mov	r6, r0
 80048d0:	460f      	mov	r7, r1
 80048d2:	e7ac      	b.n	800482e <_dtoa_r+0x5c6>
 80048d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048d8:	9d00      	ldr	r5, [sp, #0]
 80048da:	4642      	mov	r2, r8
 80048dc:	464b      	mov	r3, r9
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fb ffc3 	bl	800086c <__aeabi_ddiv>
 80048e6:	f7fc f947 	bl	8000b78 <__aeabi_d2iz>
 80048ea:	9002      	str	r0, [sp, #8]
 80048ec:	f7fb fe2a 	bl	8000544 <__aeabi_i2d>
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	f7fb fe90 	bl	8000618 <__aeabi_dmul>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4630      	mov	r0, r6
 80048fe:	4639      	mov	r1, r7
 8004900:	f7fb fcd2 	bl	80002a8 <__aeabi_dsub>
 8004904:	9e02      	ldr	r6, [sp, #8]
 8004906:	9f01      	ldr	r7, [sp, #4]
 8004908:	3630      	adds	r6, #48	; 0x30
 800490a:	f805 6b01 	strb.w	r6, [r5], #1
 800490e:	9e00      	ldr	r6, [sp, #0]
 8004910:	1bae      	subs	r6, r5, r6
 8004912:	42b7      	cmp	r7, r6
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	d137      	bne.n	800498a <_dtoa_r+0x722>
 800491a:	f7fb fcc7 	bl	80002ac <__adddf3>
 800491e:	4642      	mov	r2, r8
 8004920:	464b      	mov	r3, r9
 8004922:	4606      	mov	r6, r0
 8004924:	460f      	mov	r7, r1
 8004926:	f7fc f907 	bl	8000b38 <__aeabi_dcmpgt>
 800492a:	b9c8      	cbnz	r0, 8004960 <_dtoa_r+0x6f8>
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	4630      	mov	r0, r6
 8004932:	4639      	mov	r1, r7
 8004934:	f7fc f8d8 	bl	8000ae8 <__aeabi_dcmpeq>
 8004938:	b110      	cbz	r0, 8004940 <_dtoa_r+0x6d8>
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	07d9      	lsls	r1, r3, #31
 800493e:	d40f      	bmi.n	8004960 <_dtoa_r+0x6f8>
 8004940:	4620      	mov	r0, r4
 8004942:	4659      	mov	r1, fp
 8004944:	f000 fad6 	bl	8004ef4 <_Bfree>
 8004948:	2300      	movs	r3, #0
 800494a:	702b      	strb	r3, [r5, #0]
 800494c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800494e:	f10a 0001 	add.w	r0, sl, #1
 8004952:	6018      	str	r0, [r3, #0]
 8004954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004956:	2b00      	cmp	r3, #0
 8004958:	f43f acd8 	beq.w	800430c <_dtoa_r+0xa4>
 800495c:	601d      	str	r5, [r3, #0]
 800495e:	e4d5      	b.n	800430c <_dtoa_r+0xa4>
 8004960:	f8cd a01c 	str.w	sl, [sp, #28]
 8004964:	462b      	mov	r3, r5
 8004966:	461d      	mov	r5, r3
 8004968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800496c:	2a39      	cmp	r2, #57	; 0x39
 800496e:	d108      	bne.n	8004982 <_dtoa_r+0x71a>
 8004970:	9a00      	ldr	r2, [sp, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d1f7      	bne.n	8004966 <_dtoa_r+0x6fe>
 8004976:	9a07      	ldr	r2, [sp, #28]
 8004978:	9900      	ldr	r1, [sp, #0]
 800497a:	3201      	adds	r2, #1
 800497c:	9207      	str	r2, [sp, #28]
 800497e:	2230      	movs	r2, #48	; 0x30
 8004980:	700a      	strb	r2, [r1, #0]
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	3201      	adds	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e78c      	b.n	80048a4 <_dtoa_r+0x63c>
 800498a:	4b7f      	ldr	r3, [pc, #508]	; (8004b88 <_dtoa_r+0x920>)
 800498c:	2200      	movs	r2, #0
 800498e:	f7fb fe43 	bl	8000618 <__aeabi_dmul>
 8004992:	2200      	movs	r2, #0
 8004994:	2300      	movs	r3, #0
 8004996:	4606      	mov	r6, r0
 8004998:	460f      	mov	r7, r1
 800499a:	f7fc f8a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d09b      	beq.n	80048da <_dtoa_r+0x672>
 80049a2:	e7cd      	b.n	8004940 <_dtoa_r+0x6d8>
 80049a4:	9a08      	ldr	r2, [sp, #32]
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	f000 80c4 	beq.w	8004b34 <_dtoa_r+0x8cc>
 80049ac:	9a05      	ldr	r2, [sp, #20]
 80049ae:	2a01      	cmp	r2, #1
 80049b0:	f300 80a8 	bgt.w	8004b04 <_dtoa_r+0x89c>
 80049b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	f000 80a0 	beq.w	8004afc <_dtoa_r+0x894>
 80049bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80049c0:	9e06      	ldr	r6, [sp, #24]
 80049c2:	4645      	mov	r5, r8
 80049c4:	9a04      	ldr	r2, [sp, #16]
 80049c6:	2101      	movs	r1, #1
 80049c8:	441a      	add	r2, r3
 80049ca:	4620      	mov	r0, r4
 80049cc:	4498      	add	r8, r3
 80049ce:	9204      	str	r2, [sp, #16]
 80049d0:	f000 fb4c 	bl	800506c <__i2b>
 80049d4:	4607      	mov	r7, r0
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	dd0b      	ble.n	80049f2 <_dtoa_r+0x78a>
 80049da:	9b04      	ldr	r3, [sp, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dd08      	ble.n	80049f2 <_dtoa_r+0x78a>
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	9a04      	ldr	r2, [sp, #16]
 80049e4:	bfa8      	it	ge
 80049e6:	462b      	movge	r3, r5
 80049e8:	eba8 0803 	sub.w	r8, r8, r3
 80049ec:	1aed      	subs	r5, r5, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9b06      	ldr	r3, [sp, #24]
 80049f4:	b1fb      	cbz	r3, 8004a36 <_dtoa_r+0x7ce>
 80049f6:	9b08      	ldr	r3, [sp, #32]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 809f 	beq.w	8004b3c <_dtoa_r+0x8d4>
 80049fe:	2e00      	cmp	r6, #0
 8004a00:	dd11      	ble.n	8004a26 <_dtoa_r+0x7be>
 8004a02:	4639      	mov	r1, r7
 8004a04:	4632      	mov	r2, r6
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 fbec 	bl	80051e4 <__pow5mult>
 8004a0c:	465a      	mov	r2, fp
 8004a0e:	4601      	mov	r1, r0
 8004a10:	4607      	mov	r7, r0
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 fb40 	bl	8005098 <__multiply>
 8004a18:	4659      	mov	r1, fp
 8004a1a:	9007      	str	r0, [sp, #28]
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f000 fa69 	bl	8004ef4 <_Bfree>
 8004a22:	9b07      	ldr	r3, [sp, #28]
 8004a24:	469b      	mov	fp, r3
 8004a26:	9b06      	ldr	r3, [sp, #24]
 8004a28:	1b9a      	subs	r2, r3, r6
 8004a2a:	d004      	beq.n	8004a36 <_dtoa_r+0x7ce>
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f000 fbd8 	bl	80051e4 <__pow5mult>
 8004a34:	4683      	mov	fp, r0
 8004a36:	2101      	movs	r1, #1
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 fb17 	bl	800506c <__i2b>
 8004a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	4606      	mov	r6, r0
 8004a44:	dd7c      	ble.n	8004b40 <_dtoa_r+0x8d8>
 8004a46:	461a      	mov	r2, r3
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 fbca 	bl	80051e4 <__pow5mult>
 8004a50:	9b05      	ldr	r3, [sp, #20]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	4606      	mov	r6, r0
 8004a56:	dd76      	ble.n	8004b46 <_dtoa_r+0x8de>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9306      	str	r3, [sp, #24]
 8004a5c:	6933      	ldr	r3, [r6, #16]
 8004a5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a62:	6918      	ldr	r0, [r3, #16]
 8004a64:	f000 fab2 	bl	8004fcc <__hi0bits>
 8004a68:	f1c0 0020 	rsb	r0, r0, #32
 8004a6c:	9b04      	ldr	r3, [sp, #16]
 8004a6e:	4418      	add	r0, r3
 8004a70:	f010 001f 	ands.w	r0, r0, #31
 8004a74:	f000 8086 	beq.w	8004b84 <_dtoa_r+0x91c>
 8004a78:	f1c0 0320 	rsb	r3, r0, #32
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	dd7f      	ble.n	8004b80 <_dtoa_r+0x918>
 8004a80:	f1c0 001c 	rsb	r0, r0, #28
 8004a84:	9b04      	ldr	r3, [sp, #16]
 8004a86:	4403      	add	r3, r0
 8004a88:	4480      	add	r8, r0
 8004a8a:	4405      	add	r5, r0
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	f1b8 0f00 	cmp.w	r8, #0
 8004a92:	dd05      	ble.n	8004aa0 <_dtoa_r+0x838>
 8004a94:	4659      	mov	r1, fp
 8004a96:	4642      	mov	r2, r8
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 fbfd 	bl	8005298 <__lshift>
 8004a9e:	4683      	mov	fp, r0
 8004aa0:	9b04      	ldr	r3, [sp, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dd05      	ble.n	8004ab2 <_dtoa_r+0x84a>
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f000 fbf4 	bl	8005298 <__lshift>
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d069      	beq.n	8004b8c <_dtoa_r+0x924>
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4658      	mov	r0, fp
 8004abc:	f000 fc58 	bl	8005370 <__mcmp>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	da63      	bge.n	8004b8c <_dtoa_r+0x924>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	220a      	movs	r2, #10
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 fa34 	bl	8004f38 <__multadd>
 8004ad0:	9b08      	ldr	r3, [sp, #32]
 8004ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ad6:	4683      	mov	fp, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 818f 	beq.w	8004dfc <_dtoa_r+0xb94>
 8004ade:	4639      	mov	r1, r7
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	220a      	movs	r2, #10
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f000 fa27 	bl	8004f38 <__multadd>
 8004aea:	f1b9 0f00 	cmp.w	r9, #0
 8004aee:	4607      	mov	r7, r0
 8004af0:	f300 808e 	bgt.w	8004c10 <_dtoa_r+0x9a8>
 8004af4:	9b05      	ldr	r3, [sp, #20]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	dc50      	bgt.n	8004b9c <_dtoa_r+0x934>
 8004afa:	e089      	b.n	8004c10 <_dtoa_r+0x9a8>
 8004afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b02:	e75d      	b.n	80049c0 <_dtoa_r+0x758>
 8004b04:	9b01      	ldr	r3, [sp, #4]
 8004b06:	1e5e      	subs	r6, r3, #1
 8004b08:	9b06      	ldr	r3, [sp, #24]
 8004b0a:	42b3      	cmp	r3, r6
 8004b0c:	bfbf      	itttt	lt
 8004b0e:	9b06      	ldrlt	r3, [sp, #24]
 8004b10:	9606      	strlt	r6, [sp, #24]
 8004b12:	1af2      	sublt	r2, r6, r3
 8004b14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004b16:	bfb6      	itet	lt
 8004b18:	189b      	addlt	r3, r3, r2
 8004b1a:	1b9e      	subge	r6, r3, r6
 8004b1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	bfb8      	it	lt
 8004b22:	2600      	movlt	r6, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bfb5      	itete	lt
 8004b28:	eba8 0503 	sublt.w	r5, r8, r3
 8004b2c:	9b01      	ldrge	r3, [sp, #4]
 8004b2e:	2300      	movlt	r3, #0
 8004b30:	4645      	movge	r5, r8
 8004b32:	e747      	b.n	80049c4 <_dtoa_r+0x75c>
 8004b34:	9e06      	ldr	r6, [sp, #24]
 8004b36:	9f08      	ldr	r7, [sp, #32]
 8004b38:	4645      	mov	r5, r8
 8004b3a:	e74c      	b.n	80049d6 <_dtoa_r+0x76e>
 8004b3c:	9a06      	ldr	r2, [sp, #24]
 8004b3e:	e775      	b.n	8004a2c <_dtoa_r+0x7c4>
 8004b40:	9b05      	ldr	r3, [sp, #20]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	dc18      	bgt.n	8004b78 <_dtoa_r+0x910>
 8004b46:	9b02      	ldr	r3, [sp, #8]
 8004b48:	b9b3      	cbnz	r3, 8004b78 <_dtoa_r+0x910>
 8004b4a:	9b03      	ldr	r3, [sp, #12]
 8004b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b50:	b9a3      	cbnz	r3, 8004b7c <_dtoa_r+0x914>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	051b      	lsls	r3, r3, #20
 8004b5c:	b12b      	cbz	r3, 8004b6a <_dtoa_r+0x902>
 8004b5e:	9b04      	ldr	r3, [sp, #16]
 8004b60:	3301      	adds	r3, #1
 8004b62:	9304      	str	r3, [sp, #16]
 8004b64:	f108 0801 	add.w	r8, r8, #1
 8004b68:	2301      	movs	r3, #1
 8004b6a:	9306      	str	r3, [sp, #24]
 8004b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f47f af74 	bne.w	8004a5c <_dtoa_r+0x7f4>
 8004b74:	2001      	movs	r0, #1
 8004b76:	e779      	b.n	8004a6c <_dtoa_r+0x804>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e7f6      	b.n	8004b6a <_dtoa_r+0x902>
 8004b7c:	9b02      	ldr	r3, [sp, #8]
 8004b7e:	e7f4      	b.n	8004b6a <_dtoa_r+0x902>
 8004b80:	d085      	beq.n	8004a8e <_dtoa_r+0x826>
 8004b82:	4618      	mov	r0, r3
 8004b84:	301c      	adds	r0, #28
 8004b86:	e77d      	b.n	8004a84 <_dtoa_r+0x81c>
 8004b88:	40240000 	.word	0x40240000
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dc38      	bgt.n	8004c04 <_dtoa_r+0x99c>
 8004b92:	9b05      	ldr	r3, [sp, #20]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	dd35      	ble.n	8004c04 <_dtoa_r+0x99c>
 8004b98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004b9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ba0:	d10d      	bne.n	8004bbe <_dtoa_r+0x956>
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 f9c5 	bl	8004f38 <__multadd>
 8004bae:	4601      	mov	r1, r0
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	4658      	mov	r0, fp
 8004bb4:	f000 fbdc 	bl	8005370 <__mcmp>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	f73f adbd 	bgt.w	8004738 <_dtoa_r+0x4d0>
 8004bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc0:	9d00      	ldr	r5, [sp, #0]
 8004bc2:	ea6f 0a03 	mvn.w	sl, r3
 8004bc6:	f04f 0800 	mov.w	r8, #0
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f000 f991 	bl	8004ef4 <_Bfree>
 8004bd2:	2f00      	cmp	r7, #0
 8004bd4:	f43f aeb4 	beq.w	8004940 <_dtoa_r+0x6d8>
 8004bd8:	f1b8 0f00 	cmp.w	r8, #0
 8004bdc:	d005      	beq.n	8004bea <_dtoa_r+0x982>
 8004bde:	45b8      	cmp	r8, r7
 8004be0:	d003      	beq.n	8004bea <_dtoa_r+0x982>
 8004be2:	4641      	mov	r1, r8
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 f985 	bl	8004ef4 <_Bfree>
 8004bea:	4639      	mov	r1, r7
 8004bec:	4620      	mov	r0, r4
 8004bee:	f000 f981 	bl	8004ef4 <_Bfree>
 8004bf2:	e6a5      	b.n	8004940 <_dtoa_r+0x6d8>
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	4637      	mov	r7, r6
 8004bf8:	e7e1      	b.n	8004bbe <_dtoa_r+0x956>
 8004bfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004bfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004c00:	4637      	mov	r7, r6
 8004c02:	e599      	b.n	8004738 <_dtoa_r+0x4d0>
 8004c04:	9b08      	ldr	r3, [sp, #32]
 8004c06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80fd 	beq.w	8004e0a <_dtoa_r+0xba2>
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	dd05      	ble.n	8004c20 <_dtoa_r+0x9b8>
 8004c14:	4639      	mov	r1, r7
 8004c16:	462a      	mov	r2, r5
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 fb3d 	bl	8005298 <__lshift>
 8004c1e:	4607      	mov	r7, r0
 8004c20:	9b06      	ldr	r3, [sp, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d05c      	beq.n	8004ce0 <_dtoa_r+0xa78>
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 f923 	bl	8004e74 <_Balloc>
 8004c2e:	4605      	mov	r5, r0
 8004c30:	b928      	cbnz	r0, 8004c3e <_dtoa_r+0x9d6>
 8004c32:	4b80      	ldr	r3, [pc, #512]	; (8004e34 <_dtoa_r+0xbcc>)
 8004c34:	4602      	mov	r2, r0
 8004c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004c3a:	f7ff bb2e 	b.w	800429a <_dtoa_r+0x32>
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	3202      	adds	r2, #2
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	f107 010c 	add.w	r1, r7, #12
 8004c48:	300c      	adds	r0, #12
 8004c4a:	f000 f905 	bl	8004e58 <memcpy>
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4629      	mov	r1, r5
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 fb20 	bl	8005298 <__lshift>
 8004c58:	9b00      	ldr	r3, [sp, #0]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	9b00      	ldr	r3, [sp, #0]
 8004c60:	444b      	add	r3, r9
 8004c62:	9307      	str	r3, [sp, #28]
 8004c64:	9b02      	ldr	r3, [sp, #8]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	46b8      	mov	r8, r7
 8004c6c:	9306      	str	r3, [sp, #24]
 8004c6e:	4607      	mov	r7, r0
 8004c70:	9b01      	ldr	r3, [sp, #4]
 8004c72:	4631      	mov	r1, r6
 8004c74:	3b01      	subs	r3, #1
 8004c76:	4658      	mov	r0, fp
 8004c78:	9302      	str	r3, [sp, #8]
 8004c7a:	f7ff fa67 	bl	800414c <quorem>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	3330      	adds	r3, #48	; 0x30
 8004c82:	9004      	str	r0, [sp, #16]
 8004c84:	4641      	mov	r1, r8
 8004c86:	4658      	mov	r0, fp
 8004c88:	9308      	str	r3, [sp, #32]
 8004c8a:	f000 fb71 	bl	8005370 <__mcmp>
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4681      	mov	r9, r0
 8004c92:	4631      	mov	r1, r6
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 fb87 	bl	80053a8 <__mdiff>
 8004c9a:	68c2      	ldr	r2, [r0, #12]
 8004c9c:	9b08      	ldr	r3, [sp, #32]
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	bb02      	cbnz	r2, 8004ce4 <_dtoa_r+0xa7c>
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	4658      	mov	r0, fp
 8004ca6:	f000 fb63 	bl	8005370 <__mcmp>
 8004caa:	9b08      	ldr	r3, [sp, #32]
 8004cac:	4602      	mov	r2, r0
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004cb6:	f000 f91d 	bl	8004ef4 <_Bfree>
 8004cba:	9b05      	ldr	r3, [sp, #20]
 8004cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cbe:	9d01      	ldr	r5, [sp, #4]
 8004cc0:	ea43 0102 	orr.w	r1, r3, r2
 8004cc4:	9b06      	ldr	r3, [sp, #24]
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	9b08      	ldr	r3, [sp, #32]
 8004cca:	d10d      	bne.n	8004ce8 <_dtoa_r+0xa80>
 8004ccc:	2b39      	cmp	r3, #57	; 0x39
 8004cce:	d029      	beq.n	8004d24 <_dtoa_r+0xabc>
 8004cd0:	f1b9 0f00 	cmp.w	r9, #0
 8004cd4:	dd01      	ble.n	8004cda <_dtoa_r+0xa72>
 8004cd6:	9b04      	ldr	r3, [sp, #16]
 8004cd8:	3331      	adds	r3, #49	; 0x31
 8004cda:	9a02      	ldr	r2, [sp, #8]
 8004cdc:	7013      	strb	r3, [r2, #0]
 8004cde:	e774      	b.n	8004bca <_dtoa_r+0x962>
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	e7b9      	b.n	8004c58 <_dtoa_r+0x9f0>
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	e7e2      	b.n	8004cae <_dtoa_r+0xa46>
 8004ce8:	f1b9 0f00 	cmp.w	r9, #0
 8004cec:	db06      	blt.n	8004cfc <_dtoa_r+0xa94>
 8004cee:	9905      	ldr	r1, [sp, #20]
 8004cf0:	ea41 0909 	orr.w	r9, r1, r9
 8004cf4:	9906      	ldr	r1, [sp, #24]
 8004cf6:	ea59 0101 	orrs.w	r1, r9, r1
 8004cfa:	d120      	bne.n	8004d3e <_dtoa_r+0xad6>
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	ddec      	ble.n	8004cda <_dtoa_r+0xa72>
 8004d00:	4659      	mov	r1, fp
 8004d02:	2201      	movs	r2, #1
 8004d04:	4620      	mov	r0, r4
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	f000 fac6 	bl	8005298 <__lshift>
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4683      	mov	fp, r0
 8004d10:	f000 fb2e 	bl	8005370 <__mcmp>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	dc02      	bgt.n	8004d20 <_dtoa_r+0xab8>
 8004d1a:	d1de      	bne.n	8004cda <_dtoa_r+0xa72>
 8004d1c:	07da      	lsls	r2, r3, #31
 8004d1e:	d5dc      	bpl.n	8004cda <_dtoa_r+0xa72>
 8004d20:	2b39      	cmp	r3, #57	; 0x39
 8004d22:	d1d8      	bne.n	8004cd6 <_dtoa_r+0xa6e>
 8004d24:	9a02      	ldr	r2, [sp, #8]
 8004d26:	2339      	movs	r3, #57	; 0x39
 8004d28:	7013      	strb	r3, [r2, #0]
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	461d      	mov	r5, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d34:	2a39      	cmp	r2, #57	; 0x39
 8004d36:	d050      	beq.n	8004dda <_dtoa_r+0xb72>
 8004d38:	3201      	adds	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	e745      	b.n	8004bca <_dtoa_r+0x962>
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	dd03      	ble.n	8004d4a <_dtoa_r+0xae2>
 8004d42:	2b39      	cmp	r3, #57	; 0x39
 8004d44:	d0ee      	beq.n	8004d24 <_dtoa_r+0xabc>
 8004d46:	3301      	adds	r3, #1
 8004d48:	e7c7      	b.n	8004cda <_dtoa_r+0xa72>
 8004d4a:	9a01      	ldr	r2, [sp, #4]
 8004d4c:	9907      	ldr	r1, [sp, #28]
 8004d4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d52:	428a      	cmp	r2, r1
 8004d54:	d02a      	beq.n	8004dac <_dtoa_r+0xb44>
 8004d56:	4659      	mov	r1, fp
 8004d58:	2300      	movs	r3, #0
 8004d5a:	220a      	movs	r2, #10
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 f8eb 	bl	8004f38 <__multadd>
 8004d62:	45b8      	cmp	r8, r7
 8004d64:	4683      	mov	fp, r0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f04f 020a 	mov.w	r2, #10
 8004d6e:	4641      	mov	r1, r8
 8004d70:	4620      	mov	r0, r4
 8004d72:	d107      	bne.n	8004d84 <_dtoa_r+0xb1c>
 8004d74:	f000 f8e0 	bl	8004f38 <__multadd>
 8004d78:	4680      	mov	r8, r0
 8004d7a:	4607      	mov	r7, r0
 8004d7c:	9b01      	ldr	r3, [sp, #4]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	e775      	b.n	8004c70 <_dtoa_r+0xa08>
 8004d84:	f000 f8d8 	bl	8004f38 <__multadd>
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4680      	mov	r8, r0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	220a      	movs	r2, #10
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 f8d1 	bl	8004f38 <__multadd>
 8004d96:	4607      	mov	r7, r0
 8004d98:	e7f0      	b.n	8004d7c <_dtoa_r+0xb14>
 8004d9a:	f1b9 0f00 	cmp.w	r9, #0
 8004d9e:	9a00      	ldr	r2, [sp, #0]
 8004da0:	bfcc      	ite	gt
 8004da2:	464d      	movgt	r5, r9
 8004da4:	2501      	movle	r5, #1
 8004da6:	4415      	add	r5, r2
 8004da8:	f04f 0800 	mov.w	r8, #0
 8004dac:	4659      	mov	r1, fp
 8004dae:	2201      	movs	r2, #1
 8004db0:	4620      	mov	r0, r4
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	f000 fa70 	bl	8005298 <__lshift>
 8004db8:	4631      	mov	r1, r6
 8004dba:	4683      	mov	fp, r0
 8004dbc:	f000 fad8 	bl	8005370 <__mcmp>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	dcb2      	bgt.n	8004d2a <_dtoa_r+0xac2>
 8004dc4:	d102      	bne.n	8004dcc <_dtoa_r+0xb64>
 8004dc6:	9b01      	ldr	r3, [sp, #4]
 8004dc8:	07db      	lsls	r3, r3, #31
 8004dca:	d4ae      	bmi.n	8004d2a <_dtoa_r+0xac2>
 8004dcc:	462b      	mov	r3, r5
 8004dce:	461d      	mov	r5, r3
 8004dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dd4:	2a30      	cmp	r2, #48	; 0x30
 8004dd6:	d0fa      	beq.n	8004dce <_dtoa_r+0xb66>
 8004dd8:	e6f7      	b.n	8004bca <_dtoa_r+0x962>
 8004dda:	9a00      	ldr	r2, [sp, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1a5      	bne.n	8004d2c <_dtoa_r+0xac4>
 8004de0:	f10a 0a01 	add.w	sl, sl, #1
 8004de4:	2331      	movs	r3, #49	; 0x31
 8004de6:	e779      	b.n	8004cdc <_dtoa_r+0xa74>
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <_dtoa_r+0xbd0>)
 8004dea:	f7ff baaf 	b.w	800434c <_dtoa_r+0xe4>
 8004dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f aa86 	bne.w	8004302 <_dtoa_r+0x9a>
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <_dtoa_r+0xbd4>)
 8004df8:	f7ff baa8 	b.w	800434c <_dtoa_r+0xe4>
 8004dfc:	f1b9 0f00 	cmp.w	r9, #0
 8004e00:	dc03      	bgt.n	8004e0a <_dtoa_r+0xba2>
 8004e02:	9b05      	ldr	r3, [sp, #20]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	f73f aec9 	bgt.w	8004b9c <_dtoa_r+0x934>
 8004e0a:	9d00      	ldr	r5, [sp, #0]
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4658      	mov	r0, fp
 8004e10:	f7ff f99c 	bl	800414c <quorem>
 8004e14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004e18:	f805 3b01 	strb.w	r3, [r5], #1
 8004e1c:	9a00      	ldr	r2, [sp, #0]
 8004e1e:	1aaa      	subs	r2, r5, r2
 8004e20:	4591      	cmp	r9, r2
 8004e22:	ddba      	ble.n	8004d9a <_dtoa_r+0xb32>
 8004e24:	4659      	mov	r1, fp
 8004e26:	2300      	movs	r3, #0
 8004e28:	220a      	movs	r2, #10
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 f884 	bl	8004f38 <__multadd>
 8004e30:	4683      	mov	fp, r0
 8004e32:	e7eb      	b.n	8004e0c <_dtoa_r+0xba4>
 8004e34:	080066db 	.word	0x080066db
 8004e38:	08006634 	.word	0x08006634
 8004e3c:	08006658 	.word	0x08006658

08004e40 <_localeconv_r>:
 8004e40:	4800      	ldr	r0, [pc, #0]	; (8004e44 <_localeconv_r+0x4>)
 8004e42:	4770      	bx	lr
 8004e44:	2000015c 	.word	0x2000015c

08004e48 <malloc>:
 8004e48:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <malloc+0xc>)
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	f000 bbef 	b.w	8005630 <_malloc_r>
 8004e52:	bf00      	nop
 8004e54:	20000008 	.word	0x20000008

08004e58 <memcpy>:
 8004e58:	440a      	add	r2, r1
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e60:	d100      	bne.n	8004e64 <memcpy+0xc>
 8004e62:	4770      	bx	lr
 8004e64:	b510      	push	{r4, lr}
 8004e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e6e:	4291      	cmp	r1, r2
 8004e70:	d1f9      	bne.n	8004e66 <memcpy+0xe>
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <_Balloc>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e78:	4604      	mov	r4, r0
 8004e7a:	460d      	mov	r5, r1
 8004e7c:	b976      	cbnz	r6, 8004e9c <_Balloc+0x28>
 8004e7e:	2010      	movs	r0, #16
 8004e80:	f7ff ffe2 	bl	8004e48 <malloc>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6260      	str	r0, [r4, #36]	; 0x24
 8004e88:	b920      	cbnz	r0, 8004e94 <_Balloc+0x20>
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <_Balloc+0x78>)
 8004e8c:	4818      	ldr	r0, [pc, #96]	; (8004ef0 <_Balloc+0x7c>)
 8004e8e:	2166      	movs	r1, #102	; 0x66
 8004e90:	f000 fd94 	bl	80059bc <__assert_func>
 8004e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e98:	6006      	str	r6, [r0, #0]
 8004e9a:	60c6      	str	r6, [r0, #12]
 8004e9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e9e:	68f3      	ldr	r3, [r6, #12]
 8004ea0:	b183      	cbz	r3, 8004ec4 <_Balloc+0x50>
 8004ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004eaa:	b9b8      	cbnz	r0, 8004edc <_Balloc+0x68>
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f605 	lsl.w	r6, r1, r5
 8004eb2:	1d72      	adds	r2, r6, #5
 8004eb4:	0092      	lsls	r2, r2, #2
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 fb5a 	bl	8005570 <_calloc_r>
 8004ebc:	b160      	cbz	r0, 8004ed8 <_Balloc+0x64>
 8004ebe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ec2:	e00e      	b.n	8004ee2 <_Balloc+0x6e>
 8004ec4:	2221      	movs	r2, #33	; 0x21
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f000 fb51 	bl	8005570 <_calloc_r>
 8004ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed0:	60f0      	str	r0, [r6, #12]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e4      	bne.n	8004ea2 <_Balloc+0x2e>
 8004ed8:	2000      	movs	r0, #0
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	6802      	ldr	r2, [r0, #0]
 8004ede:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ee8:	e7f7      	b.n	8004eda <_Balloc+0x66>
 8004eea:	bf00      	nop
 8004eec:	08006665 	.word	0x08006665
 8004ef0:	080066ec 	.word	0x080066ec

08004ef4 <_Bfree>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ef8:	4605      	mov	r5, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b976      	cbnz	r6, 8004f1c <_Bfree+0x28>
 8004efe:	2010      	movs	r0, #16
 8004f00:	f7ff ffa2 	bl	8004e48 <malloc>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6268      	str	r0, [r5, #36]	; 0x24
 8004f08:	b920      	cbnz	r0, 8004f14 <_Bfree+0x20>
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <_Bfree+0x3c>)
 8004f0c:	4809      	ldr	r0, [pc, #36]	; (8004f34 <_Bfree+0x40>)
 8004f0e:	218a      	movs	r1, #138	; 0x8a
 8004f10:	f000 fd54 	bl	80059bc <__assert_func>
 8004f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f18:	6006      	str	r6, [r0, #0]
 8004f1a:	60c6      	str	r6, [r0, #12]
 8004f1c:	b13c      	cbz	r4, 8004f2e <_Bfree+0x3a>
 8004f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f20:	6862      	ldr	r2, [r4, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f28:	6021      	str	r1, [r4, #0]
 8004f2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	08006665 	.word	0x08006665
 8004f34:	080066ec 	.word	0x080066ec

08004f38 <__multadd>:
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	690e      	ldr	r6, [r1, #16]
 8004f3e:	4607      	mov	r7, r0
 8004f40:	4698      	mov	r8, r3
 8004f42:	460c      	mov	r4, r1
 8004f44:	f101 0014 	add.w	r0, r1, #20
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6805      	ldr	r5, [r0, #0]
 8004f4c:	b2a9      	uxth	r1, r5
 8004f4e:	fb02 8101 	mla	r1, r2, r1, r8
 8004f52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004f56:	0c2d      	lsrs	r5, r5, #16
 8004f58:	fb02 c505 	mla	r5, r2, r5, ip
 8004f5c:	b289      	uxth	r1, r1
 8004f5e:	3301      	adds	r3, #1
 8004f60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004f64:	429e      	cmp	r6, r3
 8004f66:	f840 1b04 	str.w	r1, [r0], #4
 8004f6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004f6e:	dcec      	bgt.n	8004f4a <__multadd+0x12>
 8004f70:	f1b8 0f00 	cmp.w	r8, #0
 8004f74:	d022      	beq.n	8004fbc <__multadd+0x84>
 8004f76:	68a3      	ldr	r3, [r4, #8]
 8004f78:	42b3      	cmp	r3, r6
 8004f7a:	dc19      	bgt.n	8004fb0 <__multadd+0x78>
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	4638      	mov	r0, r7
 8004f80:	3101      	adds	r1, #1
 8004f82:	f7ff ff77 	bl	8004e74 <_Balloc>
 8004f86:	4605      	mov	r5, r0
 8004f88:	b928      	cbnz	r0, 8004f96 <__multadd+0x5e>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <__multadd+0x8c>)
 8004f8e:	480e      	ldr	r0, [pc, #56]	; (8004fc8 <__multadd+0x90>)
 8004f90:	21b5      	movs	r1, #181	; 0xb5
 8004f92:	f000 fd13 	bl	80059bc <__assert_func>
 8004f96:	6922      	ldr	r2, [r4, #16]
 8004f98:	3202      	adds	r2, #2
 8004f9a:	f104 010c 	add.w	r1, r4, #12
 8004f9e:	0092      	lsls	r2, r2, #2
 8004fa0:	300c      	adds	r0, #12
 8004fa2:	f7ff ff59 	bl	8004e58 <memcpy>
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff ffa3 	bl	8004ef4 <_Bfree>
 8004fae:	462c      	mov	r4, r5
 8004fb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	f8c3 8014 	str.w	r8, [r3, #20]
 8004fba:	6126      	str	r6, [r4, #16]
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc2:	bf00      	nop
 8004fc4:	080066db 	.word	0x080066db
 8004fc8:	080066ec 	.word	0x080066ec

08004fcc <__hi0bits>:
 8004fcc:	0c03      	lsrs	r3, r0, #16
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	b9d3      	cbnz	r3, 8005008 <__hi0bits+0x3c>
 8004fd2:	0400      	lsls	r0, r0, #16
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004fda:	bf04      	itt	eq
 8004fdc:	0200      	lsleq	r0, r0, #8
 8004fde:	3308      	addeq	r3, #8
 8004fe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004fe4:	bf04      	itt	eq
 8004fe6:	0100      	lsleq	r0, r0, #4
 8004fe8:	3304      	addeq	r3, #4
 8004fea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004fee:	bf04      	itt	eq
 8004ff0:	0080      	lsleq	r0, r0, #2
 8004ff2:	3302      	addeq	r3, #2
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	db05      	blt.n	8005004 <__hi0bits+0x38>
 8004ff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004ffc:	f103 0301 	add.w	r3, r3, #1
 8005000:	bf08      	it	eq
 8005002:	2320      	moveq	r3, #32
 8005004:	4618      	mov	r0, r3
 8005006:	4770      	bx	lr
 8005008:	2300      	movs	r3, #0
 800500a:	e7e4      	b.n	8004fd6 <__hi0bits+0xa>

0800500c <__lo0bits>:
 800500c:	6803      	ldr	r3, [r0, #0]
 800500e:	f013 0207 	ands.w	r2, r3, #7
 8005012:	4601      	mov	r1, r0
 8005014:	d00b      	beq.n	800502e <__lo0bits+0x22>
 8005016:	07da      	lsls	r2, r3, #31
 8005018:	d424      	bmi.n	8005064 <__lo0bits+0x58>
 800501a:	0798      	lsls	r0, r3, #30
 800501c:	bf49      	itett	mi
 800501e:	085b      	lsrmi	r3, r3, #1
 8005020:	089b      	lsrpl	r3, r3, #2
 8005022:	2001      	movmi	r0, #1
 8005024:	600b      	strmi	r3, [r1, #0]
 8005026:	bf5c      	itt	pl
 8005028:	600b      	strpl	r3, [r1, #0]
 800502a:	2002      	movpl	r0, #2
 800502c:	4770      	bx	lr
 800502e:	b298      	uxth	r0, r3
 8005030:	b9b0      	cbnz	r0, 8005060 <__lo0bits+0x54>
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	2010      	movs	r0, #16
 8005036:	f013 0fff 	tst.w	r3, #255	; 0xff
 800503a:	bf04      	itt	eq
 800503c:	0a1b      	lsreq	r3, r3, #8
 800503e:	3008      	addeq	r0, #8
 8005040:	071a      	lsls	r2, r3, #28
 8005042:	bf04      	itt	eq
 8005044:	091b      	lsreq	r3, r3, #4
 8005046:	3004      	addeq	r0, #4
 8005048:	079a      	lsls	r2, r3, #30
 800504a:	bf04      	itt	eq
 800504c:	089b      	lsreq	r3, r3, #2
 800504e:	3002      	addeq	r0, #2
 8005050:	07da      	lsls	r2, r3, #31
 8005052:	d403      	bmi.n	800505c <__lo0bits+0x50>
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	f100 0001 	add.w	r0, r0, #1
 800505a:	d005      	beq.n	8005068 <__lo0bits+0x5c>
 800505c:	600b      	str	r3, [r1, #0]
 800505e:	4770      	bx	lr
 8005060:	4610      	mov	r0, r2
 8005062:	e7e8      	b.n	8005036 <__lo0bits+0x2a>
 8005064:	2000      	movs	r0, #0
 8005066:	4770      	bx	lr
 8005068:	2020      	movs	r0, #32
 800506a:	4770      	bx	lr

0800506c <__i2b>:
 800506c:	b510      	push	{r4, lr}
 800506e:	460c      	mov	r4, r1
 8005070:	2101      	movs	r1, #1
 8005072:	f7ff feff 	bl	8004e74 <_Balloc>
 8005076:	4602      	mov	r2, r0
 8005078:	b928      	cbnz	r0, 8005086 <__i2b+0x1a>
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <__i2b+0x24>)
 800507c:	4805      	ldr	r0, [pc, #20]	; (8005094 <__i2b+0x28>)
 800507e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005082:	f000 fc9b 	bl	80059bc <__assert_func>
 8005086:	2301      	movs	r3, #1
 8005088:	6144      	str	r4, [r0, #20]
 800508a:	6103      	str	r3, [r0, #16]
 800508c:	bd10      	pop	{r4, pc}
 800508e:	bf00      	nop
 8005090:	080066db 	.word	0x080066db
 8005094:	080066ec 	.word	0x080066ec

08005098 <__multiply>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	4614      	mov	r4, r2
 800509e:	690a      	ldr	r2, [r1, #16]
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	bfb8      	it	lt
 80050a6:	460b      	movlt	r3, r1
 80050a8:	460d      	mov	r5, r1
 80050aa:	bfbc      	itt	lt
 80050ac:	4625      	movlt	r5, r4
 80050ae:	461c      	movlt	r4, r3
 80050b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80050b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80050b8:	68ab      	ldr	r3, [r5, #8]
 80050ba:	6869      	ldr	r1, [r5, #4]
 80050bc:	eb0a 0709 	add.w	r7, sl, r9
 80050c0:	42bb      	cmp	r3, r7
 80050c2:	b085      	sub	sp, #20
 80050c4:	bfb8      	it	lt
 80050c6:	3101      	addlt	r1, #1
 80050c8:	f7ff fed4 	bl	8004e74 <_Balloc>
 80050cc:	b930      	cbnz	r0, 80050dc <__multiply+0x44>
 80050ce:	4602      	mov	r2, r0
 80050d0:	4b42      	ldr	r3, [pc, #264]	; (80051dc <__multiply+0x144>)
 80050d2:	4843      	ldr	r0, [pc, #268]	; (80051e0 <__multiply+0x148>)
 80050d4:	f240 115d 	movw	r1, #349	; 0x15d
 80050d8:	f000 fc70 	bl	80059bc <__assert_func>
 80050dc:	f100 0614 	add.w	r6, r0, #20
 80050e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80050e4:	4633      	mov	r3, r6
 80050e6:	2200      	movs	r2, #0
 80050e8:	4543      	cmp	r3, r8
 80050ea:	d31e      	bcc.n	800512a <__multiply+0x92>
 80050ec:	f105 0c14 	add.w	ip, r5, #20
 80050f0:	f104 0314 	add.w	r3, r4, #20
 80050f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80050f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80050fc:	9202      	str	r2, [sp, #8]
 80050fe:	ebac 0205 	sub.w	r2, ip, r5
 8005102:	3a15      	subs	r2, #21
 8005104:	f022 0203 	bic.w	r2, r2, #3
 8005108:	3204      	adds	r2, #4
 800510a:	f105 0115 	add.w	r1, r5, #21
 800510e:	458c      	cmp	ip, r1
 8005110:	bf38      	it	cc
 8005112:	2204      	movcc	r2, #4
 8005114:	9201      	str	r2, [sp, #4]
 8005116:	9a02      	ldr	r2, [sp, #8]
 8005118:	9303      	str	r3, [sp, #12]
 800511a:	429a      	cmp	r2, r3
 800511c:	d808      	bhi.n	8005130 <__multiply+0x98>
 800511e:	2f00      	cmp	r7, #0
 8005120:	dc55      	bgt.n	80051ce <__multiply+0x136>
 8005122:	6107      	str	r7, [r0, #16]
 8005124:	b005      	add	sp, #20
 8005126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512a:	f843 2b04 	str.w	r2, [r3], #4
 800512e:	e7db      	b.n	80050e8 <__multiply+0x50>
 8005130:	f8b3 a000 	ldrh.w	sl, [r3]
 8005134:	f1ba 0f00 	cmp.w	sl, #0
 8005138:	d020      	beq.n	800517c <__multiply+0xe4>
 800513a:	f105 0e14 	add.w	lr, r5, #20
 800513e:	46b1      	mov	r9, r6
 8005140:	2200      	movs	r2, #0
 8005142:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005146:	f8d9 b000 	ldr.w	fp, [r9]
 800514a:	b2a1      	uxth	r1, r4
 800514c:	fa1f fb8b 	uxth.w	fp, fp
 8005150:	fb0a b101 	mla	r1, sl, r1, fp
 8005154:	4411      	add	r1, r2
 8005156:	f8d9 2000 	ldr.w	r2, [r9]
 800515a:	0c24      	lsrs	r4, r4, #16
 800515c:	0c12      	lsrs	r2, r2, #16
 800515e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005162:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005166:	b289      	uxth	r1, r1
 8005168:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800516c:	45f4      	cmp	ip, lr
 800516e:	f849 1b04 	str.w	r1, [r9], #4
 8005172:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005176:	d8e4      	bhi.n	8005142 <__multiply+0xaa>
 8005178:	9901      	ldr	r1, [sp, #4]
 800517a:	5072      	str	r2, [r6, r1]
 800517c:	9a03      	ldr	r2, [sp, #12]
 800517e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005182:	3304      	adds	r3, #4
 8005184:	f1b9 0f00 	cmp.w	r9, #0
 8005188:	d01f      	beq.n	80051ca <__multiply+0x132>
 800518a:	6834      	ldr	r4, [r6, #0]
 800518c:	f105 0114 	add.w	r1, r5, #20
 8005190:	46b6      	mov	lr, r6
 8005192:	f04f 0a00 	mov.w	sl, #0
 8005196:	880a      	ldrh	r2, [r1, #0]
 8005198:	f8be b002 	ldrh.w	fp, [lr, #2]
 800519c:	fb09 b202 	mla	r2, r9, r2, fp
 80051a0:	4492      	add	sl, r2
 80051a2:	b2a4      	uxth	r4, r4
 80051a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80051a8:	f84e 4b04 	str.w	r4, [lr], #4
 80051ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80051b0:	f8be 2000 	ldrh.w	r2, [lr]
 80051b4:	0c24      	lsrs	r4, r4, #16
 80051b6:	fb09 2404 	mla	r4, r9, r4, r2
 80051ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80051be:	458c      	cmp	ip, r1
 80051c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80051c4:	d8e7      	bhi.n	8005196 <__multiply+0xfe>
 80051c6:	9a01      	ldr	r2, [sp, #4]
 80051c8:	50b4      	str	r4, [r6, r2]
 80051ca:	3604      	adds	r6, #4
 80051cc:	e7a3      	b.n	8005116 <__multiply+0x7e>
 80051ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1a5      	bne.n	8005122 <__multiply+0x8a>
 80051d6:	3f01      	subs	r7, #1
 80051d8:	e7a1      	b.n	800511e <__multiply+0x86>
 80051da:	bf00      	nop
 80051dc:	080066db 	.word	0x080066db
 80051e0:	080066ec 	.word	0x080066ec

080051e4 <__pow5mult>:
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4615      	mov	r5, r2
 80051ea:	f012 0203 	ands.w	r2, r2, #3
 80051ee:	4606      	mov	r6, r0
 80051f0:	460f      	mov	r7, r1
 80051f2:	d007      	beq.n	8005204 <__pow5mult+0x20>
 80051f4:	4c25      	ldr	r4, [pc, #148]	; (800528c <__pow5mult+0xa8>)
 80051f6:	3a01      	subs	r2, #1
 80051f8:	2300      	movs	r3, #0
 80051fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051fe:	f7ff fe9b 	bl	8004f38 <__multadd>
 8005202:	4607      	mov	r7, r0
 8005204:	10ad      	asrs	r5, r5, #2
 8005206:	d03d      	beq.n	8005284 <__pow5mult+0xa0>
 8005208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800520a:	b97c      	cbnz	r4, 800522c <__pow5mult+0x48>
 800520c:	2010      	movs	r0, #16
 800520e:	f7ff fe1b 	bl	8004e48 <malloc>
 8005212:	4602      	mov	r2, r0
 8005214:	6270      	str	r0, [r6, #36]	; 0x24
 8005216:	b928      	cbnz	r0, 8005224 <__pow5mult+0x40>
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <__pow5mult+0xac>)
 800521a:	481e      	ldr	r0, [pc, #120]	; (8005294 <__pow5mult+0xb0>)
 800521c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005220:	f000 fbcc 	bl	80059bc <__assert_func>
 8005224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005228:	6004      	str	r4, [r0, #0]
 800522a:	60c4      	str	r4, [r0, #12]
 800522c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005234:	b94c      	cbnz	r4, 800524a <__pow5mult+0x66>
 8005236:	f240 2171 	movw	r1, #625	; 0x271
 800523a:	4630      	mov	r0, r6
 800523c:	f7ff ff16 	bl	800506c <__i2b>
 8005240:	2300      	movs	r3, #0
 8005242:	f8c8 0008 	str.w	r0, [r8, #8]
 8005246:	4604      	mov	r4, r0
 8005248:	6003      	str	r3, [r0, #0]
 800524a:	f04f 0900 	mov.w	r9, #0
 800524e:	07eb      	lsls	r3, r5, #31
 8005250:	d50a      	bpl.n	8005268 <__pow5mult+0x84>
 8005252:	4639      	mov	r1, r7
 8005254:	4622      	mov	r2, r4
 8005256:	4630      	mov	r0, r6
 8005258:	f7ff ff1e 	bl	8005098 <__multiply>
 800525c:	4639      	mov	r1, r7
 800525e:	4680      	mov	r8, r0
 8005260:	4630      	mov	r0, r6
 8005262:	f7ff fe47 	bl	8004ef4 <_Bfree>
 8005266:	4647      	mov	r7, r8
 8005268:	106d      	asrs	r5, r5, #1
 800526a:	d00b      	beq.n	8005284 <__pow5mult+0xa0>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	b938      	cbnz	r0, 8005280 <__pow5mult+0x9c>
 8005270:	4622      	mov	r2, r4
 8005272:	4621      	mov	r1, r4
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff ff0f 	bl	8005098 <__multiply>
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	f8c0 9000 	str.w	r9, [r0]
 8005280:	4604      	mov	r4, r0
 8005282:	e7e4      	b.n	800524e <__pow5mult+0x6a>
 8005284:	4638      	mov	r0, r7
 8005286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528a:	bf00      	nop
 800528c:	08006840 	.word	0x08006840
 8005290:	08006665 	.word	0x08006665
 8005294:	080066ec 	.word	0x080066ec

08005298 <__lshift>:
 8005298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	460c      	mov	r4, r1
 800529e:	6849      	ldr	r1, [r1, #4]
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80052a6:	68a3      	ldr	r3, [r4, #8]
 80052a8:	4607      	mov	r7, r0
 80052aa:	4691      	mov	r9, r2
 80052ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80052b0:	f108 0601 	add.w	r6, r8, #1
 80052b4:	42b3      	cmp	r3, r6
 80052b6:	db0b      	blt.n	80052d0 <__lshift+0x38>
 80052b8:	4638      	mov	r0, r7
 80052ba:	f7ff fddb 	bl	8004e74 <_Balloc>
 80052be:	4605      	mov	r5, r0
 80052c0:	b948      	cbnz	r0, 80052d6 <__lshift+0x3e>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b28      	ldr	r3, [pc, #160]	; (8005368 <__lshift+0xd0>)
 80052c6:	4829      	ldr	r0, [pc, #164]	; (800536c <__lshift+0xd4>)
 80052c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80052cc:	f000 fb76 	bl	80059bc <__assert_func>
 80052d0:	3101      	adds	r1, #1
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	e7ee      	b.n	80052b4 <__lshift+0x1c>
 80052d6:	2300      	movs	r3, #0
 80052d8:	f100 0114 	add.w	r1, r0, #20
 80052dc:	f100 0210 	add.w	r2, r0, #16
 80052e0:	4618      	mov	r0, r3
 80052e2:	4553      	cmp	r3, sl
 80052e4:	db33      	blt.n	800534e <__lshift+0xb6>
 80052e6:	6920      	ldr	r0, [r4, #16]
 80052e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80052ec:	f104 0314 	add.w	r3, r4, #20
 80052f0:	f019 091f 	ands.w	r9, r9, #31
 80052f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052fc:	d02b      	beq.n	8005356 <__lshift+0xbe>
 80052fe:	f1c9 0e20 	rsb	lr, r9, #32
 8005302:	468a      	mov	sl, r1
 8005304:	2200      	movs	r2, #0
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	fa00 f009 	lsl.w	r0, r0, r9
 800530c:	4302      	orrs	r2, r0
 800530e:	f84a 2b04 	str.w	r2, [sl], #4
 8005312:	f853 2b04 	ldr.w	r2, [r3], #4
 8005316:	459c      	cmp	ip, r3
 8005318:	fa22 f20e 	lsr.w	r2, r2, lr
 800531c:	d8f3      	bhi.n	8005306 <__lshift+0x6e>
 800531e:	ebac 0304 	sub.w	r3, ip, r4
 8005322:	3b15      	subs	r3, #21
 8005324:	f023 0303 	bic.w	r3, r3, #3
 8005328:	3304      	adds	r3, #4
 800532a:	f104 0015 	add.w	r0, r4, #21
 800532e:	4584      	cmp	ip, r0
 8005330:	bf38      	it	cc
 8005332:	2304      	movcc	r3, #4
 8005334:	50ca      	str	r2, [r1, r3]
 8005336:	b10a      	cbz	r2, 800533c <__lshift+0xa4>
 8005338:	f108 0602 	add.w	r6, r8, #2
 800533c:	3e01      	subs	r6, #1
 800533e:	4638      	mov	r0, r7
 8005340:	612e      	str	r6, [r5, #16]
 8005342:	4621      	mov	r1, r4
 8005344:	f7ff fdd6 	bl	8004ef4 <_Bfree>
 8005348:	4628      	mov	r0, r5
 800534a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005352:	3301      	adds	r3, #1
 8005354:	e7c5      	b.n	80052e2 <__lshift+0x4a>
 8005356:	3904      	subs	r1, #4
 8005358:	f853 2b04 	ldr.w	r2, [r3], #4
 800535c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005360:	459c      	cmp	ip, r3
 8005362:	d8f9      	bhi.n	8005358 <__lshift+0xc0>
 8005364:	e7ea      	b.n	800533c <__lshift+0xa4>
 8005366:	bf00      	nop
 8005368:	080066db 	.word	0x080066db
 800536c:	080066ec 	.word	0x080066ec

08005370 <__mcmp>:
 8005370:	b530      	push	{r4, r5, lr}
 8005372:	6902      	ldr	r2, [r0, #16]
 8005374:	690c      	ldr	r4, [r1, #16]
 8005376:	1b12      	subs	r2, r2, r4
 8005378:	d10e      	bne.n	8005398 <__mcmp+0x28>
 800537a:	f100 0314 	add.w	r3, r0, #20
 800537e:	3114      	adds	r1, #20
 8005380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800538c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005390:	42a5      	cmp	r5, r4
 8005392:	d003      	beq.n	800539c <__mcmp+0x2c>
 8005394:	d305      	bcc.n	80053a2 <__mcmp+0x32>
 8005396:	2201      	movs	r2, #1
 8005398:	4610      	mov	r0, r2
 800539a:	bd30      	pop	{r4, r5, pc}
 800539c:	4283      	cmp	r3, r0
 800539e:	d3f3      	bcc.n	8005388 <__mcmp+0x18>
 80053a0:	e7fa      	b.n	8005398 <__mcmp+0x28>
 80053a2:	f04f 32ff 	mov.w	r2, #4294967295
 80053a6:	e7f7      	b.n	8005398 <__mcmp+0x28>

080053a8 <__mdiff>:
 80053a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	460c      	mov	r4, r1
 80053ae:	4606      	mov	r6, r0
 80053b0:	4611      	mov	r1, r2
 80053b2:	4620      	mov	r0, r4
 80053b4:	4617      	mov	r7, r2
 80053b6:	f7ff ffdb 	bl	8005370 <__mcmp>
 80053ba:	1e05      	subs	r5, r0, #0
 80053bc:	d110      	bne.n	80053e0 <__mdiff+0x38>
 80053be:	4629      	mov	r1, r5
 80053c0:	4630      	mov	r0, r6
 80053c2:	f7ff fd57 	bl	8004e74 <_Balloc>
 80053c6:	b930      	cbnz	r0, 80053d6 <__mdiff+0x2e>
 80053c8:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <__mdiff+0x108>)
 80053ca:	4602      	mov	r2, r0
 80053cc:	f240 2132 	movw	r1, #562	; 0x232
 80053d0:	4838      	ldr	r0, [pc, #224]	; (80054b4 <__mdiff+0x10c>)
 80053d2:	f000 faf3 	bl	80059bc <__assert_func>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80053dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e0:	bfa4      	itt	ge
 80053e2:	463b      	movge	r3, r7
 80053e4:	4627      	movge	r7, r4
 80053e6:	4630      	mov	r0, r6
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	bfa6      	itte	ge
 80053ec:	461c      	movge	r4, r3
 80053ee:	2500      	movge	r5, #0
 80053f0:	2501      	movlt	r5, #1
 80053f2:	f7ff fd3f 	bl	8004e74 <_Balloc>
 80053f6:	b920      	cbnz	r0, 8005402 <__mdiff+0x5a>
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <__mdiff+0x108>)
 80053fa:	4602      	mov	r2, r0
 80053fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005400:	e7e6      	b.n	80053d0 <__mdiff+0x28>
 8005402:	693e      	ldr	r6, [r7, #16]
 8005404:	60c5      	str	r5, [r0, #12]
 8005406:	6925      	ldr	r5, [r4, #16]
 8005408:	f107 0114 	add.w	r1, r7, #20
 800540c:	f104 0914 	add.w	r9, r4, #20
 8005410:	f100 0e14 	add.w	lr, r0, #20
 8005414:	f107 0210 	add.w	r2, r7, #16
 8005418:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800541c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005420:	46f2      	mov	sl, lr
 8005422:	2700      	movs	r7, #0
 8005424:	f859 3b04 	ldr.w	r3, [r9], #4
 8005428:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800542c:	fa1f f883 	uxth.w	r8, r3
 8005430:	fa17 f78b 	uxtah	r7, r7, fp
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	eba7 0808 	sub.w	r8, r7, r8
 800543a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800543e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005442:	fa1f f888 	uxth.w	r8, r8
 8005446:	141f      	asrs	r7, r3, #16
 8005448:	454d      	cmp	r5, r9
 800544a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800544e:	f84a 3b04 	str.w	r3, [sl], #4
 8005452:	d8e7      	bhi.n	8005424 <__mdiff+0x7c>
 8005454:	1b2b      	subs	r3, r5, r4
 8005456:	3b15      	subs	r3, #21
 8005458:	f023 0303 	bic.w	r3, r3, #3
 800545c:	3304      	adds	r3, #4
 800545e:	3415      	adds	r4, #21
 8005460:	42a5      	cmp	r5, r4
 8005462:	bf38      	it	cc
 8005464:	2304      	movcc	r3, #4
 8005466:	4419      	add	r1, r3
 8005468:	4473      	add	r3, lr
 800546a:	469e      	mov	lr, r3
 800546c:	460d      	mov	r5, r1
 800546e:	4565      	cmp	r5, ip
 8005470:	d30e      	bcc.n	8005490 <__mdiff+0xe8>
 8005472:	f10c 0203 	add.w	r2, ip, #3
 8005476:	1a52      	subs	r2, r2, r1
 8005478:	f022 0203 	bic.w	r2, r2, #3
 800547c:	3903      	subs	r1, #3
 800547e:	458c      	cmp	ip, r1
 8005480:	bf38      	it	cc
 8005482:	2200      	movcc	r2, #0
 8005484:	441a      	add	r2, r3
 8005486:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800548a:	b17b      	cbz	r3, 80054ac <__mdiff+0x104>
 800548c:	6106      	str	r6, [r0, #16]
 800548e:	e7a5      	b.n	80053dc <__mdiff+0x34>
 8005490:	f855 8b04 	ldr.w	r8, [r5], #4
 8005494:	fa17 f488 	uxtah	r4, r7, r8
 8005498:	1422      	asrs	r2, r4, #16
 800549a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800549e:	b2a4      	uxth	r4, r4
 80054a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80054a4:	f84e 4b04 	str.w	r4, [lr], #4
 80054a8:	1417      	asrs	r7, r2, #16
 80054aa:	e7e0      	b.n	800546e <__mdiff+0xc6>
 80054ac:	3e01      	subs	r6, #1
 80054ae:	e7ea      	b.n	8005486 <__mdiff+0xde>
 80054b0:	080066db 	.word	0x080066db
 80054b4:	080066ec 	.word	0x080066ec

080054b8 <__d2b>:
 80054b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4689      	mov	r9, r1
 80054be:	2101      	movs	r1, #1
 80054c0:	ec57 6b10 	vmov	r6, r7, d0
 80054c4:	4690      	mov	r8, r2
 80054c6:	f7ff fcd5 	bl	8004e74 <_Balloc>
 80054ca:	4604      	mov	r4, r0
 80054cc:	b930      	cbnz	r0, 80054dc <__d2b+0x24>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <__d2b+0xb0>)
 80054d2:	4826      	ldr	r0, [pc, #152]	; (800556c <__d2b+0xb4>)
 80054d4:	f240 310a 	movw	r1, #778	; 0x30a
 80054d8:	f000 fa70 	bl	80059bc <__assert_func>
 80054dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80054e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054e4:	bb35      	cbnz	r5, 8005534 <__d2b+0x7c>
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	d028      	beq.n	800553e <__d2b+0x86>
 80054ec:	4668      	mov	r0, sp
 80054ee:	9600      	str	r6, [sp, #0]
 80054f0:	f7ff fd8c 	bl	800500c <__lo0bits>
 80054f4:	9900      	ldr	r1, [sp, #0]
 80054f6:	b300      	cbz	r0, 800553a <__d2b+0x82>
 80054f8:	9a01      	ldr	r2, [sp, #4]
 80054fa:	f1c0 0320 	rsb	r3, r0, #32
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	430b      	orrs	r3, r1
 8005504:	40c2      	lsrs	r2, r0
 8005506:	6163      	str	r3, [r4, #20]
 8005508:	9201      	str	r2, [sp, #4]
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	61a3      	str	r3, [r4, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2202      	movne	r2, #2
 8005514:	2201      	moveq	r2, #1
 8005516:	6122      	str	r2, [r4, #16]
 8005518:	b1d5      	cbz	r5, 8005550 <__d2b+0x98>
 800551a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800551e:	4405      	add	r5, r0
 8005520:	f8c9 5000 	str.w	r5, [r9]
 8005524:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005528:	f8c8 0000 	str.w	r0, [r8]
 800552c:	4620      	mov	r0, r4
 800552e:	b003      	add	sp, #12
 8005530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005538:	e7d5      	b.n	80054e6 <__d2b+0x2e>
 800553a:	6161      	str	r1, [r4, #20]
 800553c:	e7e5      	b.n	800550a <__d2b+0x52>
 800553e:	a801      	add	r0, sp, #4
 8005540:	f7ff fd64 	bl	800500c <__lo0bits>
 8005544:	9b01      	ldr	r3, [sp, #4]
 8005546:	6163      	str	r3, [r4, #20]
 8005548:	2201      	movs	r2, #1
 800554a:	6122      	str	r2, [r4, #16]
 800554c:	3020      	adds	r0, #32
 800554e:	e7e3      	b.n	8005518 <__d2b+0x60>
 8005550:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005554:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005558:	f8c9 0000 	str.w	r0, [r9]
 800555c:	6918      	ldr	r0, [r3, #16]
 800555e:	f7ff fd35 	bl	8004fcc <__hi0bits>
 8005562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005566:	e7df      	b.n	8005528 <__d2b+0x70>
 8005568:	080066db 	.word	0x080066db
 800556c:	080066ec 	.word	0x080066ec

08005570 <_calloc_r>:
 8005570:	b513      	push	{r0, r1, r4, lr}
 8005572:	434a      	muls	r2, r1
 8005574:	4611      	mov	r1, r2
 8005576:	9201      	str	r2, [sp, #4]
 8005578:	f000 f85a 	bl	8005630 <_malloc_r>
 800557c:	4604      	mov	r4, r0
 800557e:	b118      	cbz	r0, 8005588 <_calloc_r+0x18>
 8005580:	9a01      	ldr	r2, [sp, #4]
 8005582:	2100      	movs	r1, #0
 8005584:	f7fe f950 	bl	8003828 <memset>
 8005588:	4620      	mov	r0, r4
 800558a:	b002      	add	sp, #8
 800558c:	bd10      	pop	{r4, pc}
	...

08005590 <_free_r>:
 8005590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005592:	2900      	cmp	r1, #0
 8005594:	d048      	beq.n	8005628 <_free_r+0x98>
 8005596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800559a:	9001      	str	r0, [sp, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f1a1 0404 	sub.w	r4, r1, #4
 80055a2:	bfb8      	it	lt
 80055a4:	18e4      	addlt	r4, r4, r3
 80055a6:	f000 fa65 	bl	8005a74 <__malloc_lock>
 80055aa:	4a20      	ldr	r2, [pc, #128]	; (800562c <_free_r+0x9c>)
 80055ac:	9801      	ldr	r0, [sp, #4]
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	4615      	mov	r5, r2
 80055b2:	b933      	cbnz	r3, 80055c2 <_free_r+0x32>
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	6014      	str	r4, [r2, #0]
 80055b8:	b003      	add	sp, #12
 80055ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055be:	f000 ba5f 	b.w	8005a80 <__malloc_unlock>
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	d90b      	bls.n	80055de <_free_r+0x4e>
 80055c6:	6821      	ldr	r1, [r4, #0]
 80055c8:	1862      	adds	r2, r4, r1
 80055ca:	4293      	cmp	r3, r2
 80055cc:	bf04      	itt	eq
 80055ce:	681a      	ldreq	r2, [r3, #0]
 80055d0:	685b      	ldreq	r3, [r3, #4]
 80055d2:	6063      	str	r3, [r4, #4]
 80055d4:	bf04      	itt	eq
 80055d6:	1852      	addeq	r2, r2, r1
 80055d8:	6022      	streq	r2, [r4, #0]
 80055da:	602c      	str	r4, [r5, #0]
 80055dc:	e7ec      	b.n	80055b8 <_free_r+0x28>
 80055de:	461a      	mov	r2, r3
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b10b      	cbz	r3, 80055e8 <_free_r+0x58>
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d9fa      	bls.n	80055de <_free_r+0x4e>
 80055e8:	6811      	ldr	r1, [r2, #0]
 80055ea:	1855      	adds	r5, r2, r1
 80055ec:	42a5      	cmp	r5, r4
 80055ee:	d10b      	bne.n	8005608 <_free_r+0x78>
 80055f0:	6824      	ldr	r4, [r4, #0]
 80055f2:	4421      	add	r1, r4
 80055f4:	1854      	adds	r4, r2, r1
 80055f6:	42a3      	cmp	r3, r4
 80055f8:	6011      	str	r1, [r2, #0]
 80055fa:	d1dd      	bne.n	80055b8 <_free_r+0x28>
 80055fc:	681c      	ldr	r4, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	6053      	str	r3, [r2, #4]
 8005602:	4421      	add	r1, r4
 8005604:	6011      	str	r1, [r2, #0]
 8005606:	e7d7      	b.n	80055b8 <_free_r+0x28>
 8005608:	d902      	bls.n	8005610 <_free_r+0x80>
 800560a:	230c      	movs	r3, #12
 800560c:	6003      	str	r3, [r0, #0]
 800560e:	e7d3      	b.n	80055b8 <_free_r+0x28>
 8005610:	6825      	ldr	r5, [r4, #0]
 8005612:	1961      	adds	r1, r4, r5
 8005614:	428b      	cmp	r3, r1
 8005616:	bf04      	itt	eq
 8005618:	6819      	ldreq	r1, [r3, #0]
 800561a:	685b      	ldreq	r3, [r3, #4]
 800561c:	6063      	str	r3, [r4, #4]
 800561e:	bf04      	itt	eq
 8005620:	1949      	addeq	r1, r1, r5
 8005622:	6021      	streq	r1, [r4, #0]
 8005624:	6054      	str	r4, [r2, #4]
 8005626:	e7c7      	b.n	80055b8 <_free_r+0x28>
 8005628:	b003      	add	sp, #12
 800562a:	bd30      	pop	{r4, r5, pc}
 800562c:	20000238 	.word	0x20000238

08005630 <_malloc_r>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	1ccd      	adds	r5, r1, #3
 8005634:	f025 0503 	bic.w	r5, r5, #3
 8005638:	3508      	adds	r5, #8
 800563a:	2d0c      	cmp	r5, #12
 800563c:	bf38      	it	cc
 800563e:	250c      	movcc	r5, #12
 8005640:	2d00      	cmp	r5, #0
 8005642:	4606      	mov	r6, r0
 8005644:	db01      	blt.n	800564a <_malloc_r+0x1a>
 8005646:	42a9      	cmp	r1, r5
 8005648:	d903      	bls.n	8005652 <_malloc_r+0x22>
 800564a:	230c      	movs	r3, #12
 800564c:	6033      	str	r3, [r6, #0]
 800564e:	2000      	movs	r0, #0
 8005650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005652:	f000 fa0f 	bl	8005a74 <__malloc_lock>
 8005656:	4921      	ldr	r1, [pc, #132]	; (80056dc <_malloc_r+0xac>)
 8005658:	680a      	ldr	r2, [r1, #0]
 800565a:	4614      	mov	r4, r2
 800565c:	b99c      	cbnz	r4, 8005686 <_malloc_r+0x56>
 800565e:	4f20      	ldr	r7, [pc, #128]	; (80056e0 <_malloc_r+0xb0>)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	b923      	cbnz	r3, 800566e <_malloc_r+0x3e>
 8005664:	4621      	mov	r1, r4
 8005666:	4630      	mov	r0, r6
 8005668:	f000 f998 	bl	800599c <_sbrk_r>
 800566c:	6038      	str	r0, [r7, #0]
 800566e:	4629      	mov	r1, r5
 8005670:	4630      	mov	r0, r6
 8005672:	f000 f993 	bl	800599c <_sbrk_r>
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	d123      	bne.n	80056c2 <_malloc_r+0x92>
 800567a:	230c      	movs	r3, #12
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	4630      	mov	r0, r6
 8005680:	f000 f9fe 	bl	8005a80 <__malloc_unlock>
 8005684:	e7e3      	b.n	800564e <_malloc_r+0x1e>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	1b5b      	subs	r3, r3, r5
 800568a:	d417      	bmi.n	80056bc <_malloc_r+0x8c>
 800568c:	2b0b      	cmp	r3, #11
 800568e:	d903      	bls.n	8005698 <_malloc_r+0x68>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	441c      	add	r4, r3
 8005694:	6025      	str	r5, [r4, #0]
 8005696:	e004      	b.n	80056a2 <_malloc_r+0x72>
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	42a2      	cmp	r2, r4
 800569c:	bf0c      	ite	eq
 800569e:	600b      	streq	r3, [r1, #0]
 80056a0:	6053      	strne	r3, [r2, #4]
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f9ec 	bl	8005a80 <__malloc_unlock>
 80056a8:	f104 000b 	add.w	r0, r4, #11
 80056ac:	1d23      	adds	r3, r4, #4
 80056ae:	f020 0007 	bic.w	r0, r0, #7
 80056b2:	1ac2      	subs	r2, r0, r3
 80056b4:	d0cc      	beq.n	8005650 <_malloc_r+0x20>
 80056b6:	1a1b      	subs	r3, r3, r0
 80056b8:	50a3      	str	r3, [r4, r2]
 80056ba:	e7c9      	b.n	8005650 <_malloc_r+0x20>
 80056bc:	4622      	mov	r2, r4
 80056be:	6864      	ldr	r4, [r4, #4]
 80056c0:	e7cc      	b.n	800565c <_malloc_r+0x2c>
 80056c2:	1cc4      	adds	r4, r0, #3
 80056c4:	f024 0403 	bic.w	r4, r4, #3
 80056c8:	42a0      	cmp	r0, r4
 80056ca:	d0e3      	beq.n	8005694 <_malloc_r+0x64>
 80056cc:	1a21      	subs	r1, r4, r0
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 f964 	bl	800599c <_sbrk_r>
 80056d4:	3001      	adds	r0, #1
 80056d6:	d1dd      	bne.n	8005694 <_malloc_r+0x64>
 80056d8:	e7cf      	b.n	800567a <_malloc_r+0x4a>
 80056da:	bf00      	nop
 80056dc:	20000238 	.word	0x20000238
 80056e0:	2000023c 	.word	0x2000023c

080056e4 <__ssputs_r>:
 80056e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e8:	688e      	ldr	r6, [r1, #8]
 80056ea:	429e      	cmp	r6, r3
 80056ec:	4682      	mov	sl, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	4690      	mov	r8, r2
 80056f2:	461f      	mov	r7, r3
 80056f4:	d838      	bhi.n	8005768 <__ssputs_r+0x84>
 80056f6:	898a      	ldrh	r2, [r1, #12]
 80056f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056fc:	d032      	beq.n	8005764 <__ssputs_r+0x80>
 80056fe:	6825      	ldr	r5, [r4, #0]
 8005700:	6909      	ldr	r1, [r1, #16]
 8005702:	eba5 0901 	sub.w	r9, r5, r1
 8005706:	6965      	ldr	r5, [r4, #20]
 8005708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800570c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005710:	3301      	adds	r3, #1
 8005712:	444b      	add	r3, r9
 8005714:	106d      	asrs	r5, r5, #1
 8005716:	429d      	cmp	r5, r3
 8005718:	bf38      	it	cc
 800571a:	461d      	movcc	r5, r3
 800571c:	0553      	lsls	r3, r2, #21
 800571e:	d531      	bpl.n	8005784 <__ssputs_r+0xa0>
 8005720:	4629      	mov	r1, r5
 8005722:	f7ff ff85 	bl	8005630 <_malloc_r>
 8005726:	4606      	mov	r6, r0
 8005728:	b950      	cbnz	r0, 8005740 <__ssputs_r+0x5c>
 800572a:	230c      	movs	r3, #12
 800572c:	f8ca 3000 	str.w	r3, [sl]
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005740:	6921      	ldr	r1, [r4, #16]
 8005742:	464a      	mov	r2, r9
 8005744:	f7ff fb88 	bl	8004e58 <memcpy>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800574e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005752:	81a3      	strh	r3, [r4, #12]
 8005754:	6126      	str	r6, [r4, #16]
 8005756:	6165      	str	r5, [r4, #20]
 8005758:	444e      	add	r6, r9
 800575a:	eba5 0509 	sub.w	r5, r5, r9
 800575e:	6026      	str	r6, [r4, #0]
 8005760:	60a5      	str	r5, [r4, #8]
 8005762:	463e      	mov	r6, r7
 8005764:	42be      	cmp	r6, r7
 8005766:	d900      	bls.n	800576a <__ssputs_r+0x86>
 8005768:	463e      	mov	r6, r7
 800576a:	4632      	mov	r2, r6
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	4641      	mov	r1, r8
 8005770:	f000 f966 	bl	8005a40 <memmove>
 8005774:	68a3      	ldr	r3, [r4, #8]
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	1b9b      	subs	r3, r3, r6
 800577a:	4432      	add	r2, r6
 800577c:	60a3      	str	r3, [r4, #8]
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	2000      	movs	r0, #0
 8005782:	e7db      	b.n	800573c <__ssputs_r+0x58>
 8005784:	462a      	mov	r2, r5
 8005786:	f000 f981 	bl	8005a8c <_realloc_r>
 800578a:	4606      	mov	r6, r0
 800578c:	2800      	cmp	r0, #0
 800578e:	d1e1      	bne.n	8005754 <__ssputs_r+0x70>
 8005790:	6921      	ldr	r1, [r4, #16]
 8005792:	4650      	mov	r0, sl
 8005794:	f7ff fefc 	bl	8005590 <_free_r>
 8005798:	e7c7      	b.n	800572a <__ssputs_r+0x46>
	...

0800579c <_svfiprintf_r>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	4698      	mov	r8, r3
 80057a2:	898b      	ldrh	r3, [r1, #12]
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	b09d      	sub	sp, #116	; 0x74
 80057a8:	4607      	mov	r7, r0
 80057aa:	460d      	mov	r5, r1
 80057ac:	4614      	mov	r4, r2
 80057ae:	d50e      	bpl.n	80057ce <_svfiprintf_r+0x32>
 80057b0:	690b      	ldr	r3, [r1, #16]
 80057b2:	b963      	cbnz	r3, 80057ce <_svfiprintf_r+0x32>
 80057b4:	2140      	movs	r1, #64	; 0x40
 80057b6:	f7ff ff3b 	bl	8005630 <_malloc_r>
 80057ba:	6028      	str	r0, [r5, #0]
 80057bc:	6128      	str	r0, [r5, #16]
 80057be:	b920      	cbnz	r0, 80057ca <_svfiprintf_r+0x2e>
 80057c0:	230c      	movs	r3, #12
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	e0d1      	b.n	800596e <_svfiprintf_r+0x1d2>
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	616b      	str	r3, [r5, #20]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9309      	str	r3, [sp, #36]	; 0x24
 80057d2:	2320      	movs	r3, #32
 80057d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80057dc:	2330      	movs	r3, #48	; 0x30
 80057de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005988 <_svfiprintf_r+0x1ec>
 80057e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057e6:	f04f 0901 	mov.w	r9, #1
 80057ea:	4623      	mov	r3, r4
 80057ec:	469a      	mov	sl, r3
 80057ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f2:	b10a      	cbz	r2, 80057f8 <_svfiprintf_r+0x5c>
 80057f4:	2a25      	cmp	r2, #37	; 0x25
 80057f6:	d1f9      	bne.n	80057ec <_svfiprintf_r+0x50>
 80057f8:	ebba 0b04 	subs.w	fp, sl, r4
 80057fc:	d00b      	beq.n	8005816 <_svfiprintf_r+0x7a>
 80057fe:	465b      	mov	r3, fp
 8005800:	4622      	mov	r2, r4
 8005802:	4629      	mov	r1, r5
 8005804:	4638      	mov	r0, r7
 8005806:	f7ff ff6d 	bl	80056e4 <__ssputs_r>
 800580a:	3001      	adds	r0, #1
 800580c:	f000 80aa 	beq.w	8005964 <_svfiprintf_r+0x1c8>
 8005810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005812:	445a      	add	r2, fp
 8005814:	9209      	str	r2, [sp, #36]	; 0x24
 8005816:	f89a 3000 	ldrb.w	r3, [sl]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80a2 	beq.w	8005964 <_svfiprintf_r+0x1c8>
 8005820:	2300      	movs	r3, #0
 8005822:	f04f 32ff 	mov.w	r2, #4294967295
 8005826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800582a:	f10a 0a01 	add.w	sl, sl, #1
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005836:	931a      	str	r3, [sp, #104]	; 0x68
 8005838:	4654      	mov	r4, sl
 800583a:	2205      	movs	r2, #5
 800583c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005840:	4851      	ldr	r0, [pc, #324]	; (8005988 <_svfiprintf_r+0x1ec>)
 8005842:	f7fa fcdd 	bl	8000200 <memchr>
 8005846:	9a04      	ldr	r2, [sp, #16]
 8005848:	b9d8      	cbnz	r0, 8005882 <_svfiprintf_r+0xe6>
 800584a:	06d0      	lsls	r0, r2, #27
 800584c:	bf44      	itt	mi
 800584e:	2320      	movmi	r3, #32
 8005850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005854:	0711      	lsls	r1, r2, #28
 8005856:	bf44      	itt	mi
 8005858:	232b      	movmi	r3, #43	; 0x2b
 800585a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800585e:	f89a 3000 	ldrb.w	r3, [sl]
 8005862:	2b2a      	cmp	r3, #42	; 0x2a
 8005864:	d015      	beq.n	8005892 <_svfiprintf_r+0xf6>
 8005866:	9a07      	ldr	r2, [sp, #28]
 8005868:	4654      	mov	r4, sl
 800586a:	2000      	movs	r0, #0
 800586c:	f04f 0c0a 	mov.w	ip, #10
 8005870:	4621      	mov	r1, r4
 8005872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005876:	3b30      	subs	r3, #48	; 0x30
 8005878:	2b09      	cmp	r3, #9
 800587a:	d94e      	bls.n	800591a <_svfiprintf_r+0x17e>
 800587c:	b1b0      	cbz	r0, 80058ac <_svfiprintf_r+0x110>
 800587e:	9207      	str	r2, [sp, #28]
 8005880:	e014      	b.n	80058ac <_svfiprintf_r+0x110>
 8005882:	eba0 0308 	sub.w	r3, r0, r8
 8005886:	fa09 f303 	lsl.w	r3, r9, r3
 800588a:	4313      	orrs	r3, r2
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	46a2      	mov	sl, r4
 8005890:	e7d2      	b.n	8005838 <_svfiprintf_r+0x9c>
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	1d19      	adds	r1, r3, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	9103      	str	r1, [sp, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	bfbb      	ittet	lt
 800589e:	425b      	neglt	r3, r3
 80058a0:	f042 0202 	orrlt.w	r2, r2, #2
 80058a4:	9307      	strge	r3, [sp, #28]
 80058a6:	9307      	strlt	r3, [sp, #28]
 80058a8:	bfb8      	it	lt
 80058aa:	9204      	strlt	r2, [sp, #16]
 80058ac:	7823      	ldrb	r3, [r4, #0]
 80058ae:	2b2e      	cmp	r3, #46	; 0x2e
 80058b0:	d10c      	bne.n	80058cc <_svfiprintf_r+0x130>
 80058b2:	7863      	ldrb	r3, [r4, #1]
 80058b4:	2b2a      	cmp	r3, #42	; 0x2a
 80058b6:	d135      	bne.n	8005924 <_svfiprintf_r+0x188>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	9203      	str	r2, [sp, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bfb8      	it	lt
 80058c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80058c8:	3402      	adds	r4, #2
 80058ca:	9305      	str	r3, [sp, #20]
 80058cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005998 <_svfiprintf_r+0x1fc>
 80058d0:	7821      	ldrb	r1, [r4, #0]
 80058d2:	2203      	movs	r2, #3
 80058d4:	4650      	mov	r0, sl
 80058d6:	f7fa fc93 	bl	8000200 <memchr>
 80058da:	b140      	cbz	r0, 80058ee <_svfiprintf_r+0x152>
 80058dc:	2340      	movs	r3, #64	; 0x40
 80058de:	eba0 000a 	sub.w	r0, r0, sl
 80058e2:	fa03 f000 	lsl.w	r0, r3, r0
 80058e6:	9b04      	ldr	r3, [sp, #16]
 80058e8:	4303      	orrs	r3, r0
 80058ea:	3401      	adds	r4, #1
 80058ec:	9304      	str	r3, [sp, #16]
 80058ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f2:	4826      	ldr	r0, [pc, #152]	; (800598c <_svfiprintf_r+0x1f0>)
 80058f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058f8:	2206      	movs	r2, #6
 80058fa:	f7fa fc81 	bl	8000200 <memchr>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d038      	beq.n	8005974 <_svfiprintf_r+0x1d8>
 8005902:	4b23      	ldr	r3, [pc, #140]	; (8005990 <_svfiprintf_r+0x1f4>)
 8005904:	bb1b      	cbnz	r3, 800594e <_svfiprintf_r+0x1b2>
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	3307      	adds	r3, #7
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	3308      	adds	r3, #8
 8005910:	9303      	str	r3, [sp, #12]
 8005912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005914:	4433      	add	r3, r6
 8005916:	9309      	str	r3, [sp, #36]	; 0x24
 8005918:	e767      	b.n	80057ea <_svfiprintf_r+0x4e>
 800591a:	fb0c 3202 	mla	r2, ip, r2, r3
 800591e:	460c      	mov	r4, r1
 8005920:	2001      	movs	r0, #1
 8005922:	e7a5      	b.n	8005870 <_svfiprintf_r+0xd4>
 8005924:	2300      	movs	r3, #0
 8005926:	3401      	adds	r4, #1
 8005928:	9305      	str	r3, [sp, #20]
 800592a:	4619      	mov	r1, r3
 800592c:	f04f 0c0a 	mov.w	ip, #10
 8005930:	4620      	mov	r0, r4
 8005932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005936:	3a30      	subs	r2, #48	; 0x30
 8005938:	2a09      	cmp	r2, #9
 800593a:	d903      	bls.n	8005944 <_svfiprintf_r+0x1a8>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0c5      	beq.n	80058cc <_svfiprintf_r+0x130>
 8005940:	9105      	str	r1, [sp, #20]
 8005942:	e7c3      	b.n	80058cc <_svfiprintf_r+0x130>
 8005944:	fb0c 2101 	mla	r1, ip, r1, r2
 8005948:	4604      	mov	r4, r0
 800594a:	2301      	movs	r3, #1
 800594c:	e7f0      	b.n	8005930 <_svfiprintf_r+0x194>
 800594e:	ab03      	add	r3, sp, #12
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	462a      	mov	r2, r5
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <_svfiprintf_r+0x1f8>)
 8005956:	a904      	add	r1, sp, #16
 8005958:	4638      	mov	r0, r7
 800595a:	f7fe f80d 	bl	8003978 <_printf_float>
 800595e:	1c42      	adds	r2, r0, #1
 8005960:	4606      	mov	r6, r0
 8005962:	d1d6      	bne.n	8005912 <_svfiprintf_r+0x176>
 8005964:	89ab      	ldrh	r3, [r5, #12]
 8005966:	065b      	lsls	r3, r3, #25
 8005968:	f53f af2c 	bmi.w	80057c4 <_svfiprintf_r+0x28>
 800596c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800596e:	b01d      	add	sp, #116	; 0x74
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	ab03      	add	r3, sp, #12
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	462a      	mov	r2, r5
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <_svfiprintf_r+0x1f8>)
 800597c:	a904      	add	r1, sp, #16
 800597e:	4638      	mov	r0, r7
 8005980:	f7fe fa9e 	bl	8003ec0 <_printf_i>
 8005984:	e7eb      	b.n	800595e <_svfiprintf_r+0x1c2>
 8005986:	bf00      	nop
 8005988:	0800684c 	.word	0x0800684c
 800598c:	08006856 	.word	0x08006856
 8005990:	08003979 	.word	0x08003979
 8005994:	080056e5 	.word	0x080056e5
 8005998:	08006852 	.word	0x08006852

0800599c <_sbrk_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d06      	ldr	r5, [pc, #24]	; (80059b8 <_sbrk_r+0x1c>)
 80059a0:	2300      	movs	r3, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	602b      	str	r3, [r5, #0]
 80059a8:	f7fc ff80 	bl	80028ac <_sbrk>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_sbrk_r+0x1a>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_sbrk_r+0x1a>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	20000340 	.word	0x20000340

080059bc <__assert_func>:
 80059bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059be:	4614      	mov	r4, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <__assert_func+0x2c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4605      	mov	r5, r0
 80059c8:	68d8      	ldr	r0, [r3, #12]
 80059ca:	b14c      	cbz	r4, 80059e0 <__assert_func+0x24>
 80059cc:	4b07      	ldr	r3, [pc, #28]	; (80059ec <__assert_func+0x30>)
 80059ce:	9100      	str	r1, [sp, #0]
 80059d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059d4:	4906      	ldr	r1, [pc, #24]	; (80059f0 <__assert_func+0x34>)
 80059d6:	462b      	mov	r3, r5
 80059d8:	f000 f80e 	bl	80059f8 <fiprintf>
 80059dc:	f000 faa4 	bl	8005f28 <abort>
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <__assert_func+0x38>)
 80059e2:	461c      	mov	r4, r3
 80059e4:	e7f3      	b.n	80059ce <__assert_func+0x12>
 80059e6:	bf00      	nop
 80059e8:	20000008 	.word	0x20000008
 80059ec:	0800685d 	.word	0x0800685d
 80059f0:	0800686a 	.word	0x0800686a
 80059f4:	08006898 	.word	0x08006898

080059f8 <fiprintf>:
 80059f8:	b40e      	push	{r1, r2, r3}
 80059fa:	b503      	push	{r0, r1, lr}
 80059fc:	4601      	mov	r1, r0
 80059fe:	ab03      	add	r3, sp, #12
 8005a00:	4805      	ldr	r0, [pc, #20]	; (8005a18 <fiprintf+0x20>)
 8005a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a06:	6800      	ldr	r0, [r0, #0]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	f000 f88f 	bl	8005b2c <_vfiprintf_r>
 8005a0e:	b002      	add	sp, #8
 8005a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a14:	b003      	add	sp, #12
 8005a16:	4770      	bx	lr
 8005a18:	20000008 	.word	0x20000008

08005a1c <__ascii_mbtowc>:
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	b901      	cbnz	r1, 8005a22 <__ascii_mbtowc+0x6>
 8005a20:	a901      	add	r1, sp, #4
 8005a22:	b142      	cbz	r2, 8005a36 <__ascii_mbtowc+0x1a>
 8005a24:	b14b      	cbz	r3, 8005a3a <__ascii_mbtowc+0x1e>
 8005a26:	7813      	ldrb	r3, [r2, #0]
 8005a28:	600b      	str	r3, [r1, #0]
 8005a2a:	7812      	ldrb	r2, [r2, #0]
 8005a2c:	1e10      	subs	r0, r2, #0
 8005a2e:	bf18      	it	ne
 8005a30:	2001      	movne	r0, #1
 8005a32:	b002      	add	sp, #8
 8005a34:	4770      	bx	lr
 8005a36:	4610      	mov	r0, r2
 8005a38:	e7fb      	b.n	8005a32 <__ascii_mbtowc+0x16>
 8005a3a:	f06f 0001 	mvn.w	r0, #1
 8005a3e:	e7f8      	b.n	8005a32 <__ascii_mbtowc+0x16>

08005a40 <memmove>:
 8005a40:	4288      	cmp	r0, r1
 8005a42:	b510      	push	{r4, lr}
 8005a44:	eb01 0402 	add.w	r4, r1, r2
 8005a48:	d902      	bls.n	8005a50 <memmove+0x10>
 8005a4a:	4284      	cmp	r4, r0
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	d807      	bhi.n	8005a60 <memmove+0x20>
 8005a50:	1e43      	subs	r3, r0, #1
 8005a52:	42a1      	cmp	r1, r4
 8005a54:	d008      	beq.n	8005a68 <memmove+0x28>
 8005a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a5e:	e7f8      	b.n	8005a52 <memmove+0x12>
 8005a60:	4402      	add	r2, r0
 8005a62:	4601      	mov	r1, r0
 8005a64:	428a      	cmp	r2, r1
 8005a66:	d100      	bne.n	8005a6a <memmove+0x2a>
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a72:	e7f7      	b.n	8005a64 <memmove+0x24>

08005a74 <__malloc_lock>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__malloc_lock+0x8>)
 8005a76:	f000 bc17 	b.w	80062a8 <__retarget_lock_acquire_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000348 	.word	0x20000348

08005a80 <__malloc_unlock>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__malloc_unlock+0x8>)
 8005a82:	f000 bc12 	b.w	80062aa <__retarget_lock_release_recursive>
 8005a86:	bf00      	nop
 8005a88:	20000348 	.word	0x20000348

08005a8c <_realloc_r>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	4607      	mov	r7, r0
 8005a90:	4614      	mov	r4, r2
 8005a92:	460e      	mov	r6, r1
 8005a94:	b921      	cbnz	r1, 8005aa0 <_realloc_r+0x14>
 8005a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	f7ff bdc8 	b.w	8005630 <_malloc_r>
 8005aa0:	b922      	cbnz	r2, 8005aac <_realloc_r+0x20>
 8005aa2:	f7ff fd75 	bl	8005590 <_free_r>
 8005aa6:	4625      	mov	r5, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aac:	f000 fc62 	bl	8006374 <_malloc_usable_size_r>
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d20f      	bcs.n	8005ad4 <_realloc_r+0x48>
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f7ff fdba 	bl	8005630 <_malloc_r>
 8005abc:	4605      	mov	r5, r0
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d0f2      	beq.n	8005aa8 <_realloc_r+0x1c>
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	f7ff f9c7 	bl	8004e58 <memcpy>
 8005aca:	4631      	mov	r1, r6
 8005acc:	4638      	mov	r0, r7
 8005ace:	f7ff fd5f 	bl	8005590 <_free_r>
 8005ad2:	e7e9      	b.n	8005aa8 <_realloc_r+0x1c>
 8005ad4:	4635      	mov	r5, r6
 8005ad6:	e7e7      	b.n	8005aa8 <_realloc_r+0x1c>

08005ad8 <__sfputc_r>:
 8005ad8:	6893      	ldr	r3, [r2, #8]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	b410      	push	{r4}
 8005ae0:	6093      	str	r3, [r2, #8]
 8005ae2:	da08      	bge.n	8005af6 <__sfputc_r+0x1e>
 8005ae4:	6994      	ldr	r4, [r2, #24]
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	db01      	blt.n	8005aee <__sfputc_r+0x16>
 8005aea:	290a      	cmp	r1, #10
 8005aec:	d103      	bne.n	8005af6 <__sfputc_r+0x1e>
 8005aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af2:	f000 b94b 	b.w	8005d8c <__swbuf_r>
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	1c58      	adds	r0, r3, #1
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	7019      	strb	r1, [r3, #0]
 8005afe:	4608      	mov	r0, r1
 8005b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <__sfputs_r>:
 8005b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	18d5      	adds	r5, r2, r3
 8005b10:	42ac      	cmp	r4, r5
 8005b12:	d101      	bne.n	8005b18 <__sfputs_r+0x12>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e007      	b.n	8005b28 <__sfputs_r+0x22>
 8005b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ffda 	bl	8005ad8 <__sfputc_r>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d1f3      	bne.n	8005b10 <__sfputs_r+0xa>
 8005b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b2c <_vfiprintf_r>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	460d      	mov	r5, r1
 8005b32:	b09d      	sub	sp, #116	; 0x74
 8005b34:	4614      	mov	r4, r2
 8005b36:	4698      	mov	r8, r3
 8005b38:	4606      	mov	r6, r0
 8005b3a:	b118      	cbz	r0, 8005b44 <_vfiprintf_r+0x18>
 8005b3c:	6983      	ldr	r3, [r0, #24]
 8005b3e:	b90b      	cbnz	r3, 8005b44 <_vfiprintf_r+0x18>
 8005b40:	f000 fb14 	bl	800616c <__sinit>
 8005b44:	4b89      	ldr	r3, [pc, #548]	; (8005d6c <_vfiprintf_r+0x240>)
 8005b46:	429d      	cmp	r5, r3
 8005b48:	d11b      	bne.n	8005b82 <_vfiprintf_r+0x56>
 8005b4a:	6875      	ldr	r5, [r6, #4]
 8005b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4e:	07d9      	lsls	r1, r3, #31
 8005b50:	d405      	bmi.n	8005b5e <_vfiprintf_r+0x32>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	059a      	lsls	r2, r3, #22
 8005b56:	d402      	bmi.n	8005b5e <_vfiprintf_r+0x32>
 8005b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b5a:	f000 fba5 	bl	80062a8 <__retarget_lock_acquire_recursive>
 8005b5e:	89ab      	ldrh	r3, [r5, #12]
 8005b60:	071b      	lsls	r3, r3, #28
 8005b62:	d501      	bpl.n	8005b68 <_vfiprintf_r+0x3c>
 8005b64:	692b      	ldr	r3, [r5, #16]
 8005b66:	b9eb      	cbnz	r3, 8005ba4 <_vfiprintf_r+0x78>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f000 f96e 	bl	8005e4c <__swsetup_r>
 8005b70:	b1c0      	cbz	r0, 8005ba4 <_vfiprintf_r+0x78>
 8005b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b74:	07dc      	lsls	r4, r3, #31
 8005b76:	d50e      	bpl.n	8005b96 <_vfiprintf_r+0x6a>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	b01d      	add	sp, #116	; 0x74
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	4b7b      	ldr	r3, [pc, #492]	; (8005d70 <_vfiprintf_r+0x244>)
 8005b84:	429d      	cmp	r5, r3
 8005b86:	d101      	bne.n	8005b8c <_vfiprintf_r+0x60>
 8005b88:	68b5      	ldr	r5, [r6, #8]
 8005b8a:	e7df      	b.n	8005b4c <_vfiprintf_r+0x20>
 8005b8c:	4b79      	ldr	r3, [pc, #484]	; (8005d74 <_vfiprintf_r+0x248>)
 8005b8e:	429d      	cmp	r5, r3
 8005b90:	bf08      	it	eq
 8005b92:	68f5      	ldreq	r5, [r6, #12]
 8005b94:	e7da      	b.n	8005b4c <_vfiprintf_r+0x20>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	0598      	lsls	r0, r3, #22
 8005b9a:	d4ed      	bmi.n	8005b78 <_vfiprintf_r+0x4c>
 8005b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b9e:	f000 fb84 	bl	80062aa <__retarget_lock_release_recursive>
 8005ba2:	e7e9      	b.n	8005b78 <_vfiprintf_r+0x4c>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb2:	2330      	movs	r3, #48	; 0x30
 8005bb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d78 <_vfiprintf_r+0x24c>
 8005bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bbc:	f04f 0901 	mov.w	r9, #1
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc8:	b10a      	cbz	r2, 8005bce <_vfiprintf_r+0xa2>
 8005bca:	2a25      	cmp	r2, #37	; 0x25
 8005bcc:	d1f9      	bne.n	8005bc2 <_vfiprintf_r+0x96>
 8005bce:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd2:	d00b      	beq.n	8005bec <_vfiprintf_r+0xc0>
 8005bd4:	465b      	mov	r3, fp
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ff93 	bl	8005b06 <__sfputs_r>
 8005be0:	3001      	adds	r0, #1
 8005be2:	f000 80aa 	beq.w	8005d3a <_vfiprintf_r+0x20e>
 8005be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be8:	445a      	add	r2, fp
 8005bea:	9209      	str	r2, [sp, #36]	; 0x24
 8005bec:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a2 	beq.w	8005d3a <_vfiprintf_r+0x20e>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c00:	f10a 0a01 	add.w	sl, sl, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c0e:	4654      	mov	r4, sl
 8005c10:	2205      	movs	r2, #5
 8005c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c16:	4858      	ldr	r0, [pc, #352]	; (8005d78 <_vfiprintf_r+0x24c>)
 8005c18:	f7fa faf2 	bl	8000200 <memchr>
 8005c1c:	9a04      	ldr	r2, [sp, #16]
 8005c1e:	b9d8      	cbnz	r0, 8005c58 <_vfiprintf_r+0x12c>
 8005c20:	06d1      	lsls	r1, r2, #27
 8005c22:	bf44      	itt	mi
 8005c24:	2320      	movmi	r3, #32
 8005c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2a:	0713      	lsls	r3, r2, #28
 8005c2c:	bf44      	itt	mi
 8005c2e:	232b      	movmi	r3, #43	; 0x2b
 8005c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c34:	f89a 3000 	ldrb.w	r3, [sl]
 8005c38:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3a:	d015      	beq.n	8005c68 <_vfiprintf_r+0x13c>
 8005c3c:	9a07      	ldr	r2, [sp, #28]
 8005c3e:	4654      	mov	r4, sl
 8005c40:	2000      	movs	r0, #0
 8005c42:	f04f 0c0a 	mov.w	ip, #10
 8005c46:	4621      	mov	r1, r4
 8005c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4c:	3b30      	subs	r3, #48	; 0x30
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	d94e      	bls.n	8005cf0 <_vfiprintf_r+0x1c4>
 8005c52:	b1b0      	cbz	r0, 8005c82 <_vfiprintf_r+0x156>
 8005c54:	9207      	str	r2, [sp, #28]
 8005c56:	e014      	b.n	8005c82 <_vfiprintf_r+0x156>
 8005c58:	eba0 0308 	sub.w	r3, r0, r8
 8005c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c60:	4313      	orrs	r3, r2
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	46a2      	mov	sl, r4
 8005c66:	e7d2      	b.n	8005c0e <_vfiprintf_r+0xe2>
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	1d19      	adds	r1, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	9103      	str	r1, [sp, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bfbb      	ittet	lt
 8005c74:	425b      	neglt	r3, r3
 8005c76:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7a:	9307      	strge	r3, [sp, #28]
 8005c7c:	9307      	strlt	r3, [sp, #28]
 8005c7e:	bfb8      	it	lt
 8005c80:	9204      	strlt	r2, [sp, #16]
 8005c82:	7823      	ldrb	r3, [r4, #0]
 8005c84:	2b2e      	cmp	r3, #46	; 0x2e
 8005c86:	d10c      	bne.n	8005ca2 <_vfiprintf_r+0x176>
 8005c88:	7863      	ldrb	r3, [r4, #1]
 8005c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8c:	d135      	bne.n	8005cfa <_vfiprintf_r+0x1ce>
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	1d1a      	adds	r2, r3, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	9203      	str	r2, [sp, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bfb8      	it	lt
 8005c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c9e:	3402      	adds	r4, #2
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d88 <_vfiprintf_r+0x25c>
 8005ca6:	7821      	ldrb	r1, [r4, #0]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	4650      	mov	r0, sl
 8005cac:	f7fa faa8 	bl	8000200 <memchr>
 8005cb0:	b140      	cbz	r0, 8005cc4 <_vfiprintf_r+0x198>
 8005cb2:	2340      	movs	r3, #64	; 0x40
 8005cb4:	eba0 000a 	sub.w	r0, r0, sl
 8005cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8005cbc:	9b04      	ldr	r3, [sp, #16]
 8005cbe:	4303      	orrs	r3, r0
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc8:	482c      	ldr	r0, [pc, #176]	; (8005d7c <_vfiprintf_r+0x250>)
 8005cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cce:	2206      	movs	r2, #6
 8005cd0:	f7fa fa96 	bl	8000200 <memchr>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d03f      	beq.n	8005d58 <_vfiprintf_r+0x22c>
 8005cd8:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <_vfiprintf_r+0x254>)
 8005cda:	bb1b      	cbnz	r3, 8005d24 <_vfiprintf_r+0x1f8>
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	3307      	adds	r3, #7
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	443b      	add	r3, r7
 8005cec:	9309      	str	r3, [sp, #36]	; 0x24
 8005cee:	e767      	b.n	8005bc0 <_vfiprintf_r+0x94>
 8005cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	e7a5      	b.n	8005c46 <_vfiprintf_r+0x11a>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	3401      	adds	r4, #1
 8005cfe:	9305      	str	r3, [sp, #20]
 8005d00:	4619      	mov	r1, r3
 8005d02:	f04f 0c0a 	mov.w	ip, #10
 8005d06:	4620      	mov	r0, r4
 8005d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0c:	3a30      	subs	r2, #48	; 0x30
 8005d0e:	2a09      	cmp	r2, #9
 8005d10:	d903      	bls.n	8005d1a <_vfiprintf_r+0x1ee>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0c5      	beq.n	8005ca2 <_vfiprintf_r+0x176>
 8005d16:	9105      	str	r1, [sp, #20]
 8005d18:	e7c3      	b.n	8005ca2 <_vfiprintf_r+0x176>
 8005d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1e:	4604      	mov	r4, r0
 8005d20:	2301      	movs	r3, #1
 8005d22:	e7f0      	b.n	8005d06 <_vfiprintf_r+0x1da>
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	462a      	mov	r2, r5
 8005d2a:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <_vfiprintf_r+0x258>)
 8005d2c:	a904      	add	r1, sp, #16
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7fd fe22 	bl	8003978 <_printf_float>
 8005d34:	4607      	mov	r7, r0
 8005d36:	1c78      	adds	r0, r7, #1
 8005d38:	d1d6      	bne.n	8005ce8 <_vfiprintf_r+0x1bc>
 8005d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3c:	07d9      	lsls	r1, r3, #31
 8005d3e:	d405      	bmi.n	8005d4c <_vfiprintf_r+0x220>
 8005d40:	89ab      	ldrh	r3, [r5, #12]
 8005d42:	059a      	lsls	r2, r3, #22
 8005d44:	d402      	bmi.n	8005d4c <_vfiprintf_r+0x220>
 8005d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d48:	f000 faaf 	bl	80062aa <__retarget_lock_release_recursive>
 8005d4c:	89ab      	ldrh	r3, [r5, #12]
 8005d4e:	065b      	lsls	r3, r3, #25
 8005d50:	f53f af12 	bmi.w	8005b78 <_vfiprintf_r+0x4c>
 8005d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d56:	e711      	b.n	8005b7c <_vfiprintf_r+0x50>
 8005d58:	ab03      	add	r3, sp, #12
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <_vfiprintf_r+0x258>)
 8005d60:	a904      	add	r1, sp, #16
 8005d62:	4630      	mov	r0, r6
 8005d64:	f7fe f8ac 	bl	8003ec0 <_printf_i>
 8005d68:	e7e4      	b.n	8005d34 <_vfiprintf_r+0x208>
 8005d6a:	bf00      	nop
 8005d6c:	080069c4 	.word	0x080069c4
 8005d70:	080069e4 	.word	0x080069e4
 8005d74:	080069a4 	.word	0x080069a4
 8005d78:	0800684c 	.word	0x0800684c
 8005d7c:	08006856 	.word	0x08006856
 8005d80:	08003979 	.word	0x08003979
 8005d84:	08005b07 	.word	0x08005b07
 8005d88:	08006852 	.word	0x08006852

08005d8c <__swbuf_r>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	460e      	mov	r6, r1
 8005d90:	4614      	mov	r4, r2
 8005d92:	4605      	mov	r5, r0
 8005d94:	b118      	cbz	r0, 8005d9e <__swbuf_r+0x12>
 8005d96:	6983      	ldr	r3, [r0, #24]
 8005d98:	b90b      	cbnz	r3, 8005d9e <__swbuf_r+0x12>
 8005d9a:	f000 f9e7 	bl	800616c <__sinit>
 8005d9e:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <__swbuf_r+0x98>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	d12b      	bne.n	8005dfc <__swbuf_r+0x70>
 8005da4:	686c      	ldr	r4, [r5, #4]
 8005da6:	69a3      	ldr	r3, [r4, #24]
 8005da8:	60a3      	str	r3, [r4, #8]
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	071a      	lsls	r2, r3, #28
 8005dae:	d52f      	bpl.n	8005e10 <__swbuf_r+0x84>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	b36b      	cbz	r3, 8005e10 <__swbuf_r+0x84>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	1ac0      	subs	r0, r0, r3
 8005dba:	6963      	ldr	r3, [r4, #20]
 8005dbc:	b2f6      	uxtb	r6, r6
 8005dbe:	4283      	cmp	r3, r0
 8005dc0:	4637      	mov	r7, r6
 8005dc2:	dc04      	bgt.n	8005dce <__swbuf_r+0x42>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f93c 	bl	8006044 <_fflush_r>
 8005dcc:	bb30      	cbnz	r0, 8005e1c <__swbuf_r+0x90>
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	60a3      	str	r3, [r4, #8]
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	6022      	str	r2, [r4, #0]
 8005dda:	701e      	strb	r6, [r3, #0]
 8005ddc:	6963      	ldr	r3, [r4, #20]
 8005dde:	3001      	adds	r0, #1
 8005de0:	4283      	cmp	r3, r0
 8005de2:	d004      	beq.n	8005dee <__swbuf_r+0x62>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	07db      	lsls	r3, r3, #31
 8005de8:	d506      	bpl.n	8005df8 <__swbuf_r+0x6c>
 8005dea:	2e0a      	cmp	r6, #10
 8005dec:	d104      	bne.n	8005df8 <__swbuf_r+0x6c>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 f927 	bl	8006044 <_fflush_r>
 8005df6:	b988      	cbnz	r0, 8005e1c <__swbuf_r+0x90>
 8005df8:	4638      	mov	r0, r7
 8005dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <__swbuf_r+0x9c>)
 8005dfe:	429c      	cmp	r4, r3
 8005e00:	d101      	bne.n	8005e06 <__swbuf_r+0x7a>
 8005e02:	68ac      	ldr	r4, [r5, #8]
 8005e04:	e7cf      	b.n	8005da6 <__swbuf_r+0x1a>
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <__swbuf_r+0xa0>)
 8005e08:	429c      	cmp	r4, r3
 8005e0a:	bf08      	it	eq
 8005e0c:	68ec      	ldreq	r4, [r5, #12]
 8005e0e:	e7ca      	b.n	8005da6 <__swbuf_r+0x1a>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f81a 	bl	8005e4c <__swsetup_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d0cb      	beq.n	8005db4 <__swbuf_r+0x28>
 8005e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e20:	e7ea      	b.n	8005df8 <__swbuf_r+0x6c>
 8005e22:	bf00      	nop
 8005e24:	080069c4 	.word	0x080069c4
 8005e28:	080069e4 	.word	0x080069e4
 8005e2c:	080069a4 	.word	0x080069a4

08005e30 <__ascii_wctomb>:
 8005e30:	b149      	cbz	r1, 8005e46 <__ascii_wctomb+0x16>
 8005e32:	2aff      	cmp	r2, #255	; 0xff
 8005e34:	bf85      	ittet	hi
 8005e36:	238a      	movhi	r3, #138	; 0x8a
 8005e38:	6003      	strhi	r3, [r0, #0]
 8005e3a:	700a      	strbls	r2, [r1, #0]
 8005e3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e40:	bf98      	it	ls
 8005e42:	2001      	movls	r0, #1
 8005e44:	4770      	bx	lr
 8005e46:	4608      	mov	r0, r1
 8005e48:	4770      	bx	lr
	...

08005e4c <__swsetup_r>:
 8005e4c:	4b32      	ldr	r3, [pc, #200]	; (8005f18 <__swsetup_r+0xcc>)
 8005e4e:	b570      	push	{r4, r5, r6, lr}
 8005e50:	681d      	ldr	r5, [r3, #0]
 8005e52:	4606      	mov	r6, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	b125      	cbz	r5, 8005e62 <__swsetup_r+0x16>
 8005e58:	69ab      	ldr	r3, [r5, #24]
 8005e5a:	b913      	cbnz	r3, 8005e62 <__swsetup_r+0x16>
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f985 	bl	800616c <__sinit>
 8005e62:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <__swsetup_r+0xd0>)
 8005e64:	429c      	cmp	r4, r3
 8005e66:	d10f      	bne.n	8005e88 <__swsetup_r+0x3c>
 8005e68:	686c      	ldr	r4, [r5, #4]
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e70:	0719      	lsls	r1, r3, #28
 8005e72:	d42c      	bmi.n	8005ece <__swsetup_r+0x82>
 8005e74:	06dd      	lsls	r5, r3, #27
 8005e76:	d411      	bmi.n	8005e9c <__swsetup_r+0x50>
 8005e78:	2309      	movs	r3, #9
 8005e7a:	6033      	str	r3, [r6, #0]
 8005e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	f04f 30ff 	mov.w	r0, #4294967295
 8005e86:	e03e      	b.n	8005f06 <__swsetup_r+0xba>
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <__swsetup_r+0xd4>)
 8005e8a:	429c      	cmp	r4, r3
 8005e8c:	d101      	bne.n	8005e92 <__swsetup_r+0x46>
 8005e8e:	68ac      	ldr	r4, [r5, #8]
 8005e90:	e7eb      	b.n	8005e6a <__swsetup_r+0x1e>
 8005e92:	4b24      	ldr	r3, [pc, #144]	; (8005f24 <__swsetup_r+0xd8>)
 8005e94:	429c      	cmp	r4, r3
 8005e96:	bf08      	it	eq
 8005e98:	68ec      	ldreq	r4, [r5, #12]
 8005e9a:	e7e6      	b.n	8005e6a <__swsetup_r+0x1e>
 8005e9c:	0758      	lsls	r0, r3, #29
 8005e9e:	d512      	bpl.n	8005ec6 <__swsetup_r+0x7a>
 8005ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ea2:	b141      	cbz	r1, 8005eb6 <__swsetup_r+0x6a>
 8005ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	d002      	beq.n	8005eb2 <__swsetup_r+0x66>
 8005eac:	4630      	mov	r0, r6
 8005eae:	f7ff fb6f 	bl	8005590 <_free_r>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6063      	str	r3, [r4, #4]
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	f043 0308 	orr.w	r3, r3, #8
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	b94b      	cbnz	r3, 8005ee6 <__swsetup_r+0x9a>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005edc:	d003      	beq.n	8005ee6 <__swsetup_r+0x9a>
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 fa07 	bl	80062f4 <__smakebuf_r>
 8005ee6:	89a0      	ldrh	r0, [r4, #12]
 8005ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eec:	f010 0301 	ands.w	r3, r0, #1
 8005ef0:	d00a      	beq.n	8005f08 <__swsetup_r+0xbc>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60a3      	str	r3, [r4, #8]
 8005ef6:	6963      	ldr	r3, [r4, #20]
 8005ef8:	425b      	negs	r3, r3
 8005efa:	61a3      	str	r3, [r4, #24]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	b943      	cbnz	r3, 8005f12 <__swsetup_r+0xc6>
 8005f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f04:	d1ba      	bne.n	8005e7c <__swsetup_r+0x30>
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	0781      	lsls	r1, r0, #30
 8005f0a:	bf58      	it	pl
 8005f0c:	6963      	ldrpl	r3, [r4, #20]
 8005f0e:	60a3      	str	r3, [r4, #8]
 8005f10:	e7f4      	b.n	8005efc <__swsetup_r+0xb0>
 8005f12:	2000      	movs	r0, #0
 8005f14:	e7f7      	b.n	8005f06 <__swsetup_r+0xba>
 8005f16:	bf00      	nop
 8005f18:	20000008 	.word	0x20000008
 8005f1c:	080069c4 	.word	0x080069c4
 8005f20:	080069e4 	.word	0x080069e4
 8005f24:	080069a4 	.word	0x080069a4

08005f28 <abort>:
 8005f28:	b508      	push	{r3, lr}
 8005f2a:	2006      	movs	r0, #6
 8005f2c:	f000 fa52 	bl	80063d4 <raise>
 8005f30:	2001      	movs	r0, #1
 8005f32:	f7fc fc43 	bl	80027bc <_exit>
	...

08005f38 <__sflush_r>:
 8005f38:	898a      	ldrh	r2, [r1, #12]
 8005f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3e:	4605      	mov	r5, r0
 8005f40:	0710      	lsls	r0, r2, #28
 8005f42:	460c      	mov	r4, r1
 8005f44:	d458      	bmi.n	8005ff8 <__sflush_r+0xc0>
 8005f46:	684b      	ldr	r3, [r1, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dc05      	bgt.n	8005f58 <__sflush_r+0x20>
 8005f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dc02      	bgt.n	8005f58 <__sflush_r+0x20>
 8005f52:	2000      	movs	r0, #0
 8005f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f5a:	2e00      	cmp	r6, #0
 8005f5c:	d0f9      	beq.n	8005f52 <__sflush_r+0x1a>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f64:	682f      	ldr	r7, [r5, #0]
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	d032      	beq.n	8005fd0 <__sflush_r+0x98>
 8005f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	075a      	lsls	r2, r3, #29
 8005f70:	d505      	bpl.n	8005f7e <__sflush_r+0x46>
 8005f72:	6863      	ldr	r3, [r4, #4]
 8005f74:	1ac0      	subs	r0, r0, r3
 8005f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f78:	b10b      	cbz	r3, 8005f7e <__sflush_r+0x46>
 8005f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f7c:	1ac0      	subs	r0, r0, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4602      	mov	r2, r0
 8005f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f84:	6a21      	ldr	r1, [r4, #32]
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b0      	blx	r6
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	d106      	bne.n	8005f9e <__sflush_r+0x66>
 8005f90:	6829      	ldr	r1, [r5, #0]
 8005f92:	291d      	cmp	r1, #29
 8005f94:	d82c      	bhi.n	8005ff0 <__sflush_r+0xb8>
 8005f96:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <__sflush_r+0x108>)
 8005f98:	40ca      	lsrs	r2, r1
 8005f9a:	07d6      	lsls	r6, r2, #31
 8005f9c:	d528      	bpl.n	8005ff0 <__sflush_r+0xb8>
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	6062      	str	r2, [r4, #4]
 8005fa2:	04d9      	lsls	r1, r3, #19
 8005fa4:	6922      	ldr	r2, [r4, #16]
 8005fa6:	6022      	str	r2, [r4, #0]
 8005fa8:	d504      	bpl.n	8005fb4 <__sflush_r+0x7c>
 8005faa:	1c42      	adds	r2, r0, #1
 8005fac:	d101      	bne.n	8005fb2 <__sflush_r+0x7a>
 8005fae:	682b      	ldr	r3, [r5, #0]
 8005fb0:	b903      	cbnz	r3, 8005fb4 <__sflush_r+0x7c>
 8005fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8005fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb6:	602f      	str	r7, [r5, #0]
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d0ca      	beq.n	8005f52 <__sflush_r+0x1a>
 8005fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	d002      	beq.n	8005fca <__sflush_r+0x92>
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff fae3 	bl	8005590 <_free_r>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8005fce:	e7c1      	b.n	8005f54 <__sflush_r+0x1c>
 8005fd0:	6a21      	ldr	r1, [r4, #32]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b0      	blx	r6
 8005fd8:	1c41      	adds	r1, r0, #1
 8005fda:	d1c7      	bne.n	8005f6c <__sflush_r+0x34>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c4      	beq.n	8005f6c <__sflush_r+0x34>
 8005fe2:	2b1d      	cmp	r3, #29
 8005fe4:	d001      	beq.n	8005fea <__sflush_r+0xb2>
 8005fe6:	2b16      	cmp	r3, #22
 8005fe8:	d101      	bne.n	8005fee <__sflush_r+0xb6>
 8005fea:	602f      	str	r7, [r5, #0]
 8005fec:	e7b1      	b.n	8005f52 <__sflush_r+0x1a>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff4:	81a3      	strh	r3, [r4, #12]
 8005ff6:	e7ad      	b.n	8005f54 <__sflush_r+0x1c>
 8005ff8:	690f      	ldr	r7, [r1, #16]
 8005ffa:	2f00      	cmp	r7, #0
 8005ffc:	d0a9      	beq.n	8005f52 <__sflush_r+0x1a>
 8005ffe:	0793      	lsls	r3, r2, #30
 8006000:	680e      	ldr	r6, [r1, #0]
 8006002:	bf08      	it	eq
 8006004:	694b      	ldreq	r3, [r1, #20]
 8006006:	600f      	str	r7, [r1, #0]
 8006008:	bf18      	it	ne
 800600a:	2300      	movne	r3, #0
 800600c:	eba6 0807 	sub.w	r8, r6, r7
 8006010:	608b      	str	r3, [r1, #8]
 8006012:	f1b8 0f00 	cmp.w	r8, #0
 8006016:	dd9c      	ble.n	8005f52 <__sflush_r+0x1a>
 8006018:	6a21      	ldr	r1, [r4, #32]
 800601a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800601c:	4643      	mov	r3, r8
 800601e:	463a      	mov	r2, r7
 8006020:	4628      	mov	r0, r5
 8006022:	47b0      	blx	r6
 8006024:	2800      	cmp	r0, #0
 8006026:	dc06      	bgt.n	8006036 <__sflush_r+0xfe>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	e78e      	b.n	8005f54 <__sflush_r+0x1c>
 8006036:	4407      	add	r7, r0
 8006038:	eba8 0800 	sub.w	r8, r8, r0
 800603c:	e7e9      	b.n	8006012 <__sflush_r+0xda>
 800603e:	bf00      	nop
 8006040:	20400001 	.word	0x20400001

08006044 <_fflush_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	690b      	ldr	r3, [r1, #16]
 8006048:	4605      	mov	r5, r0
 800604a:	460c      	mov	r4, r1
 800604c:	b913      	cbnz	r3, 8006054 <_fflush_r+0x10>
 800604e:	2500      	movs	r5, #0
 8006050:	4628      	mov	r0, r5
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	b118      	cbz	r0, 800605e <_fflush_r+0x1a>
 8006056:	6983      	ldr	r3, [r0, #24]
 8006058:	b90b      	cbnz	r3, 800605e <_fflush_r+0x1a>
 800605a:	f000 f887 	bl	800616c <__sinit>
 800605e:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <_fflush_r+0x6c>)
 8006060:	429c      	cmp	r4, r3
 8006062:	d11b      	bne.n	800609c <_fflush_r+0x58>
 8006064:	686c      	ldr	r4, [r5, #4]
 8006066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ef      	beq.n	800604e <_fflush_r+0xa>
 800606e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006070:	07d0      	lsls	r0, r2, #31
 8006072:	d404      	bmi.n	800607e <_fflush_r+0x3a>
 8006074:	0599      	lsls	r1, r3, #22
 8006076:	d402      	bmi.n	800607e <_fflush_r+0x3a>
 8006078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800607a:	f000 f915 	bl	80062a8 <__retarget_lock_acquire_recursive>
 800607e:	4628      	mov	r0, r5
 8006080:	4621      	mov	r1, r4
 8006082:	f7ff ff59 	bl	8005f38 <__sflush_r>
 8006086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006088:	07da      	lsls	r2, r3, #31
 800608a:	4605      	mov	r5, r0
 800608c:	d4e0      	bmi.n	8006050 <_fflush_r+0xc>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	059b      	lsls	r3, r3, #22
 8006092:	d4dd      	bmi.n	8006050 <_fflush_r+0xc>
 8006094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006096:	f000 f908 	bl	80062aa <__retarget_lock_release_recursive>
 800609a:	e7d9      	b.n	8006050 <_fflush_r+0xc>
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <_fflush_r+0x70>)
 800609e:	429c      	cmp	r4, r3
 80060a0:	d101      	bne.n	80060a6 <_fflush_r+0x62>
 80060a2:	68ac      	ldr	r4, [r5, #8]
 80060a4:	e7df      	b.n	8006066 <_fflush_r+0x22>
 80060a6:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <_fflush_r+0x74>)
 80060a8:	429c      	cmp	r4, r3
 80060aa:	bf08      	it	eq
 80060ac:	68ec      	ldreq	r4, [r5, #12]
 80060ae:	e7da      	b.n	8006066 <_fflush_r+0x22>
 80060b0:	080069c4 	.word	0x080069c4
 80060b4:	080069e4 	.word	0x080069e4
 80060b8:	080069a4 	.word	0x080069a4

080060bc <std>:
 80060bc:	2300      	movs	r3, #0
 80060be:	b510      	push	{r4, lr}
 80060c0:	4604      	mov	r4, r0
 80060c2:	e9c0 3300 	strd	r3, r3, [r0]
 80060c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ca:	6083      	str	r3, [r0, #8]
 80060cc:	8181      	strh	r1, [r0, #12]
 80060ce:	6643      	str	r3, [r0, #100]	; 0x64
 80060d0:	81c2      	strh	r2, [r0, #14]
 80060d2:	6183      	str	r3, [r0, #24]
 80060d4:	4619      	mov	r1, r3
 80060d6:	2208      	movs	r2, #8
 80060d8:	305c      	adds	r0, #92	; 0x5c
 80060da:	f7fd fba5 	bl	8003828 <memset>
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <std+0x38>)
 80060e0:	6263      	str	r3, [r4, #36]	; 0x24
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <std+0x3c>)
 80060e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <std+0x40>)
 80060e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <std+0x44>)
 80060ec:	6224      	str	r4, [r4, #32]
 80060ee:	6323      	str	r3, [r4, #48]	; 0x30
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	bf00      	nop
 80060f4:	0800640d 	.word	0x0800640d
 80060f8:	0800642f 	.word	0x0800642f
 80060fc:	08006467 	.word	0x08006467
 8006100:	0800648b 	.word	0x0800648b

08006104 <_cleanup_r>:
 8006104:	4901      	ldr	r1, [pc, #4]	; (800610c <_cleanup_r+0x8>)
 8006106:	f000 b8af 	b.w	8006268 <_fwalk_reent>
 800610a:	bf00      	nop
 800610c:	08006045 	.word	0x08006045

08006110 <__sfmoreglue>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	1e4a      	subs	r2, r1, #1
 8006114:	2568      	movs	r5, #104	; 0x68
 8006116:	4355      	muls	r5, r2
 8006118:	460e      	mov	r6, r1
 800611a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800611e:	f7ff fa87 	bl	8005630 <_malloc_r>
 8006122:	4604      	mov	r4, r0
 8006124:	b140      	cbz	r0, 8006138 <__sfmoreglue+0x28>
 8006126:	2100      	movs	r1, #0
 8006128:	e9c0 1600 	strd	r1, r6, [r0]
 800612c:	300c      	adds	r0, #12
 800612e:	60a0      	str	r0, [r4, #8]
 8006130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006134:	f7fd fb78 	bl	8003828 <memset>
 8006138:	4620      	mov	r0, r4
 800613a:	bd70      	pop	{r4, r5, r6, pc}

0800613c <__sfp_lock_acquire>:
 800613c:	4801      	ldr	r0, [pc, #4]	; (8006144 <__sfp_lock_acquire+0x8>)
 800613e:	f000 b8b3 	b.w	80062a8 <__retarget_lock_acquire_recursive>
 8006142:	bf00      	nop
 8006144:	2000034c 	.word	0x2000034c

08006148 <__sfp_lock_release>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__sfp_lock_release+0x8>)
 800614a:	f000 b8ae 	b.w	80062aa <__retarget_lock_release_recursive>
 800614e:	bf00      	nop
 8006150:	2000034c 	.word	0x2000034c

08006154 <__sinit_lock_acquire>:
 8006154:	4801      	ldr	r0, [pc, #4]	; (800615c <__sinit_lock_acquire+0x8>)
 8006156:	f000 b8a7 	b.w	80062a8 <__retarget_lock_acquire_recursive>
 800615a:	bf00      	nop
 800615c:	20000347 	.word	0x20000347

08006160 <__sinit_lock_release>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__sinit_lock_release+0x8>)
 8006162:	f000 b8a2 	b.w	80062aa <__retarget_lock_release_recursive>
 8006166:	bf00      	nop
 8006168:	20000347 	.word	0x20000347

0800616c <__sinit>:
 800616c:	b510      	push	{r4, lr}
 800616e:	4604      	mov	r4, r0
 8006170:	f7ff fff0 	bl	8006154 <__sinit_lock_acquire>
 8006174:	69a3      	ldr	r3, [r4, #24]
 8006176:	b11b      	cbz	r3, 8006180 <__sinit+0x14>
 8006178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800617c:	f7ff bff0 	b.w	8006160 <__sinit_lock_release>
 8006180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006184:	6523      	str	r3, [r4, #80]	; 0x50
 8006186:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <__sinit+0x68>)
 8006188:	4a13      	ldr	r2, [pc, #76]	; (80061d8 <__sinit+0x6c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	62a2      	str	r2, [r4, #40]	; 0x28
 800618e:	42a3      	cmp	r3, r4
 8006190:	bf04      	itt	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	61a3      	streq	r3, [r4, #24]
 8006196:	4620      	mov	r0, r4
 8006198:	f000 f820 	bl	80061dc <__sfp>
 800619c:	6060      	str	r0, [r4, #4]
 800619e:	4620      	mov	r0, r4
 80061a0:	f000 f81c 	bl	80061dc <__sfp>
 80061a4:	60a0      	str	r0, [r4, #8]
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f818 	bl	80061dc <__sfp>
 80061ac:	2200      	movs	r2, #0
 80061ae:	60e0      	str	r0, [r4, #12]
 80061b0:	2104      	movs	r1, #4
 80061b2:	6860      	ldr	r0, [r4, #4]
 80061b4:	f7ff ff82 	bl	80060bc <std>
 80061b8:	68a0      	ldr	r0, [r4, #8]
 80061ba:	2201      	movs	r2, #1
 80061bc:	2109      	movs	r1, #9
 80061be:	f7ff ff7d 	bl	80060bc <std>
 80061c2:	68e0      	ldr	r0, [r4, #12]
 80061c4:	2202      	movs	r2, #2
 80061c6:	2112      	movs	r1, #18
 80061c8:	f7ff ff78 	bl	80060bc <std>
 80061cc:	2301      	movs	r3, #1
 80061ce:	61a3      	str	r3, [r4, #24]
 80061d0:	e7d2      	b.n	8006178 <__sinit+0xc>
 80061d2:	bf00      	nop
 80061d4:	08006620 	.word	0x08006620
 80061d8:	08006105 	.word	0x08006105

080061dc <__sfp>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	4607      	mov	r7, r0
 80061e0:	f7ff ffac 	bl	800613c <__sfp_lock_acquire>
 80061e4:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <__sfp+0x84>)
 80061e6:	681e      	ldr	r6, [r3, #0]
 80061e8:	69b3      	ldr	r3, [r6, #24]
 80061ea:	b913      	cbnz	r3, 80061f2 <__sfp+0x16>
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff ffbd 	bl	800616c <__sinit>
 80061f2:	3648      	adds	r6, #72	; 0x48
 80061f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	d503      	bpl.n	8006204 <__sfp+0x28>
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	b30b      	cbz	r3, 8006244 <__sfp+0x68>
 8006200:	6836      	ldr	r6, [r6, #0]
 8006202:	e7f7      	b.n	80061f4 <__sfp+0x18>
 8006204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006208:	b9d5      	cbnz	r5, 8006240 <__sfp+0x64>
 800620a:	4b16      	ldr	r3, [pc, #88]	; (8006264 <__sfp+0x88>)
 800620c:	60e3      	str	r3, [r4, #12]
 800620e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006212:	6665      	str	r5, [r4, #100]	; 0x64
 8006214:	f000 f847 	bl	80062a6 <__retarget_lock_init_recursive>
 8006218:	f7ff ff96 	bl	8006148 <__sfp_lock_release>
 800621c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006224:	6025      	str	r5, [r4, #0]
 8006226:	61a5      	str	r5, [r4, #24]
 8006228:	2208      	movs	r2, #8
 800622a:	4629      	mov	r1, r5
 800622c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006230:	f7fd fafa 	bl	8003828 <memset>
 8006234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800623c:	4620      	mov	r0, r4
 800623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006240:	3468      	adds	r4, #104	; 0x68
 8006242:	e7d9      	b.n	80061f8 <__sfp+0x1c>
 8006244:	2104      	movs	r1, #4
 8006246:	4638      	mov	r0, r7
 8006248:	f7ff ff62 	bl	8006110 <__sfmoreglue>
 800624c:	4604      	mov	r4, r0
 800624e:	6030      	str	r0, [r6, #0]
 8006250:	2800      	cmp	r0, #0
 8006252:	d1d5      	bne.n	8006200 <__sfp+0x24>
 8006254:	f7ff ff78 	bl	8006148 <__sfp_lock_release>
 8006258:	230c      	movs	r3, #12
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	e7ee      	b.n	800623c <__sfp+0x60>
 800625e:	bf00      	nop
 8006260:	08006620 	.word	0x08006620
 8006264:	ffff0001 	.word	0xffff0001

08006268 <_fwalk_reent>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4606      	mov	r6, r0
 800626e:	4688      	mov	r8, r1
 8006270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006274:	2700      	movs	r7, #0
 8006276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800627a:	f1b9 0901 	subs.w	r9, r9, #1
 800627e:	d505      	bpl.n	800628c <_fwalk_reent+0x24>
 8006280:	6824      	ldr	r4, [r4, #0]
 8006282:	2c00      	cmp	r4, #0
 8006284:	d1f7      	bne.n	8006276 <_fwalk_reent+0xe>
 8006286:	4638      	mov	r0, r7
 8006288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628c:	89ab      	ldrh	r3, [r5, #12]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d907      	bls.n	80062a2 <_fwalk_reent+0x3a>
 8006292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006296:	3301      	adds	r3, #1
 8006298:	d003      	beq.n	80062a2 <_fwalk_reent+0x3a>
 800629a:	4629      	mov	r1, r5
 800629c:	4630      	mov	r0, r6
 800629e:	47c0      	blx	r8
 80062a0:	4307      	orrs	r7, r0
 80062a2:	3568      	adds	r5, #104	; 0x68
 80062a4:	e7e9      	b.n	800627a <_fwalk_reent+0x12>

080062a6 <__retarget_lock_init_recursive>:
 80062a6:	4770      	bx	lr

080062a8 <__retarget_lock_acquire_recursive>:
 80062a8:	4770      	bx	lr

080062aa <__retarget_lock_release_recursive>:
 80062aa:	4770      	bx	lr

080062ac <__swhatbuf_r>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	460e      	mov	r6, r1
 80062b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b4:	2900      	cmp	r1, #0
 80062b6:	b096      	sub	sp, #88	; 0x58
 80062b8:	4614      	mov	r4, r2
 80062ba:	461d      	mov	r5, r3
 80062bc:	da07      	bge.n	80062ce <__swhatbuf_r+0x22>
 80062be:	2300      	movs	r3, #0
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	89b3      	ldrh	r3, [r6, #12]
 80062c4:	061a      	lsls	r2, r3, #24
 80062c6:	d410      	bmi.n	80062ea <__swhatbuf_r+0x3e>
 80062c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062cc:	e00e      	b.n	80062ec <__swhatbuf_r+0x40>
 80062ce:	466a      	mov	r2, sp
 80062d0:	f000 f902 	bl	80064d8 <_fstat_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	dbf2      	blt.n	80062be <__swhatbuf_r+0x12>
 80062d8:	9a01      	ldr	r2, [sp, #4]
 80062da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062e2:	425a      	negs	r2, r3
 80062e4:	415a      	adcs	r2, r3
 80062e6:	602a      	str	r2, [r5, #0]
 80062e8:	e7ee      	b.n	80062c8 <__swhatbuf_r+0x1c>
 80062ea:	2340      	movs	r3, #64	; 0x40
 80062ec:	2000      	movs	r0, #0
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	b016      	add	sp, #88	; 0x58
 80062f2:	bd70      	pop	{r4, r5, r6, pc}

080062f4 <__smakebuf_r>:
 80062f4:	898b      	ldrh	r3, [r1, #12]
 80062f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062f8:	079d      	lsls	r5, r3, #30
 80062fa:	4606      	mov	r6, r0
 80062fc:	460c      	mov	r4, r1
 80062fe:	d507      	bpl.n	8006310 <__smakebuf_r+0x1c>
 8006300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	6123      	str	r3, [r4, #16]
 8006308:	2301      	movs	r3, #1
 800630a:	6163      	str	r3, [r4, #20]
 800630c:	b002      	add	sp, #8
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	ab01      	add	r3, sp, #4
 8006312:	466a      	mov	r2, sp
 8006314:	f7ff ffca 	bl	80062ac <__swhatbuf_r>
 8006318:	9900      	ldr	r1, [sp, #0]
 800631a:	4605      	mov	r5, r0
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff f987 	bl	8005630 <_malloc_r>
 8006322:	b948      	cbnz	r0, 8006338 <__smakebuf_r+0x44>
 8006324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006328:	059a      	lsls	r2, r3, #22
 800632a:	d4ef      	bmi.n	800630c <__smakebuf_r+0x18>
 800632c:	f023 0303 	bic.w	r3, r3, #3
 8006330:	f043 0302 	orr.w	r3, r3, #2
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	e7e3      	b.n	8006300 <__smakebuf_r+0xc>
 8006338:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <__smakebuf_r+0x7c>)
 800633a:	62b3      	str	r3, [r6, #40]	; 0x28
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	6020      	str	r0, [r4, #0]
 8006340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006344:	81a3      	strh	r3, [r4, #12]
 8006346:	9b00      	ldr	r3, [sp, #0]
 8006348:	6163      	str	r3, [r4, #20]
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	6120      	str	r0, [r4, #16]
 800634e:	b15b      	cbz	r3, 8006368 <__smakebuf_r+0x74>
 8006350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006354:	4630      	mov	r0, r6
 8006356:	f000 f8d1 	bl	80064fc <_isatty_r>
 800635a:	b128      	cbz	r0, 8006368 <__smakebuf_r+0x74>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	f043 0301 	orr.w	r3, r3, #1
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	89a0      	ldrh	r0, [r4, #12]
 800636a:	4305      	orrs	r5, r0
 800636c:	81a5      	strh	r5, [r4, #12]
 800636e:	e7cd      	b.n	800630c <__smakebuf_r+0x18>
 8006370:	08006105 	.word	0x08006105

08006374 <_malloc_usable_size_r>:
 8006374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006378:	1f18      	subs	r0, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	bfbc      	itt	lt
 800637e:	580b      	ldrlt	r3, [r1, r0]
 8006380:	18c0      	addlt	r0, r0, r3
 8006382:	4770      	bx	lr

08006384 <_raise_r>:
 8006384:	291f      	cmp	r1, #31
 8006386:	b538      	push	{r3, r4, r5, lr}
 8006388:	4604      	mov	r4, r0
 800638a:	460d      	mov	r5, r1
 800638c:	d904      	bls.n	8006398 <_raise_r+0x14>
 800638e:	2316      	movs	r3, #22
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	f04f 30ff 	mov.w	r0, #4294967295
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800639a:	b112      	cbz	r2, 80063a2 <_raise_r+0x1e>
 800639c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063a0:	b94b      	cbnz	r3, 80063b6 <_raise_r+0x32>
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f830 	bl	8006408 <_getpid_r>
 80063a8:	462a      	mov	r2, r5
 80063aa:	4601      	mov	r1, r0
 80063ac:	4620      	mov	r0, r4
 80063ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063b2:	f000 b817 	b.w	80063e4 <_kill_r>
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d00a      	beq.n	80063d0 <_raise_r+0x4c>
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	d103      	bne.n	80063c6 <_raise_r+0x42>
 80063be:	2316      	movs	r3, #22
 80063c0:	6003      	str	r3, [r0, #0]
 80063c2:	2001      	movs	r0, #1
 80063c4:	e7e7      	b.n	8006396 <_raise_r+0x12>
 80063c6:	2400      	movs	r4, #0
 80063c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063cc:	4628      	mov	r0, r5
 80063ce:	4798      	blx	r3
 80063d0:	2000      	movs	r0, #0
 80063d2:	e7e0      	b.n	8006396 <_raise_r+0x12>

080063d4 <raise>:
 80063d4:	4b02      	ldr	r3, [pc, #8]	; (80063e0 <raise+0xc>)
 80063d6:	4601      	mov	r1, r0
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	f7ff bfd3 	b.w	8006384 <_raise_r>
 80063de:	bf00      	nop
 80063e0:	20000008 	.word	0x20000008

080063e4 <_kill_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d07      	ldr	r5, [pc, #28]	; (8006404 <_kill_r+0x20>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	f7fc f9d3 	bl	800279c <_kill>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d102      	bne.n	8006400 <_kill_r+0x1c>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	b103      	cbz	r3, 8006400 <_kill_r+0x1c>
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	20000340 	.word	0x20000340

08006408 <_getpid_r>:
 8006408:	f7fc b9c0 	b.w	800278c <_getpid>

0800640c <__sread>:
 800640c:	b510      	push	{r4, lr}
 800640e:	460c      	mov	r4, r1
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	f000 f894 	bl	8006540 <_read_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	bfab      	itete	ge
 800641c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800641e:	89a3      	ldrhlt	r3, [r4, #12]
 8006420:	181b      	addge	r3, r3, r0
 8006422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006426:	bfac      	ite	ge
 8006428:	6563      	strge	r3, [r4, #84]	; 0x54
 800642a:	81a3      	strhlt	r3, [r4, #12]
 800642c:	bd10      	pop	{r4, pc}

0800642e <__swrite>:
 800642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006432:	461f      	mov	r7, r3
 8006434:	898b      	ldrh	r3, [r1, #12]
 8006436:	05db      	lsls	r3, r3, #23
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	4616      	mov	r6, r2
 800643e:	d505      	bpl.n	800644c <__swrite+0x1e>
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	2302      	movs	r3, #2
 8006446:	2200      	movs	r2, #0
 8006448:	f000 f868 	bl	800651c <_lseek_r>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	4628      	mov	r0, r5
 800645e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	f000 b817 	b.w	8006494 <_write_r>

08006466 <__sseek>:
 8006466:	b510      	push	{r4, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646e:	f000 f855 	bl	800651c <_lseek_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	bf15      	itete	ne
 8006478:	6560      	strne	r0, [r4, #84]	; 0x54
 800647a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800647e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006482:	81a3      	strheq	r3, [r4, #12]
 8006484:	bf18      	it	ne
 8006486:	81a3      	strhne	r3, [r4, #12]
 8006488:	bd10      	pop	{r4, pc}

0800648a <__sclose>:
 800648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648e:	f000 b813 	b.w	80064b8 <_close_r>
	...

08006494 <_write_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	; (80064b4 <_write_r+0x20>)
 8006498:	4604      	mov	r4, r0
 800649a:	4608      	mov	r0, r1
 800649c:	4611      	mov	r1, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	602a      	str	r2, [r5, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7fc f9b1 	bl	800280a <_write>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_write_r+0x1e>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_write_r+0x1e>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	20000340 	.word	0x20000340

080064b8 <_close_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d06      	ldr	r5, [pc, #24]	; (80064d4 <_close_r+0x1c>)
 80064bc:	2300      	movs	r3, #0
 80064be:	4604      	mov	r4, r0
 80064c0:	4608      	mov	r0, r1
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f7fc f9bd 	bl	8002842 <_close>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_close_r+0x1a>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_close_r+0x1a>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	20000340 	.word	0x20000340

080064d8 <_fstat_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d07      	ldr	r5, [pc, #28]	; (80064f8 <_fstat_r+0x20>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	f7fc f9b8 	bl	800285a <_fstat>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d102      	bne.n	80064f4 <_fstat_r+0x1c>
 80064ee:	682b      	ldr	r3, [r5, #0]
 80064f0:	b103      	cbz	r3, 80064f4 <_fstat_r+0x1c>
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	bf00      	nop
 80064f8:	20000340 	.word	0x20000340

080064fc <_isatty_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d06      	ldr	r5, [pc, #24]	; (8006518 <_isatty_r+0x1c>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fc f9b7 	bl	800287a <_isatty>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_isatty_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_isatty_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20000340 	.word	0x20000340

0800651c <_lseek_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d07      	ldr	r5, [pc, #28]	; (800653c <_lseek_r+0x20>)
 8006520:	4604      	mov	r4, r0
 8006522:	4608      	mov	r0, r1
 8006524:	4611      	mov	r1, r2
 8006526:	2200      	movs	r2, #0
 8006528:	602a      	str	r2, [r5, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f7fc f9b0 	bl	8002890 <_lseek>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_lseek_r+0x1e>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_lseek_r+0x1e>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20000340 	.word	0x20000340

08006540 <_read_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d07      	ldr	r5, [pc, #28]	; (8006560 <_read_r+0x20>)
 8006544:	4604      	mov	r4, r0
 8006546:	4608      	mov	r0, r1
 8006548:	4611      	mov	r1, r2
 800654a:	2200      	movs	r2, #0
 800654c:	602a      	str	r2, [r5, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f7fc f93e 	bl	80027d0 <_read>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_read_r+0x1e>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_read_r+0x1e>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20000340 	.word	0x20000340

08006564 <_init>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr

08006570 <_fini>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr
